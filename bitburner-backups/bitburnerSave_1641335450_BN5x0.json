{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":438,\"hp\":28,\"max_hp\":28,\"strength\":187,\"defense\":181,\"dexterity\":181,\"agility\":181,\"charisma\":176,\"intelligence\":18,\"hacking_chance_mult\":1.16,\"hacking_speed_mult\":1.16,\"hacking_money_mult\":1.16,\"hacking_grow_mult\":1.16,\"hacking_exp\":69569541.2235947,\"strength_exp\":81182.4909598429,\"defense_exp\":69113.85095982926,\"dexterity_exp\":69125.45095982925,\"agility_exp\":69125.45095982925,\"charisma_exp\":59822.61055982478,\"intelligence_exp\":378.71999999999997,\"hacking_mult\":1.16,\"strength_mult\":1.16,\"defense_mult\":1.16,\"dexterity_mult\":1.16,\"agility_mult\":1.16,\"charisma_mult\":1.16,\"hacking_exp_mult\":1.16,\"strength_exp_mult\":1.16,\"defense_exp_mult\":1.16,\"dexterity_exp_mult\":1.16,\"agility_exp_mult\":1.16,\"charisma_exp_mult\":1.16,\"company_rep_mult\":1.16,\"faction_rep_mult\":1.16,\"money\":2329883988.580493,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{\"MegaCorp\":\"Software Engineering Intern\",\"Carmichael Security\":\"Security Guard\",\"Four Sigma\":\"IT Intern\"},\"companyName\":\"MegaCorp\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-4096gb-0\",\"pserv-4096gb-1\",\"pserv-4096gb-2\",\"pserv-4096gb-3\",\"pserv-4096gb-4\",\"pserv-4096gb-5\",\"pserv-4096gb-6\",\"pserv-4096gb-7\",\"pserv-4096gb-8\",\"pserv-4096gb-9\",\"pserv-4096gb-10\",\"pserv-4096gb-0-0\",\"pserv-4096gb-1-0\",\"pserv-4096gb-2-0\",\"pserv-4096gb-3-0\",\"pserv-4096gb-4-0\",\"pserv-4096gb-5-0\",\"pserv-4096gb-6-0\",\"pserv-4096gb-7-0\",\"pserv-4096gb-8-0\",\"pserv-4096gb-9-0\",\"pserv-4096gb-10-0\",\"pserv-4096gb-11\",\"pserv-4096gb-12\",\"pserv-4096gb-13\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":350714.4000036398,\"ram\":64,\"totalMoneyGenerated\":467625952.7200449,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":340650.6000037966,\"ram\":64,\"totalMoneyGenerated\":429238645.10897857,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":337560.6000037827,\"ram\":64,\"totalMoneyGenerated\":427636127.22897726,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":332821.00000376784,\"ram\":64,\"totalMoneyGenerated\":427421907.0914704,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":326371.4000037552,\"ram\":64,\"totalMoneyGenerated\":425938808.7153235,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":325971.2000037347,\"ram\":64,\"totalMoneyGenerated\":423228466.64911085,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":325410.8000036913,\"ram\":64,\"totalMoneyGenerated\":421824073.7564761,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":321414.2000034166,\"ram\":64,\"totalMoneyGenerated\":421602346.25040025,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":319817.0000034108,\"ram\":64,\"totalMoneyGenerated\":421431027.1085846,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":316381.8000034003,\"ram\":64,\"totalMoneyGenerated\":418815840.8589204,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":282273.80000162416,\"ram\":64,\"totalMoneyGenerated\":416122588.6918178,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":265933.000001376,\"ram\":64,\"totalMoneyGenerated\":414300879.60608786,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":247382.0000013111,\"ram\":64,\"totalMoneyGenerated\":409647280.4082746,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":238384.60000115438,\"ram\":64,\"totalMoneyGenerated\":406742865.24742347,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":182493.99999978018,\"ram\":64,\"totalMoneyGenerated\":375733285.8716745,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":172291.39999982665,\"ram\":64,\"totalMoneyGenerated\":362519162.48478633,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":171200.5999998227,\"ram\":64,\"totalMoneyGenerated\":360872471.2101336,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":165264.79999980112,\"ram\":64,\"totalMoneyGenerated\":350783743.8831801,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":163968.5999997964,\"ram\":64,\"totalMoneyGenerated\":348436842.5408965,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":162421.79999979076,\"ram\":64,\"totalMoneyGenerated\":345432569.7049224,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":160322.99999978315,\"ram\":64,\"totalMoneyGenerated\":341124131.8075407,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":159045.39999977848,\"ram\":64,\"totalMoneyGenerated\":338405726.4087104,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":156955.3999996561,\"ram\":64,\"totalMoneyGenerated\":333958741.997662,\"name\":\"hacknet-node-22\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"CyberSec\",\"Netburners\",\"Sector-12\",\"NiteSec\",\"The Black Hand\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[],\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"numPeopleKilled\":1,\"karma\":-3.5,\"crime_money_mult\":1.16,\"crime_success_mult\":1.16,\"isWorking\":false,\"focus\":false,\"workType\":\"\",\"workCostMult\":20,\"workExpMult\":10,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":250,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.16,\"hacknet_node_money_mult\":1.16,\"hacknet_node_purchase_cost_mult\":0.84,\"hacknet_node_ram_cost_mult\":0.84,\"hacknet_node_core_cost_mult\":0.84,\"hacknet_node_level_cost_mult\":0.84,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":5,\"lastUpdate\":1641335450326,\"totalPlaytime\":1799543400,\"playtimeSinceLastAug\":350914400,\"playtimeSinceLastBitnode\":350914400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-2496960,\"codingcontract\":0,\"corporation\":0,\"crime\":95700,\"gang\":0,\"hacking\":30545848459.660603,\"hacknet\":9088843484.334513,\"hacknet_expenses\":-9285075499.017134,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":2329882988.580497,\"work\":2567973.200000057,\"servers\":-22739700170.08753,\"other\":-5280200000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-2496960,\"codingcontract\":0,\"corporation\":0,\"crime\":95700,\"gang\":0,\"hacking\":30545848459.660603,\"hacknet\":9088843484.334513,\"hacknet_expenses\":-9285075499.017134,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":2329882988.580497,\"work\":2567973.200000057,\"servers\":-22739700170.08753,\"other\":-5280200000,\"augmentations\":0}},\"scriptProdSinceLastAug\":30545806236,\"exploits\":[],\"factionWorkType\":\"Faction Field Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"95.5.4.6\",\"isConnectedTo\":true,\"maxRam\":1024,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"BruteSSH.exe\",\"AutoLink.exe\",\"DeepscanV1.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"Formulas.exe\"],\"ramUsed\":238.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"home\",27,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981971,\"ramUsage\":6.05,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"home\",27,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981972,\"ramUsage\":6.05,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"home\",27,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981973,\"ramUsage\":6.05,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"home\",27,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981974,\"ramUsage\":6.05,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"home\",27,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981975,\"ramUsage\":6.05,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"home\",27,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981976,\"ramUsage\":6.05,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"home\",27,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981977,\"ramUsage\":6.05,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"home\",27,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981978,\"ramUsage\":6.05,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"home\",27,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981979,\"ramUsage\":6.05,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"home\",27,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981980,\"ramUsage\":6.05,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"home\",27,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981981,\"ramUsage\":6.05,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"home\",27,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981982,\"ramUsage\":6.05,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"home\",27,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981983,\"ramUsage\":6.05,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"home\",27,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981984,\"ramUsage\":6.05,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"home\",27,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981985,\"ramUsage\":6.05,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"home\",27,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981986,\"ramUsage\":6.05,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"home\",27,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981987,\"ramUsage\":6.05,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"home\",27,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981988,\"ramUsage\":6.05,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"home\",27,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981989,\"ramUsage\":6.05,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"home\",27,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981990,\"ramUsage\":6.05,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"home\",27,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981991,\"ramUsage\":6.05,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"home\",27,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981992,\"ramUsage\":6.05,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"home\",27,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981993,\"ramUsage\":6.05,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982053,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982054,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982055,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982056,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982057,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982058,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982059,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":15}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982060,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982061,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982062,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982063,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982064,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982065,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982066,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982067,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982068,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982069,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982070,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982071,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982072,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982073,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982074,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982075,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982076,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982077,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982078,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982079,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982080,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982081,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982082,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982083,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982084,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982085,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982086,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982087,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982088,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982089,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982090,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\ttarget = target || 'foodnstuff';\\n\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.45;\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(target);\\n\\t}\\n\\t\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(target);\\n\\t}\\n\\n\\tns.nuke(target);\\n\\n\\tlet moneyThreshOverride = 0;\\n\\tlet securityThreshOverride = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (!securityThreshOverride && ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tsecurityThreshOverride = 4;\\n\\t\\t} else if (!moneyThreshOverride && ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tlet percentGrowth = await ns.grow(target);\\n\\t\\t\\tif (percentGrowth < 1) {\\n\\t\\t\\t\\tmoneyThreshOverride = 10;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tmoneyThreshOverride = 4;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t\\tif (securityThreshOverride) {\\n\\t\\t\\tsecurityThreshOverride--\\n\\t\\t}\\n\\n\\t\\tif (moneyThreshOverride) {\\n\\t\\t\\tmoneyThreshOverride--\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///a7cf0364-c8b1-4d05-a53e-1ee1dd627301\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///a7cf0364-c8b1-4d05-a53e-1ee1dd627301\"}],\"ramUsage\":2.65,\"server\":\"home\",\"moduleSequenceNumber\":204}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let pserv = false;\\n    let targetLimit = 0;\\n    if (ns.args.length) {\\n        [pserv, targetLimit] = ns.args;\\n    }\\n\\n    let purchased = ns.getPurchasedServers();\\n\\n    function __readNodes__(fPath) {\\n        let nodes = ns.read(fPath);\\n        nodes = nodes.split(',');\\n        return nodes;\\n    }\\n\\n    async function __scanAndWriteAllNodes__() {\\n        let nodes = [];\\n        let newNodes = ['home'];\\n        let newNodes2 = [];\\n        let repeat = true;\\n\\n        while (repeat) {\\n            newNodes2 = [];\\n            repeat = false;\\n\\n            let i, j;\\n            for (i = 0; i < newNodes.length; i++) {\\n                let connected = ns.scan(newNodes[i]);\\n\\n                for (j = 0; j < connected.length; j++) {\\n                    let node = connected[j];\\n                    if (!nodes.includes(node) && !newNodes.includes(node) && !newNodes2.includes(node)) {\\n                        newNodes2.push(node);\\n                        repeat = true;\\n                    }\\n                }\\n            }\\n\\n            nodes = nodes.concat(newNodes);\\n            newNodes = newNodes2;\\n        }\\n\\n        nodes = nodes.concat(purchased);\\n        await ns.write('nodes.txt', nodes, 'w');\\n    }\\n\\n    function __nukeAvailableNodes__() {\\n        let nodes = __readNodes__('nodes.txt');\\n        let myHackLevel = ns.getHackingLevel();\\n\\n        let Programs = [\\n            ns.fileExists('BruteSSH.exe'),\\n            ns.fileExists('FTPCrack.exe'),\\n            ns.fileExists('relaySMTP.exe'),\\n            ns.fileExists('HTTPWorm.exe'),\\n            ns.fileExists('SQLInject.exe')\\n        ];\\n\\n        let availPrograms = Programs.reduce((num, bool) => num + bool, 0);\\n\\n        nodes.forEach((node) => {\\n            if (\\n                !ns.hasRootAccess(node) &&\\n                ns.getServerNumPortsRequired(node) <= availPrograms &&\\n                ns.getServerRequiredHackingLevel(node) <= myHackLevel\\n            ) {\\n                Programs.forEach((exists, i) => {\\n                    if (exists) {\\n                        switch (i) {\\n                            case 0:\\n                                ns.brutessh(node);\\n                                break;\\n                            case 1:\\n                                ns.ftpcrack(node);\\n                                break;\\n                            case 2:\\n                                ns.relaysmtp(node);\\n                                break;\\n                            case 3:\\n                                ns.httpworm(node);\\n                                break;\\n                            case 4:\\n                                ns.sqlinject(node);\\n                                break;\\n                        }\\n                    }\\n                });\\n                ns.nuke(node);\\n            }\\n        });\\n    }\\n\\n    async function __scanAndWriteRootedNodes__() {\\n        let nodes = __readNodes__('nodes.txt');\\n        let rooted = nodes.reduce((arr, node) => {\\n            //don't hack ourselves\\n            if (ns.hasRootAccess(node) && node !== 'home' && !purchased.includes(node)) {\\n                let maxMoney = ns.getServerMaxMoney(node);\\n\\n                arr.push(`${maxMoney} ${node}`);\\n            }\\n            return arr;\\n        }, []);\\n\\n        //lowest max money at the front, filter invalid servers, remove money from name\\n        rooted.sort((a, b) => +b.split(' ')[0] - +a.split(' ')[0]);\\n        rooted = rooted.filter((node) => +node.split(' ')[0] > 0);\\n        await ns.write('money_rooted.txt', rooted, 'w');\\n\\n        rooted = rooted.map((node) => node.split(' ')[1]);\\n\\n        if (targetLimit && targetLimit != 'All') {\\n            rooted = rooted.slice(rooted.length - targetLimit);\\n        }\\n\\n        ns.tprint(`hackable nodes: ${rooted.length}`);\\n        await ns.write('rooted.txt', rooted, 'w');\\n    }\\n\\n    //read the nodes\\n    await __scanAndWriteAllNodes__();\\n    __nukeAvailableNodes__();\\n    await __scanAndWriteRootedNodes__();\\n\\n    //load nodes\\n    let attackNodes = [];\\n    if (pserv) {\\n        attackNodes = purchased;\\n    } else {\\n        attackNodes = __readNodes__('rooted.txt');\\n        if (purchased.length) {\\n            attackNodes = attackNodes.concat(purchased);\\n        }\\n    }\\n\\n    attackNodes.push('home');\\n    ns.scriptKill('daemon.js', 'home');\\n    ns.scriptKill('daemon_fml.js', 'home');\\n\\n    // spin up attack servers\\n    if (ns.getServerMaxRam('home') - ns.getServerUsedRam('home') > ns.getScriptRam('main_hack.js') * attackNodes.length)\\n        attackNodes.forEach((attacker) => {\\n            ns.exec('main_hack.js', 'home', 1, attacker, pserv || false, targetLimit || '');\\n        });\\n    else\\n        for (let i = 0; i < attackNodes.length; i++) {\\n            await ns.sleep(200);\\n            ns.exec('main_hack.js', 'home', 1, attackNodes[i], pserv || false, targetLimit || '');\\n        }\\n}\",\"filename\":\"setup_hacks.js\",\"url\":\"blob:file:///a03c41d1-470e-4273-8f3c-ed8ee4dee3a5\",\"module\":{},\"dependencies\":[{\"filename\":\"setup_hacks.js\",\"url\":\"blob:file:///a03c41d1-470e-4273-8f3c-ed8ee4dee3a5\"}],\"ramUsage\":7.35,\"server\":\"home\",\"moduleSequenceNumber\":19485}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet server = ns.args[0];\\n\\n\\tlet maxRam = ns.getServerMaxRam('home');\\n\\tlet usedRam = ns.getServerUsedRam('home');\\n\\tlet scriptRam = ns.getScriptRam('basic_hack.js');\\n\\tlet threads = Math.floor((maxRam - usedRam) / scriptRam);\\n\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t}\\n\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t}\\n\\n\\tns.nuke(server);\\n\\tns.run('basic_hack.js', threads, server);\\n}\",\"filename\":\"home_hack.js\",\"url\":\"blob:file:///e4d5c7e1-2a3e-4351-a242-0862f6f2a700\",\"module\":\"\",\"dependencies\":[{\"filename\":\"home_hack.js\",\"url\":\"blob:file:///e4d5c7e1-2a3e-4351-a242-0862f6f2a700\"}],\"ramUsage\":3.05,\"server\":\"home\",\"moduleSequenceNumber\":206}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":207}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":208}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":209}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [ATTACK_SERVER, pserv, limit] = ns.args;\\n\\n    function __readNodes__(fPath) {\\n        let nodes = ns.read(fPath);\\n        nodes = nodes.split(',');\\n        return nodes;\\n    }\\n\\n    function __findAttackableNodes__() {\\n        let rooted = __readNodes__('rooted.txt');\\n        let targetNodes = [];\\n\\n        //check which are valid for attacking\\n        for (let i = 0; i < rooted.length; i++) {\\n            if (ns.getServerMaxMoney(rooted[i])) {\\n                targetNodes.push(rooted[i]);\\n            }\\n        }\\n\\n        if (pserv && limit && ATTACK_SERVER.split('-')[0] === 'pserv') {\\n            let pservNum = +ATTACK_SERVER.split('-')[2];\\n            let multiplier = Math.floor(targetNodes.length / 5);\\n\\n            if (pservNum < 5) {\\n                targetNodes = targetNodes.slice(0, multiplier);\\n            } else if (pservNum < 10) {\\n                targetNodes = targetNodes.slice(multiplier, multiplier * 2);\\n            } else if (pservNum < 15) {\\n                targetNodes = targetNodes.slice(multiplier * 2, multiplier * 3);\\n            } else if (pservNum < 20) {\\n                targetNodes = targetNodes.slice(multiplier * 3, multiplier * 4);\\n            } else {\\n                targetNodes = targetNodes.slice(multiplier * 4, -1);\\n            }\\n        }\\n\\n        return targetNodes;\\n    }\\n\\n    //prep attackServer\\n    let files = ['weaken.script', 'grow.script', 'hack.script', 'daemon.js', 'daemon_fml.js'];\\n    await ns.scp(files, 'home', ATTACK_SERVER);\\n    ns.scriptKill('daemon.js', ATTACK_SERVER);\\n    ns.scriptKill('daemon_fml.js', ATTACK_SERVER);\\n\\n    //load nodes\\n    let targetNodes = __findAttackableNodes__();\\n\\n    //calc ram and threads per daemon\\n    let serverRam = ns.getServerMaxRam(ATTACK_SERVER);\\n    if (ATTACK_SERVER === 'home') {\\n        serverRam -= ns.getServerUsedRam(ATTACK_SERVER);\\n        serverRam -= ns.getScriptRam('setup_hacks.js');\\n    }\\n\\n    let daemonRam = ns.getScriptRam('daemon.js');\\n    let minRamPerDaemon =\\n        ns.getScriptRam('weaken.script') + ns.getScriptRam('grow.script') + ns.getScriptRam('hack.script');\\n\\n    let leftoverRam = serverRam - daemonRam * targetNodes.length;\\n    let ramPerDaemon = leftoverRam / targetNodes.length;\\n\\n    while (ramPerDaemon < minRamPerDaemon) {\\n        targetNodes.pop();\\n        if (!targetNodes.length) {\\n            ns.tprint(`'${ATTACK_SERVER}' - insufficient RAM: exiting`);\\n            return;\\n        }\\n\\n        if (targetNodes.length === 2 && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel('joesguns')) {\\n            targetNodes = ['joesguns'];\\n        }\\n\\n        leftoverRam = serverRam - daemonRam * targetNodes.length;\\n        ramPerDaemon = leftoverRam / targetNodes.length;\\n    }\\n\\n    //start daemons\\n    let daemonCount = 0;\\n    let daemonFile = ns.fileExists('Formulas.exe') ? 'daemon_fml.js' : 'daemon.js';\\n    targetNodes.forEach((target) => {\\n        let success = ns.exec(\\n            daemonFile,\\n            ATTACK_SERVER,\\n            1,\\n            target,\\n            ATTACK_SERVER,\\n            Math.floor(ramPerDaemon),\\n            limit || false\\n        );\\n        daemonCount += success ? 1 : 0;\\n    });\\n\\n    ns.tprint(`attack server: ${ATTACK_SERVER}`);\\n    ns.tprint(`ram/daemon: ${Math.floor(ramPerDaemon)}`);\\n    ns.tprint(`daemon count: ${daemonCount}`);\\n}\",\"filename\":\"main_hack.js\",\"url\":\"blob:file:///6b4a8a66-f638-4b35-a8f7-fb40adbd055b\",\"module\":{},\"dependencies\":[{\"filename\":\"main_hack.js\",\"url\":\"blob:file:///6b4a8a66-f638-4b35-a8f7-fb40adbd055b\"}],\"ramUsage\":5.05,\"server\":\"home\",\"moduleSequenceNumber\":269893}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///d9eeae94-7628-4b0a-a8b6-23799681c9aa\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///d9eeae94-7628-4b0a-a8b6-23799681c9aa\"}],\"ramUsage\":5.5,\"server\":\"home\",\"moduleSequenceNumber\":402950}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    let newSize = 0;\\n    let silent = false;\\n    if (ns.args.length > 0) {\\n        [newSize, silent] = ns.args;\\n    }\\n\\n    if (isNaN(newSize)) {\\n        newSize = 0;\\n        silent = true;\\n    }\\n\\n    let files = ['weaken.script', 'grow.script', 'hack.script', 'daemon.js'];\\n    let servers = ns.getPurchasedServers();\\n\\n    if (servers.length < 25) {\\n        //buy servers until max\\n        if (!newSize) {\\n            newSize = 64;\\n        }\\n\\n        let price = ns.getPurchasedServerCost(newSize);\\n\\n        let i = servers.length;\\n        while (i < 25) {\\n            ns.print('');\\n            ns.print('===');\\n            ns.print('');\\n            let newHostname = 'pserv-' + newSize + 'gb-' + i;\\n\\n            ns.print(`attempting to purchase ${newHostname} for ${ns.nFormat(price, '$0.000a')}`);\\n\\n            if (ns.getServerMoneyAvailable('home') > price) {\\n                ns.purchaseServer(newHostname, newSize);\\n                ns.print('purchased ' + newHostname);\\n                ns.tprint('purchased ' + newHostname);\\n\\n                if (!silent) {\\n                    //start scripts on new server\\n                    await ns.scp(files, 'home', newHostname);\\n                    ns.exec('main_hack.js', 'home', 1, newHostname);\\n                }\\n\\n                ++i;\\n            }\\n\\n            if (ns.getServerMoneyAvailable('home') < price) {\\n                await ns.sleep(10000);\\n            }\\n        }\\n    } else {\\n        // upgrade existing servers\\n        let i = 0;\\n        while (i < 25) {\\n            ns.print('');\\n            ns.print('===');\\n            ns.print('');\\n            let oldServerName = servers[i];\\n            let oldServerSize = ns.getServerMaxRam(oldServerName);\\n            let newServerSize = newSize;\\n\\n            if (!newServerSize) {\\n                newServerSize = 2 * oldServerSize;\\n            }\\n\\n            let price = ns.getPurchasedServerCost(newServerSize);\\n\\n            ns.print(`looking at server: ${oldServerName} - size: ${oldServerSize} -> ${newServerSize}`);\\n\\n            if (oldServerSize < newServerSize) {\\n                let newHostname = 'pserv-' + newServerSize + 'gb-' + i;\\n\\n                ns.print(`attempt upgrade: ${oldServerName} -> ${newHostname} for ${ns.nFormat(price, '$0.000a')}`);\\n\\n                if (ns.getServerMoneyAvailable('home') > price) {\\n                    ns.killall(oldServerName);\\n                    let deleted = ns.deleteServer(oldServerName);\\n\\n                    if (deleted) {\\n                        ns.purchaseServer(newHostname, newServerSize);\\n\\n                        ns.print('purchased ' + newHostname);\\n                        ns.tprint('purchased ' + newHostname);\\n\\n                        if (!silent) {\\n                            //start scripts on new server\\n                            await ns.scp(files, 'home', newHostname);\\n                            ns.exec('main_hack.js', 'home', 1, newHostname);\\n                        }\\n                    } else {\\n                        ns.print(`${oldServerName} deletion failed`);\\n                    }\\n                    ++i;\\n                }\\n            }\\n\\n            if (oldServerSize >= newServerSize) {\\n                i++;\\n            }\\n\\n            if (ns.getServerMoneyAvailable('home') < price) {\\n                await ns.sleep(20000);\\n            }\\n        }\\n    }\\n}\",\"filename\":\"refresh_servers.js\",\"url\":\"blob:file:///c174246f-8c73-4dc4-a009-9f8da75342fd\",\"module\":{},\"dependencies\":[{\"filename\":\"refresh_servers.js\",\"url\":\"blob:file:///c174246f-8c73-4dc4-a009-9f8da75342fd\"}],\"ramUsage\":11.15,\"server\":\"home\",\"moduleSequenceNumber\":93631}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getServerMoneyAvailable');\\n\\n    // We will not buy anything if there's less money than this ammount\\n    let reserveMoney = 1000;\\n    let HNT = ns.hacknet;\\n\\n    // Buy first HacknetNode if there are none\\n    if (HNT.numNodes() === 0 && ns.getServerMoneyAvailable('home') >= reserveMoney) {\\n        HNT.purchaseNode();\\n        ns.print('Purchased ' + HNT.getNodeStats(HNT.numNodes() - 1).name + ' because there was none.');\\n    }\\n\\n    // If there are no Hacknet Nodes, we can't do anything, so the script ends\\n    let numUpgrades = 1;\\n    while (HNT.numNodes() > 0) {\\n        // If there is not enough money, we wait for it instead of ending\\n        // the loop.\\n        while (ns.getServerMoneyAvailable('home') * 0.1 >= reserveMoney) {\\n            for (let i = 0; i < HNT.numNodes(); i++) {\\n                while (\\n                    HNT.getLevelUpgradeCost(i, numUpgrades) < ns.getServerMoneyAvailable('home') * 0.1 &&\\n                    HNT.upgradeLevel(i, numUpgrades)\\n                ) {\\n                    ns.print('Upgraded ' + HNT.getNodeStats(i).name + ' to level ' + HNT.getNodeStats(i).level);\\n                }\\n\\n                while (\\n                    HNT.getRamUpgradeCost(i, numUpgrades) < ns.getServerMoneyAvailable('home') * 0.1 &&\\n                    HNT.upgradeRam(i, numUpgrades)\\n                ) {\\n                    ns.print('Upgraded ' + HNT.getNodeStats(i).name + ' RAM to ' + HNT.getNodeStats(i).ram);\\n                }\\n\\n                while (\\n                    HNT.getCoreUpgradeCost(i, numUpgrades) < ns.getServerMoneyAvailable('home') * 0.1 &&\\n                    HNT.upgradeCore(i, numUpgrades)\\n                ) {\\n                    ns.print('Upgraded ' + HNT.getNodeStats(i).name + ' core to ' + HNT.getNodeStats(i).core);\\n                }\\n            }\\n\\n            // Buy next Hacknet Node if the last one is already fully\\n            // upgraded. If for some reason the last Hacknet Node is fully\\n            // upgraded and the others don't, the loop above will still\\n            // attempt to upgrade them all.\\n            if (\\n                HNT.getLevelUpgradeCost(HNT.numNodes() - 1, numUpgrades) === Infinity &&\\n                HNT.getRamUpgradeCost(HNT.numNodes() - 1, numUpgrades) === Infinity &&\\n                HNT.getCoreUpgradeCost(HNT.numNodes() - 1, numUpgrades) === Infinity &&\\n                HNT.getPurchaseNodeCost() < ns.getServerMoneyAvailable('home') * 0.1\\n            ) {\\n                HNT.purchaseNode();\\n                ns.print(\\n                    `Purchased ${\\n                        HNT.getNodeStats(HNT.numNodes() - 1).name\\n                    } because the last one couldn't be upgraded further.`\\n                );\\n            } else if (\\n                // Or buy the next Hacknet Node if the next upgrade is more\\n                // expensive than buying a new Hacknet Node.\\n                HNT.getLevelUpgradeCost(HNT.numNodes() - 1, numUpgrades) > HNT.getPurchaseNodeCost() &&\\n                HNT.getRamUpgradeCost(HNT.numNodes() - 1, numUpgrades) > HNT.getPurchaseNodeCost() &&\\n                HNT.getCoreUpgradeCost(HNT.numNodes() - 1, numUpgrades) > HNT.getPurchaseNodeCost() &&\\n                HNT.getPurchaseNodeCost() < ns.getServerMoneyAvailable('home') * 0.1\\n            ) {\\n                HNT.purchaseNode();\\n                ns.print(\\n                    `Purchased ${HNT.getNodeStats(HNT.numNodes() - 1).name} because it was cheaper than next upgrade.`\\n                );\\n            }\\n\\n            await ns.sleep(1000);\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"hacknet.js\",\"url\":\"blob:file:///7d8be283-c257-4130-96f3-0bbd397293e9\",\"module\":{},\"dependencies\":[{\"filename\":\"hacknet.js\",\"url\":\"blob:file:///7d8be283-c257-4130-96f3-0bbd397293e9\"}],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":19291}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {{\\n *  sym: string;\\n *  shares: number;\\n *  price: number;\\n *  forecast: number;\\n * }[]} Stocks\\n *\\n * @typedef {{\\n *  [sym: string]: {\\n *      profit: string;\\n *      raw: number;\\n *  }\\n * }} Tracker\\n */\\n\\n/** @type {Stocks} */\\nlet stocks = [];\\n/** @type {Stocks} */\\nlet myStocks = [];\\nlet corpus = 0;\\n\\n/** @type {Tracker} */\\nlet profitTracker = {};\\n\\nlet COMMISSION = 100000; //Buy or sell commission\\nlet numCycles = 2; //Each cycle is ~ 5 seconds\\nlet fracL = 0.2; //Fraction of assets to keep as cash in hand\\nlet fracH = 0.2;\\n\\n/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    ns.tail();\\n\\n    let TIX = ns.stock;\\n    let syms = TIX.getSymbols();\\n    syms.forEach((sym) => (profitTracker[sym] = { profit: '$0.00', raw: 0 }));\\n\\n    function __refresh__() {\\n        let newCorpus = ns.getServerMoneyAvailable('home');\\n\\n        stocks = [];\\n        myStocks = [];\\n        syms.forEach((sym) => {\\n            let [shares] = TIX.getPosition(sym);\\n            let price = TIX.getPrice(sym);\\n            let forecast = TIX.getForecast(sym);\\n            newCorpus += price * shares;\\n\\n            if (shares) {\\n                myStocks.push({ sym, shares, price, forecast });\\n            } else {\\n                stocks.push({ sym, shares, price, forecast });\\n            }\\n        });\\n\\n        stocks.sort((a, b) => b.forecast - a.forecast);\\n        corpus = newCorpus;\\n    }\\n\\n    function __format__(profit) {\\n        return ns.nFormat(profit, '($0.00a)');\\n    }\\n\\n    function __buy__(stock, numShares) {\\n        //buy\\n        let pricePer = TIX.buy(stock.sym, numShares);\\n        let price = __format__(pricePer * numShares + COMMISSION);\\n\\n        //track\\n        profitTracker[stock.sym].raw = profitTracker[stock.sym].raw - pricePer * numShares;\\n        profitTracker[stock.sym].profit = __format__(profitTracker[stock.sym].raw);\\n\\n        //log\\n        ns.print(`Bought ${pricePer ? numShares : 0} shares of ${stock.sym} for ${price}`);\\n        ns.print(`Current profit for ${stock.sym}: ${profitTracker[stock.sym].profit}`);\\n    }\\n\\n    function __sell__(stock, numShares) {\\n        //buy\\n        let profitPer = TIX.sell(stock.sym, numShares);\\n        let profit = __format__(profitPer * numShares + COMMISSION);\\n\\n        //track\\n        profitTracker[stock.sym].raw = profitTracker[stock.sym].raw + profitPer * numShares;\\n        profitTracker[stock.sym].profit = __format__(profitTracker[stock.sym].raw);\\n\\n        //log\\n        ns.print(`Sold ${profitPer ? numShares : 0} shares of ${stock.sym} for ${profit}`);\\n        ns.print(`Current profit for ${stock.sym}: ${profitTracker[stock.sym].profit}`);\\n    }\\n\\n    while (true) {\\n        __refresh__();\\n\\n        //Sell underperforming shares\\n        myStocks.forEach((stock) => {\\n            if (stock.forecast < stocks[0].forecast) {\\n                __sell__(stock, stock.shares);\\n                corpus -= COMMISSION;\\n            }\\n        });\\n\\n        //Sell shares if not enough cash in hand\\n        myStocks.forEach((stock) => {\\n            if (ns.getServerMoneyAvailable('home') < fracL * corpus) {\\n                let cashNeeded = corpus * fracH - ns.getServerMoneyAvailable('home') + COMMISSION;\\n                let numShares = Math.floor(cashNeeded / stock.price);\\n\\n                __sell__(stock, numShares);\\n                corpus -= COMMISSION;\\n            }\\n        });\\n\\n        // Buy shares with cash remaining in hand\\n        let cashToSpend = ns.getServerMoneyAvailable('home') - fracH * corpus;\\n        let numShares = Math.floor((cashToSpend - COMMISSION) / stocks[0].price);\\n        let maxShares = TIX.getMaxShares(stocks[0].sym) - stocks[0].shares;\\n\\n        numShares = Math.min(numShares, maxShares);\\n\\n        ns.print('stocks[0].price: ' + stocks[0].price);\\n        ns.print('corpus: ' + corpus);\\n        ns.print('cashToSpend: ' + cashToSpend);\\n\\n        if (numShares * stocks[0].forecast * stocks[0].price * numCycles > COMMISSION) {\\n            __buy__(stocks[0], numShares);\\n        }\\n\\n        await ns.sleep(5 * 1000 * numCycles + 200);\\n    }\\n}\",\"filename\":\"stocks.js\",\"url\":\"blob:file:///845f2096-1668-4ebc-b1a1-b5b0e655b9cd\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stocks.js\",\"url\":\"blob:file:///845f2096-1668-4ebc-b1a1-b5b0e655b9cd\"}],\"ramUsage\":17.2,\"server\":\"home\",\"moduleSequenceNumber\":214}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\n\\t//get the TOR router\\n\\twhile (!ns.purchaseTor()) {\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n\\n\\t//buy programs in this order\\n\\tlet cheapProgramList = [\\n\\t\\t'BruteSSH.exe',\\n\\t\\t'FTPCrack.exe',\\n\\t\\t'AutoLink.exe',\\n\\t\\t'DeepscanV1.exe',\\n\\t\\t'ServerProfiler.exe',\\n\\t\\t'DeepscanV2.exe',\\n\\t];\\n\\tfor (let i = 0; i < cheapProgramList.length; i++) {\\n\\t\\tlet prg = cheapProgramList[i];\\n\\t\\twhile (!ns.purchaseProgram(prg)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\t}\\n\\n\\t//buy baseline 64g servers\\n\\twhile (ns.getServerMoneyAvailable('home') < 88000000) {\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n\\tns.run('refresh_servers.js', 1, 64);\\n\\n\\t//buy programs in this order\\n\\tlet priceyProgramList = ['DeepscanV2.exe', 'relaySMTP.exe', 'HTTPWorm.exe', 'SQLInject.exe'];\\n\\tfor (let i = 0; i < priceyProgramList.length; i++) {\\n\\t\\tlet prg = priceyProgramList[i];\\n\\t\\twhile (!ns.purchaseProgram(prg)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"buy_darkweb.js\",\"url\":\"blob:file:///2a3a7ebd-7bef-459a-9cc1-554a8d433205\",\"module\":\"\",\"dependencies\":[{\"filename\":\"buy_darkweb.js\",\"url\":\"blob:file:///2a3a7ebd-7bef-459a-9cc1-554a8d433205\"}],\"ramUsage\":6.7,\"server\":\"home\",\"moduleSequenceNumber\":215}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n\\r\\n    let COMMISSION = 100000; //Buy or sell commission\\r\\n\\r\\n    if (ns.isRunning('stocks.js', 'home')) {\\r\\n        ns.kill('stocks.js', 'home');\\r\\n    }\\r\\n\\r\\n    function __format__(profit) {\\r\\n        return ns.nFormat(profit, '-$0.00a');\\r\\n    }\\r\\n\\r\\n    let TIX = ns.stock;\\r\\n    let syms = TIX.getSymbols();\\r\\n\\r\\n    syms.forEach((sym) => {\\r\\n        let [numShares] = TIX.getPosition(sym);\\r\\n        if (numShares) {\\r\\n            let profitPer = TIX.sell(sym, numShares);\\r\\n            let profit = __format__(profitPer * numShares - COMMISSION);\\r\\n            ns.tprint(`Sold ${profitPer ? numShares : 0} shares of ${sym} for profit of ${profit}`);\\r\\n        }\\r\\n    });\\r\\n}\",\"filename\":\"sell_stocks.js\",\"url\":\"blob:file:///b7ce5d78-f5ff-4211-8564-8ac8686c35bf\",\"module\":\"\",\"dependencies\":[{\"filename\":\"sell_stocks.js\",\"url\":\"blob:file:///b7ce5d78-f5ff-4211-8564-8ac8686c35bf\"}],\"ramUsage\":8.7,\"server\":\"home\",\"moduleSequenceNumber\":216}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {{\\n *  sym: string;\\n *  shares: number;\\n *  price: number;\\n *  forecast: number;\\n * }[]} Stocks\\n *\\n * @typedef {{\\n *  [sym: string]: {\\n *      profit: string;\\n *      raw: number;\\n *  }\\n * }} Tracker\\n */\\n\\n/** @type {Stocks} */\\nlet stocks = [];\\n/** @type {Stocks} */\\nlet myStocks = [];\\nlet corpus = 0;\\n\\n/** @type {Tracker} */\\nlet profitTracker = {};\\n\\n/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    const TIX = ns.stock;\\n\\n    const KEEP = 0.2;\\n    const BUY_LIMIT = 0.58;\\n    const SELL_LIMIT = 0.5;\\n    const COMMISSION = 100000;\\n\\n    //init stocks\\n    let syms = TIX.getSymbols();\\n    syms.forEach((sym) => {\\n        stocks.push({ sym });\\n        profitTracker[sym] = { profit: '$0.00', raw: 0 };\\n    });\\n\\n    function __updateStockData__() {\\n        let corpus = ns.getServerMoneyAvailable('home');\\n        myStocks.length = 0;\\n\\n        stocks.forEach((stock) => {\\n            let sym = stock.sym;\\n            stock.price = TIX.getPrice(sym);\\n            stock.shares = TIX.getPosition(sym)[0];\\n            stock.forecast = TIX.getForecast(sym);\\n\\n            corpus += stock.price * stock.shares;\\n\\n            if (stock.shares) {\\n                myStocks.push(stock);\\n            }\\n        });\\n\\n        stocks.sort((a, b) => b.forecast - a.forecast);\\n        return corpus;\\n    }\\n\\n    function __format__(profit) {\\n        return ns.nFormat(profit, '-$0.00a');\\n    }\\n\\n    function __buy__(stock, numShares) {\\n        //buy\\n        let pricePer = TIX.buy(stock.sym, numShares);\\n        let price = __format__(pricePer * numShares + COMMISSION);\\n\\n        //track\\n        profitTracker[stock.sym].raw = profitTracker[stock.sym].raw - pricePer * numShares;\\n        profitTracker[stock.sym].profit = __format__(profitTracker[stock.sym].raw);\\n\\n        //log\\n        ns.print(`Bought ${pricePer ? numShares : 0} shares of ${stock.sym} for ${price}`);\\n        ns.print(`Current profit for ${stock.sym}: ${profitTracker[stock.sym].profit}`);\\n    }\\n\\n    function __sell__(stock, numShares) {\\n        //buy\\n        let profitPer = TIX.sell(stock.sym, numShares);\\n        let profit = __format__(profitPer * numShares + COMMISSION);\\n\\n        //track\\n        profitTracker[stock.sym].raw = profitTracker[stock.sym].raw + profitPer * numShares;\\n        profitTracker[stock.sym].profit = __format__(profitTracker[stock.sym].raw);\\n\\n        //log\\n        ns.print(`Sold ${profitPer ? numShares : 0} shares of ${stock.sym} for ${profit}`);\\n        ns.print(`Current profit for ${stock.sym}: ${profitTracker[stock.sym].profit}`);\\n    }\\n\\n    while (true) {\\n        corpus = __updateStockData__();\\n\\n        // Sell bad shares\\n        myStocks.forEach((stock) => {\\n            if (stock.forecast < SELL_LIMIT) {\\n                ns.print(`${stock.sym} no longer valuable - selling.`);\\n                __sell__(stock, stock.shares);\\n            }\\n        });\\n\\n        // Don't do this. Use getStockPurchaseCost for some proportion of corpus,\\n        // then reduce it by a certain % until it's buyable.\\n\\n        let stockIndex = -1;\\n        let cashToSpend = ns.getServerMoneyAvailable('home');\\n        while (cashToSpend > 100 * COMMISSION && cashToSpend > corpus * 0.1) {\\n            stockIndex++;\\n            corpus = __updateStockData__();\\n\\n            let stockToBuy = stocks[stockIndex];\\n            if (!stockToBuy || stockToBuy.forecast < BUY_LIMIT) {\\n                // No more (good) stocks left\\n                break;\\n            }\\n\\n            let availibleShares = TIX.getMaxShares(stockToBuy.sym) - stockToBuy.shares;\\n            if (!availibleShares) {\\n                // We bought all shares of this stock\\n                continue;\\n            }\\n\\n            while (availibleShares) {\\n                let purchaseCost = TIX.getPurchaseCost(stockToBuy.sym, availibleShares, 'Long');\\n                if (purchaseCost <= cashToSpend) {\\n                    __buy__(stockToBuy, availibleShares);\\n                    cashToSpend -= purchaseCost;\\n                    break;\\n                }\\n\\n                availibleShares = Math.floor(availibleShares * 0.9);\\n            }\\n        }\\n\\n        await ns.sleep(6 * 1000);\\n    }\\n}\",\"filename\":\"stocks_V2.js\",\"url\":\"blob:file:///958ebfd2-ae0a-421b-a8d0-582309909ad1\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stocks_V2.js\",\"url\":\"blob:file:///958ebfd2-ae0a-421b-a8d0-582309909ad1\"}],\"ramUsage\":19.2,\"server\":\"home\",\"moduleSequenceNumber\":217}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///acedb584-ebe9-4631-a6ba-795e01a98cbd\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///acedb584-ebe9-4631-a6ba-795e01a98cbd\"}],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":403695}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    let roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n\\n    let nodes = {\\n        home: roots.reduce((obj, node) => {\\n            let maxMoney = ns.nFormat(ns.getServerMaxMoney(node), '$0.00a');\\n            let hackingReq = ns.getServerRequiredHackingLevel(node);\\n            let childName = `${node} - ${maxMoney} - ${hackingReq}`;\\n\\n            obj[childName] = {};\\n            return obj;\\n        }, {})\\n    };\\n\\n    roots.unshift('home');\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        ns.tprint('');\\n        ns.tprint('      rootName: ', rootNode);\\n        ns.tprint('connectedNodes: ', connectedNodes);\\n        ns.tprint('         roots: ', roots);\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let maxMoney = ns.nFormat(ns.getServerMaxMoney(childNode), '$0.00a');\\n                let hackingReq = ns.getServerRequiredHackingLevel(childNode);\\n                let childName = `${childNode} - ${maxMoney} - ${hackingReq}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n    }\\n\\n    Object.keys(nodes.home).forEach((node) => {\\n        traverseNodes(nodes.home[node], node.split(' ')[0]);\\n    });\\n    await ns.write('servers.txt', JSON.stringify(nodes), 'w');\\n    ns.tprint(nodes);\\n}\",\"filename\":\"scan_servers.js\",\"url\":\"blob:file:///0f2755a3-adce-44ef-adc9-a5ad1944133b\",\"module\":{},\"dependencies\":[{\"filename\":\"scan_servers.js\",\"url\":\"blob:file:///0f2755a3-adce-44ef-adc9-a5ad1944133b\"}],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":268554}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let purchased = ns.getPurchasedServers();\\n\\n    function __readNodes__(fPath) {\\n        let nodes = ns.read(fPath);\\n        nodes = nodes.split(',');\\n        return nodes;\\n    }\\n\\n    async function __scanAndWriteAllNodes__() {\\n        let nodes = [];\\n        let newNodes = ['home'];\\n        let newNodes2 = [];\\n        let repeat = true;\\n\\n        while (repeat) {\\n            newNodes2 = [];\\n            repeat = false;\\n\\n            let i, j;\\n            for (i = 0; i < newNodes.length; i++) {\\n                let connected = ns.scan(newNodes[i]);\\n\\n                for (j = 0; j < connected.length; j++) {\\n                    let node = connected[j];\\n                    if (!nodes.includes(node) && !newNodes.includes(node) && !newNodes2.includes(node)) {\\n                        newNodes2.push(node);\\n                        repeat = true;\\n                    }\\n                }\\n            }\\n\\n            nodes = nodes.concat(newNodes);\\n            newNodes = newNodes2;\\n        }\\n\\n        nodes = nodes.concat(purchased);\\n        await ns.write('nodes.txt', nodes, 'w');\\n    }\\n\\n    function __nukeAvailableNodes__() {\\n        let nodes = __readNodes__('nodes.txt');\\n        let myHackLevel = ns.getHackingLevel();\\n\\n        let Programs = [\\n            ns.fileExists('BruteSSH.exe'),\\n            ns.fileExists('FTPCrack.exe'),\\n            ns.fileExists('relaySMTP.exe'),\\n            ns.fileExists('HTTPWorm.exe'),\\n            ns.fileExists('SQLInject.exe')\\n        ];\\n\\n        let availPrograms = Programs.reduce((num, bool) => num + bool, 0);\\n\\n        nodes.forEach((node) => {\\n            if (\\n                !ns.hasRootAccess(node) &&\\n                ns.getServerNumPortsRequired(node) <= availPrograms &&\\n                ns.getServerRequiredHackingLevel(node) <= myHackLevel\\n            ) {\\n                Programs.forEach((exists, i) => {\\n                    if (exists) {\\n                        switch (i) {\\n                            case 0:\\n                                ns.brutessh(node);\\n                                break;\\n                            case 1:\\n                                ns.ftpcrack(node);\\n                                break;\\n                            case 2:\\n                                ns.relaysmtp(node);\\n                                break;\\n                            case 3:\\n                                ns.httpworm(node);\\n                                break;\\n                            case 4:\\n                                ns.sqlinject(node);\\n                                break;\\n                        }\\n                    }\\n                });\\n                ns.nuke(node);\\n                ns.tprint(`NUKE: ${node}`)\\n            }\\n        });\\n    }\\n\\n\\n    //read the nodes\\n    await __scanAndWriteAllNodes__();\\n    __nukeAvailableNodes__();\\n}\",\"filename\":\"nuke_servers.js\",\"url\":\"blob:file:///012b900d-d86a-42c2-a439-a61010d5cc30\",\"module\":{},\"dependencies\":[{\"filename\":\"nuke_servers.js\",\"url\":\"blob:file:///012b900d-d86a-42c2-a439-a61010d5cc30\"}],\"ramUsage\":4.75,\"server\":\"home\",\"moduleSequenceNumber\":207133}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.deleteServer('pserv-64gb-24-0')\\n}\",\"filename\":\"adhoc.js\",\"url\":\"blob:file:///b2e2c27b-8ffe-4fab-926f-a84b5074e245\",\"module\":\"\",\"dependencies\":[{\"filename\":\"adhoc.js\",\"url\":\"blob:file:///b2e2c27b-8ffe-4fab-926f-a84b5074e245\"}],\"ramUsage\":3.85,\"server\":\"home\",\"moduleSequenceNumber\":221}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// ns.disableLog('ALL')\\n\\t// ns.getServerMaxRam('home')\\n\\t// ns.enableLog('exec')\\n\\t// ns.enableLog('weaken')\\n\\t// ns.enableLog('grow')\\n\\t// ns.enableLog('hack')\\n\\t// ns.enableLog('getServerUsedRam')\\n\\t// ns.enableLog('getServerSecurityLevel')\\n\\t// ns.enableLog('getServerMoneyAvailable')\\n\\t// ns.enableLog('hackAnalyze')\\n\\t// ns.enableLog('growthAnalyze')\\n\\t// ns.getServerMaxRam('home')\\n\\n\\tns.tprint(ns.getServerMoneyAvailable('home'))\\n\\n\\tns.formulas.skills.calculateExp(1)\\n\\n\\t// while (true) {\\n\\t// \\tawait ns.sleep(100000)\\n\\t// }\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":269368}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-4096gb-0\",\"pserv-4096gb-1\",\"pserv-4096gb-2\",\"pserv-4096gb-3\",\"pserv-4096gb-4\",\"pserv-4096gb-5\",\"pserv-4096gb-6\",\"pserv-4096gb-7\",\"pserv-4096gb-8\",\"pserv-4096gb-9\",\"pserv-4096gb-10\",\"pserv-4096gb-0-0\",\"pserv-4096gb-1-0\",\"pserv-4096gb-2-0\",\"pserv-4096gb-3-0\",\"pserv-4096gb-4-0\",\"pserv-4096gb-5-0\",\"pserv-4096gb-6-0\",\"pserv-4096gb-7-0\",\"pserv-4096gb-8-0\",\"pserv-4096gb-9-0\",\"pserv-4096gb-10-0\",\"pserv-4096gb-11\",\"pserv-4096gb-12\",\"pserv-4096gb-13\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"nodes.txt\",\"text\":\"home,n00dles,foodnstuff,sigma-cosmetics,joesguns,hong-fang-tea,harakiri-sushi,iron-gym,darkweb,pserv-4096gb-0,pserv-4096gb-1,pserv-4096gb-2,pserv-4096gb-3,pserv-4096gb-4,pserv-4096gb-5,pserv-4096gb-6,pserv-4096gb-7,pserv-4096gb-8,pserv-4096gb-9,pserv-4096gb-10,pserv-4096gb-0-0,pserv-4096gb-1-0,pserv-4096gb-2-0,pserv-4096gb-3-0,pserv-4096gb-4-0,pserv-4096gb-5-0,pserv-4096gb-6-0,pserv-4096gb-7-0,pserv-4096gb-8-0,pserv-4096gb-9-0,pserv-4096gb-10-0,pserv-4096gb-11,pserv-4096gb-12,pserv-4096gb-13,nectar-net,zer0,max-hardware,CSEC,silver-helix,neo-net,phantasy,omega-net,crush-fitness,avmnite-02h,the-hub,johnson-ortho,netlink,comptek,catalyst,I.I.I.I,rothman-uni,zb-institute,syscore,summit-uni,rho-construction,alpha-ent,lexo-corp,aevum-police,millenium-fitness,global-pharm,galactic-cyber,aerocorp,snap-fitness,omnia,deltaone,unitalife,solaris,icarus,univ-energy,zeus-med,defcomm,zb-def,nova-med,infocomm,taiyang-digital,microdyne,applied-energetics,run4theh111z,titan-labs,stormtech,helios,fulcrumtech,vitalife,.,omnitek,4sigma,kuai-gong,clarkinc,b-and-a,blade,nwo,powerhouse-fitness,fulcrumassets,megacorp,ecorp,The-Cave,pserv-4096gb-0,pserv-4096gb-1,pserv-4096gb-2,pserv-4096gb-3,pserv-4096gb-4,pserv-4096gb-5,pserv-4096gb-6,pserv-4096gb-7,pserv-4096gb-8,pserv-4096gb-9,pserv-4096gb-10,pserv-4096gb-0-0,pserv-4096gb-1-0,pserv-4096gb-2-0,pserv-4096gb-3-0,pserv-4096gb-4-0,pserv-4096gb-5-0,pserv-4096gb-6-0,pserv-4096gb-7-0,pserv-4096gb-8-0,pserv-4096gb-9-0,pserv-4096gb-10-0,pserv-4096gb-11,pserv-4096gb-12,pserv-4096gb-13\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"rooted.txt\",\"text\":\"catalyst,aevum-police,netlink,summit-uni,comptek,rothman-uni,the-hub,johnson-ortho,omega-net,crush-fitness,silver-helix,phantasy,iron-gym,max-hardware,zer0,neo-net,harakiri-sushi,hong-fang-tea,nectar-net,joesguns,sigma-cosmetics,foodnstuff,n00dles\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servers.txt\",\"text\":\"{\\\"home\\\":{\\\"n00dles - $1.75m - 1\\\":{},\\\"foodnstuff - $50.00m - 1\\\":{},\\\"sigma-cosmetics - $57.50m - 5\\\":{},\\\"joesguns - $62.50m - 10\\\":{},\\\"hong-fang-tea - $75.00m - 30\\\":{\\\"nectar-net - $68.75m - 20\\\":{}},\\\"harakiri-sushi - $100.00m - 40\\\":{\\\"zer0 - $187.50m - 75\\\":{\\\"silver-helix - $1.13b - 150\\\":{\\\"crush-fitness - $1.23b - 262\\\":{\\\"catalyst - $7.86b - 420\\\":{\\\"rho-construction - $16.03b - 498\\\":{\\\"global-pharm - $39.14b - 770\\\":{}},\\\"alpha-ent - $18.12b - 561\\\":{}},\\\"I.I.I.I - $0.00 - 365\\\":{\\\"lexo-corp - $17.56b - 726\\\":{\\\"galactic-cyber - $19.33b - 859\\\":{}}}},\\\"avmnite-02h - $0.00 - 215\\\":{\\\"rothman-uni - $5.93b - 391\\\":{\\\"aevum-police - $7.24b - 405\\\":{\\\"aerocorp - $27.72b - 891\\\":{\\\"omnia - $22.59b - 898\\\":{\\\"solaris - $19.88b - 808\\\":{}},\\\"deltaone - $35.10b - 801\\\":{\\\"icarus - $24.38b - 884\\\":{},\\\"univ-energy - $28.53b - 894\\\":{},\\\"zeus-med - $35.51b - 824\\\":{\\\"zb-def - $23.01b - 803\\\":{\\\"microdyne - $15.70b - 841\\\":{\\\"stormtech - $29.89b - 929\\\":{}},\\\"applied-energetics - $24.95b - 802\\\":{\\\"helios - $18.28b - 828\\\":{\\\". - $0.00 - 515\\\":{\\\"clarkinc - $411.49b - 1150\\\":{\\\"fulcrumassets - $25.00m - 1227\\\":{}}}}}},\\\"nova-med - $29.73b - 845\\\":{\\\"run4theh111z - $0.00 - 524\\\":{}}}}},\\\"snap-fitness - $11.25b - 693\\\":{\\\"unitalife - $26.67b - 814\\\":{\\\"defcomm - $20.86b - 968\\\":{\\\"infocomm - $18.94b - 914\\\":{},\\\"taiyang-digital - $20.35b - 932\\\":{\\\"titan-labs - $19.84b - 807\\\":{\\\"fulcrumtech - $40.38b - 992\\\":{},\\\"vitalife - $17.58b - 778\\\":{\\\"omnitek - $412.09b - 1002\\\":{},\\\"4sigma - $569.03b - 1116\\\":{\\\"b-and-a - $692.85b - 909\\\":{\\\"megacorp - $1.35t - 1217\\\":{}},\\\"blade - $951.98b - 1169\\\":{\\\"ecorp - $1.10t - 1157\\\":{}}},\\\"kuai-gong - $611.36b - 1040\\\":{\\\"nwo - $515.86b - 1096\\\":{},\\\"powerhouse-fitness - $22.50b - 1093\\\":{\\\"The-Cave - $0.00 - 925\\\":{}}}}}}}}}}}}}}},\\\"iron-gym - $500.00m - 100\\\":{\\\"max-hardware - $250.00m - 80\\\":{\\\"neo-net - $125.00m - 50\\\":{\\\"the-hub - $4.05b - 316\\\":{},\\\"johnson-ortho - $2.00b - 292\\\":{}},\\\"phantasy - $600.00m - 100\\\":{\\\"netlink - $6.88b - 405\\\":{\\\"zb-institute - $22.60b - 729\\\":{},\\\"syscore - $12.69b - 612\\\":{}}}},\\\"CSEC - $0.00 - 53\\\":{\\\"omega-net - $1.54b - 204\\\":{\\\"comptek - $6.04b - 317\\\":{\\\"summit-uni - $6.09b - 431\\\":{\\\"millenium-fitness - $6.25b - 476\\\":{}}}}}},\\\"darkweb - $0.00 - 1\\\":{}}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"money_rooted.txt\",\"text\":\"7864230450 catalyst,7236809500 aevum-police,6875000000 netlink,6094964400 summit-uni,6041084875 comptek,5929140800 rothman-uni,4045563300 the-hub,2000806800 johnson-ortho,1539121675 omega-net,1227617425 crush-fitness,1125000000 silver-helix,600000000 phantasy,500000000 iron-gym,250000000 max-hardware,187500000 zer0,125000000 neo-net,100000000 harakiri-sushi,75000000 hong-fang-tea,68750000 nectar-net,62500000 joesguns,57500000 sigma-cosmetics,50000000 foodnstuff,1750000 n00dles\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"94.1.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":22074998658.5,\"moneyMax\":1103749932925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1157,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"75.1.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":27022155152.5,\"moneyMax\":1351107757625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1217,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-622135.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[2],[5,9],[2,2,8],[6,6,8,4],[2,7,6,3,8]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"91.8.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":160,\"hackDifficulty\":160,\"minDifficulty\":53,\"moneyAvailable\":13856941198,\"moneyMax\":692847059900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":909,\"serverGrowth\":71}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"48.7.6.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":188,\"hackDifficulty\":188,\"minDifficulty\":63,\"moneyAvailable\":19039696600,\"moneyMax\":951984830000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1169,\"serverGrowth\":81}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"10.4.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":10317155455,\"moneyMax\":515857772750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1096,\"serverGrowth\":73}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-410929-CarmichaelSecurity.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[41,38,12,21,9,7,12,4,47]],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"24.0.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":8229876342,\"moneyMax\":411493817100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1150,\"serverGrowth\":59}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"34.4.5.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":194,\"hackDifficulty\":194,\"minDifficulty\":65,\"moneyAvailable\":8241879882,\"moneyMax\":412093994100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1002,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-514064.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[129,123,150,161,166,154,5,28,132,112,37,195,1,123,102,175,36,65,166,25,168,181,128,21,91,137,99,153,129,175],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-117650-MegaCorp.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[23,29],[24,25],[7,15],[6,13],[5,12]],\"reward\":{\"name\":\"MegaCorp\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"72.8.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":118,\"hackDifficulty\":118,\"minDifficulty\":39,\"moneyAvailable\":11380668696.5,\"moneyMax\":569033434825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1116,\"serverGrowth\":85}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-291864-CyberSec.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[121,189,37,114,194,76,93,143,95,111,33,169,20,116,76,148,140,51,137,8],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"47.7.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":190,\"hackDifficulty\":190,\"minDifficulty\":63,\"moneyAvailable\":12227108643.5,\"moneyMax\":611355432175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1040,\"serverGrowth\":94}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"56.8.9.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":182,\"hackDifficulty\":182,\"minDifficulty\":61,\"moneyAvailable\":807673892.5,\"moneyMax\":40383694625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":992,\"serverGrowth\":97}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-573904.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[113,181,143,50,8,166,30,50,98,52,48,82,14,85,131,160,124,45,165,27,164,59,21,83,34,28,12,198,89,35,155,76,58,70,120,54,138,123,13,5,145,125,14,198],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-292249.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((()))))(a)(()aa(\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-677662.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[6,[15,188,43,7,169,77,160,37,48,28,76,197,116,168,92,150,177,6,165,55,137,101,9,177,135,151,53,33,64,164,159,75,174,63,125,62,67,96,50,162,5,166,74,139,29,12,99,77]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"72.7.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":500000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1227,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"97.8.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":158,\"hackDifficulty\":158,\"minDifficulty\":53,\"moneyAvailable\":597723140,\"moneyMax\":29886157000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":929,\"serverGrowth\":74}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-722369.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[11,9],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"52.0.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":178,\"hackDifficulty\":178,\"minDifficulty\":59,\"moneyAvailable\":417125852.5,\"moneyMax\":20856292625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":968,\"serverGrowth\":56}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"8.8.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":152,\"hackDifficulty\":152,\"minDifficulty\":51,\"moneyAvailable\":378758531.5,\"moneyMax\":18937926575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":914,\"serverGrowth\":62}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-954249-Netburners.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":735102964,\"reward\":{\"name\":\"Netburners\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-113414.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[12,3],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"11.8.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":176,\"hackDifficulty\":176,\"minDifficulty\":59,\"moneyAvailable\":365547403,\"moneyMax\":18277370150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":828,\"serverGrowth\":73}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-325578-Netburners.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[135,17,36,182,191,54,117,195,99,143,159,146,55,65,169,52,47,159,142,75,23,78,160,65,112,114,162,153,132,161,139,81,177,70,115,111,159,7,148,71,166]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"85.1.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":166,\"hackDifficulty\":166,\"minDifficulty\":55,\"moneyAvailable\":351509369.5,\"moneyMax\":17575468475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":778,\"serverGrowth\":69}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"45.9.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":190,\"hackDifficulty\":190,\"minDifficulty\":63,\"moneyAvailable\":487503516.5,\"moneyMax\":24375175825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":884,\"serverGrowth\":88}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-734857-CarmichaelSecurity.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":781679891,\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"82.7.0.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":170,\"hackDifficulty\":170,\"minDifficulty\":57,\"moneyAvailable\":570577553.5,\"moneyMax\":28528877675,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":894,\"serverGrowth\":89}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-19454-TheBlackHand.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[20,24],[18,26],[7,9],[14,15],[23,30],[9,18],[12,17],[17,26],[17,19],[17,19],[6,7],[6,7],[21,22]],\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"52.2.3.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":158,\"hackDifficulty\":158,\"minDifficulty\":53,\"moneyAvailable\":396782667.5,\"moneyMax\":19839133375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":807,\"serverGrowth\":64}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-630136-CyberSec.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[10,12],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"36.6.0.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":132,\"hackDifficulty\":132,\"minDifficulty\":44,\"moneyAvailable\":313977687.5,\"moneyMax\":15698884375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":841,\"serverGrowth\":76}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"94.7.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":154,\"hackDifficulty\":154,\"minDifficulty\":51,\"moneyAvailable\":407087650,\"moneyMax\":20354382500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":932,\"serverGrowth\":79}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-159557.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[5,4],[1,1,2],[4,7,5,8],[6,7,9,1,2],[2,6,6,6,7,4]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"30.4.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":128,\"hackDifficulty\":128,\"minDifficulty\":43,\"moneyAvailable\":386513038.5,\"moneyMax\":19325651925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":859,\"serverGrowth\":75}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-6350.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":120736477,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-848503-MegaCorp.cct\",\"type\":\"Total Ways to Sum\",\"data\":83,\"reward\":{\"name\":\"MegaCorp\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"80.0.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":162,\"hackDifficulty\":162,\"minDifficulty\":54,\"moneyAvailable\":554393338.5,\"moneyMax\":27719666925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":891,\"serverGrowth\":58}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"47.6.8.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":172,\"hackDifficulty\":172,\"minDifficulty\":57,\"moneyAvailable\":451800354.5,\"moneyMax\":22590017725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":898,\"serverGrowth\":69}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-277791.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-8,-1,-1,9,-5,-7,-7,-6,0,-6,4,8,6,-7,-1,-2,10,8,-4,-9,-1,2,4,4,9,-7,7,-7,1,3,8,9,0,4],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"77.7.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":114,\"hackDifficulty\":114,\"minDifficulty\":38,\"moneyAvailable\":460241562,\"moneyMax\":23012078100,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":803,\"serverGrowth\":68}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-463791-MegaCorp.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":927664897,\"reward\":{\"name\":\"MegaCorp\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"83.8.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":132,\"hackDifficulty\":132,\"minDifficulty\":44,\"moneyAvailable\":498973249,\"moneyMax\":24948662450,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":802,\"serverGrowth\":70}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"80.0.7.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":154,\"hackDifficulty\":154,\"minDifficulty\":51,\"moneyAvailable\":397566974.5,\"moneyMax\":19878348725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":808,\"serverGrowth\":75}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-686275.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[12,7],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-131592.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":851869028,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"9.6.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"icarus\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":160,\"hackDifficulty\":160,\"minDifficulty\":53,\"moneyAvailable\":701988494,\"moneyMax\":35099424700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":801,\"serverGrowth\":61}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-436808-CarmichaelSecurity.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":345653441,\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"43.7.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":162,\"hackDifficulty\":162,\"minDifficulty\":54,\"moneyAvailable\":782720497.5,\"moneyMax\":39136024875,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":770,\"serverGrowth\":86}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-767675.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[11,3],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-950953.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[18,27],[23,26],[10,20],[21,22]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-993089-TheBlackHand.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[6,3,9,7,-6,-4,4,7,-5,-4,3,9,-7,-6,3,2],\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-1525-CarmichaelSecurity.cct\",\"type\":\"Total Ways to Sum\",\"data\":94,\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"85.1.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":122,\"hackDifficulty\":122,\"minDifficulty\":41,\"moneyAvailable\":594534943.5,\"moneyMax\":29726747175,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":845,\"serverGrowth\":85}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-42804-CyberSec.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[93,44,56,7,104,63,78,22,49,137,21,179,108,175,125,17,89,100,131,64,60,123,134,171,69,162,34,103,77,111,64,94,117,195,111,76,103,16,145,15,138,186,80,110,175,132,180,81],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"79.0.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":150,\"hackDifficulty\":150,\"minDifficulty\":50,\"moneyAvailable\":710144020.5,\"moneyMax\":35507201025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":824,\"serverGrowth\":70}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-156413.cct\",\"type\":\"Array Jumping Game\",\"data\":[10,0,4,6,9,2,3,8,0,2,1,0],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"78.5.5.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":142,\"hackDifficulty\":142,\"minDifficulty\":47,\"moneyAvailable\":533322323,\"moneyMax\":26666116150,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":814,\"serverGrowth\":72}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"2.8.4.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":130,\"hackDifficulty\":130,\"minDifficulty\":43,\"moneyAvailable\":351108457,\"moneyMax\":17555422850,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":726,\"serverGrowth\":59}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"61.5.6.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":320520413,\"moneyMax\":16026020650,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":498,\"serverGrowth\":56}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"85.1.4.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":104,\"hackDifficulty\":104,\"minDifficulty\":35,\"moneyAvailable\":362392197.5,\"moneyMax\":18119609875,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":561,\"serverGrowth\":59}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-724562-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[2,[187,162,96,111,54,98,139,188,3,187,86,157,92,154,176,29,150,167,159,106,152,37,19,1,111,141,194,200,151,191,99,53,101,124,1,124,13,108,186,158,111,65,68,52,15,45]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"63.6.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":23.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.009999999999962,\"pid\":981067,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.009999999999962,\"pid\":981068,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"aevum-police\",26,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981350,\"ramUsage\":6.05,\"server\":\"aevum-police\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":368949}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":368950}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":368951}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"aevum-police\",\"moduleSequenceNumber\":402953}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///efddad72-4a44-4bab-8df5-9218dbeace2c\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///efddad72-4a44-4bab-8df5-9218dbeace2c\"}],\"ramUsage\":6.05,\"server\":\"aevum-police\",\"moduleSequenceNumber\":403052}}],\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":146,\"hackDifficulty\":49,\"minDifficulty\":49,\"moneyAvailable\":866465303.5558083,\"moneyMax\":7236809500,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":405,\"serverGrowth\":48}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-998015.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[117,78,64,50,42,121,112,190,153,59,199,115,23,39,74,62,5,147,140,138,112,52,127],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-397432.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[37,137,59,17,117,77,26,11,110,77,182,151,58,102,103,134,131,163,90,1,125,113,193,27],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"67.0.1.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":127.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1203.2100000001346,\"pid\":959022,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1203.2100000001346,\"pid\":959023,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":31}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":523.8099999999822,\"pid\":971441,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"rothman-uni\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981363,\"ramUsage\":6.05,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"rothman-uni\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981364,\"ramUsage\":6.05,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"rothman-uni\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981365,\"ramUsage\":6.05,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"rothman-uni\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981366,\"ramUsage\":6.05,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"rothman-uni\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981367,\"ramUsage\":6.05,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"rothman-uni\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981368,\"ramUsage\":6.05,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"rothman-uni\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981369,\"ramUsage\":6.05,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"rothman-uni\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981370,\"ramUsage\":6.05,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"rothman-uni\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981371,\"ramUsage\":6.05,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"rothman-uni\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981372,\"ramUsage\":6.05,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"rothman-uni\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981373,\"ramUsage\":6.05,\"server\":\"rothman-uni\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":268793}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":268794}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":268795}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":402961}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///d64a70d8-5431-4244-b68c-eb2614238c4b\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///d64a70d8-5431-4244-b68c-eb2614238c4b\"}],\"ramUsage\":6.05,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":403075}}],\"serversOnNetwork\":[\"avmnite-02h\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":30,\"minDifficulty\":30,\"moneyAvailable\":5929140800,\"moneyMax\":5929140800,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":391,\"serverGrowth\":39}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"65.1.8.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":142,\"hackDifficulty\":142,\"minDifficulty\":47,\"moneyAvailable\":452026298.5,\"moneyMax\":22601314925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":729,\"serverGrowth\":84}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-712076.cct\",\"type\":\"Total Ways to Sum\",\"data\":39,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-356747.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[76,171,45,48,31,20,23,62,180,159,98,146,155,79,38,86,94,164,192,86,40,187,126,120,174,144,13,16,2,61,71,83,181,34],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-805423.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[6,4],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-773214.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[5,9,41,39,22,15,24,44,30,42],[8,43,27,22,41,7,29,1,40,33],[37,34,18,16,10,25,4,20,43,6],[49,26,1,14,15,6,19,14,6,19],[31,24,30,38,29,20,49,20,9,11],[27,5,7,33,24,18,14,25,45,18],[42,6,33,47,41,6,13,3,49,9]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"98.5.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":11.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.009999999999962,\"pid\":981069,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.009999999999962,\"pid\":981070,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"summit-uni\",10,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981362,\"ramUsage\":6.05,\"server\":\"summit-uni\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":368959}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":368960}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":368961}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"summit-uni\",\"moduleSequenceNumber\":402957}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///047f7e02-6981-4b74-b020-aa9b015248ed\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///047f7e02-6981-4b74-b020-aa9b015248ed\"}],\"ramUsage\":6.05,\"server\":\"summit-uni\",\"moduleSequenceNumber\":403064}}],\"serversOnNetwork\":[\"comptek\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112,\"hackDifficulty\":44.60000000000005,\"minDifficulty\":37,\"moneyAvailable\":1700436119.351415,\"moneyMax\":6094964400,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":431,\"serverGrowth\":49}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"10.7.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":158,\"hackDifficulty\":158,\"minDifficulty\":53,\"moneyAvailable\":253770803.5,\"moneyMax\":12688540175,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":612,\"serverGrowth\":64}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-294959-CyberSec.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":111265001,\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"40.3.8.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":63.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1218.6100000001381,\"pid\":958335,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1218.6100000001381,\"pid\":958336,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"catalyst\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981345,\"ramUsage\":6.05,\"server\":\"catalyst\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"catalyst\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981346,\"ramUsage\":6.05,\"server\":\"catalyst\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"catalyst\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981347,\"ramUsage\":6.05,\"server\":\"catalyst\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"catalyst\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981348,\"ramUsage\":6.05,\"server\":\"catalyst\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"catalyst\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981349,\"ramUsage\":6.05,\"server\":\"catalyst\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":368944}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":368945}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":368946}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"catalyst\",\"moduleSequenceNumber\":402951}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ffc67603-134a-42d6-bf66-4e5e83273f49\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ffc67603-134a-42d6-bf66-4e5e83273f49\"}],\"ramUsage\":6.05,\"server\":\"catalyst\",\"moduleSequenceNumber\":403051}}],\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":130,\"hackDifficulty\":43,\"minDifficulty\":43,\"moneyAvailable\":983375158.9632024,\"moneyMax\":7864230450,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":420,\"serverGrowth\":36}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"94.2.2.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":63.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1203.2100000001346,\"pid\":959024,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1203.2100000001346,\"pid\":959025,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"the-hub\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981374,\"ramUsage\":6.05,\"server\":\"the-hub\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"the-hub\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981375,\"ramUsage\":6.05,\"server\":\"the-hub\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"the-hub\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981376,\"ramUsage\":6.05,\"server\":\"the-hub\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"the-hub\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981377,\"ramUsage\":6.05,\"server\":\"the-hub\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"the-hub\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981378,\"ramUsage\":6.05,\"server\":\"the-hub\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":207424}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":207425}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":207426}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"the-hub\",\"moduleSequenceNumber\":402963}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///faf2f13f-fcc9-4128-928f-5f0a7abb9a18\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///faf2f13f-fcc9-4128-928f-5f0a7abb9a18\"}],\"ramUsage\":6.05,\"server\":\"the-hub\",\"moduleSequenceNumber\":403080}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":24.027999999999984,\"minDifficulty\":24,\"moneyAvailable\":4036809867,\"moneyMax\":4045563300,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":316,\"serverGrowth\":52}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-796666.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[133,10,160,160,176,32,44,46,107,69,109,33,199,121,96,68,106,7,6,28,86],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"47.6.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":207414}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":207415}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":207416}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"comptek\",\"moduleSequenceNumber\":402959}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"comptek\",\"moduleSequenceNumber\":402960}}],\"serversOnNetwork\":[\"omega-net\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":120,\"hackDifficulty\":40,\"minDifficulty\":40,\"moneyAvailable\":6041084875,\"moneyMax\":6041084875,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":317,\"serverGrowth\":57}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-185993.cct\",\"type\":\"Total Ways to Sum\",\"data\":29,\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-211078.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((a()a(((a))\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"92.6.7.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":127.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1218.6100000001381,\"pid\":958337,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1218.6100000001381,\"pid\":958338,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":31}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":523.8099999999822,\"pid\":971440,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"netlink\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981351,\"ramUsage\":6.05,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"netlink\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981352,\"ramUsage\":6.05,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"netlink\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981353,\"ramUsage\":6.05,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"netlink\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981354,\"ramUsage\":6.05,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"netlink\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981355,\"ramUsage\":6.05,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"netlink\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981356,\"ramUsage\":6.05,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"netlink\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981357,\"ramUsage\":6.05,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"netlink\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981358,\"ramUsage\":6.05,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"netlink\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981359,\"ramUsage\":6.05,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"netlink\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981360,\"ramUsage\":6.05,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"netlink\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981361,\"ramUsage\":6.05,\"server\":\"netlink\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":368954}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":368955}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":368956}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"netlink\",\"moduleSequenceNumber\":402955}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///cb53684b-67d8-4977-b5d3-6cdccb9af33b\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///cb53684b-67d8-4977-b5d3-6cdccb9af33b\"}],\"ramUsage\":6.05,\"server\":\"netlink\",\"moduleSequenceNumber\":403063}}],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":142,\"hackDifficulty\":47,\"minDifficulty\":47,\"moneyAvailable\":844808887.6019952,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":405,\"serverGrowth\":64}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"10.1.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":156062}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":156063}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":156064}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":402965}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":402966}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":118,\"hackDifficulty\":39,\"minDifficulty\":39,\"moneyAvailable\":2000806800,\"moneyMax\":2000806800,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":292,\"serverGrowth\":49}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-657915.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"591413781372\",-76],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"78.8.9.1\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":222}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":223}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":224}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"n00dles\",\"moduleSequenceNumber\":402995}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"n00dles\",\"moduleSequenceNumber\":402996}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":2,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"17.8.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":11.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.209999999999965,\"pid\":981093,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.209999999999965,\"pid\":981094,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"foodnstuff\",10,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981395,\"ramUsage\":6.05,\"server\":\"foodnstuff\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":227}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":228}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":229}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///e18cd87e-8d95-4e51-998d-3e6528662921\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///e18cd87e-8d95-4e51-998d-3e6528662921\"}],\"ramUsage\":5.5,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":402993}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///cfaac2e2-6b9d-4b69-bffd-bba8868d2a4f\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///cfaac2e2-6b9d-4b69-bffd-bba8868d2a4f\"}],\"ramUsage\":6.05,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":403097}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7.004,\"minDifficulty\":7,\"moneyAvailable\":49852216.553890266,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-588673.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[88,120,121,102,17,3],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"55.3.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":11.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.209999999999965,\"pid\":981091,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.209999999999965,\"pid\":981092,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"sigma-cosmetics\",10,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981394,\"ramUsage\":6.05,\"server\":\"sigma-cosmetics\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":232}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":233}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":234}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///46d4fedb-f02d-44c4-a70c-b450dbbb6e1a\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///46d4fedb-f02d-44c4-a70c-b450dbbb6e1a\"}],\"ramUsage\":5.5,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":402991}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///b06cc6fc-68fb-443d-b63a-de93d9625fea\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///b06cc6fc-68fb-443d-b63a-de93d9625fea\"}],\"ramUsage\":6.05,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":403096}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7.015999999999998,\"minDifficulty\":7,\"moneyAvailable\":57370997.32053433,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-112152.cct\",\"type\":\"Total Ways to Sum\",\"data\":54,\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-900822.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0],[0,0,0,0,1,1,0,0],[0,0,0,0,0,1,0,1],[0,0,0,0,0,0,0,0],[0,0,0,1,0,1,0,0],[0,0,1,1,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"54.6.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":11.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.209999999999965,\"pid\":981089,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.209999999999965,\"pid\":981090,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"joesguns\",10,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981393,\"ramUsage\":6.05,\"server\":\"joesguns\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":237}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":238}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":239}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///e6e8b4c0-20bc-4f3c-87fe-4faf7236afd0\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///e6e8b4c0-20bc-4f3c-87fe-4faf7236afd0\"}],\"ramUsage\":5.5,\"server\":\"joesguns\",\"moduleSequenceNumber\":402989}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///089a3d94-8663-467a-b386-1575aa50f9e9\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///089a3d94-8663-467a-b386-1575aa50f9e9\"}],\"ramUsage\":6.05,\"server\":\"joesguns\",\"moduleSequenceNumber\":403095}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.030000000000003,\"minDifficulty\":10,\"moneyAvailable\":62393889.82577746,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"27.1.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":23.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.609999999999964,\"pid\":981079,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.609999999999964,\"pid\":981080,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"zer0\",26,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981388,\"ramUsage\":6.05,\"server\":\"zer0\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":242}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":243}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":244}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///41f67501-adb0-474d-8a22-dfec2f435eca\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///41f67501-adb0-474d-8a22-dfec2f435eca\"}],\"ramUsage\":5.5,\"server\":\"zer0\",\"moduleSequenceNumber\":402979}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///3ecfb0eb-060a-41ae-8fde-a2493de2d65a\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///3ecfb0eb-060a-41ae-8fde-a2493de2d65a\"}],\"ramUsage\":6.05,\"server\":\"zer0\",\"moduleSequenceNumber\":403090}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":17,\"minDifficulty\":17,\"moneyAvailable\":187500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"50.1.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":11.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.209999999999965,\"pid\":981087,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.209999999999965,\"pid\":981088,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"nectar-net\",10,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981392,\"ramUsage\":6.05,\"server\":\"nectar-net\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":247}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":248}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":249}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///4a9327b3-de08-4a10-a5f9-1d8a8addc012\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///4a9327b3-de08-4a10-a5f9-1d8a8addc012\"}],\"ramUsage\":5.5,\"server\":\"nectar-net\",\"moduleSequenceNumber\":402987}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///bc497a57-bb5c-49aa-b113-e780db19134a\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///bc497a57-bb5c-49aa-b113-e780db19134a\"}],\"ramUsage\":6.05,\"server\":\"nectar-net\",\"moduleSequenceNumber\":403094}}],\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":68750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-138561.cct\",\"type\":\"Total Ways to Sum\",\"data\":37,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"28.0.6.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":23.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.609999999999964,\"pid\":981081,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.609999999999964,\"pid\":981082,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"neo-net\",26,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981389,\"ramUsage\":6.05,\"server\":\"neo-net\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":252}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":253}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":254}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///76b286fb-812f-4cb2-afd5-b9265585e29e\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///76b286fb-812f-4cb2-afd5-b9265585e29e\"}],\"ramUsage\":5.5,\"server\":\"neo-net\",\"moduleSequenceNumber\":402981}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///eb94d9ca-0de3-4774-82d2-33898293158f\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///eb94d9ca-0de3-4774-82d2-33898293158f\"}],\"ramUsage\":6.05,\"server\":\"neo-net\",\"moduleSequenceNumber\":403091}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":17,\"minDifficulty\":17,\"moneyAvailable\":125000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"96.1.3.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1203.2100000001346,\"pid\":959028,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1203.2100000001346,\"pid\":959029,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"silver-helix\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981380,\"ramUsage\":6.05,\"server\":\"silver-helix\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"silver-helix\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981381,\"ramUsage\":6.05,\"server\":\"silver-helix\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"silver-helix\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981382,\"ramUsage\":6.05,\"server\":\"silver-helix\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"silver-helix\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981383,\"ramUsage\":6.05,\"server\":\"silver-helix\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"silver-helix\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981384,\"ramUsage\":6.05,\"server\":\"silver-helix\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":257}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":258}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":259}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///42d263cd-d2df-4b2d-9ada-54567e8a1929\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///42d263cd-d2df-4b2d-9ada-54567e8a1929\"}],\"ramUsage\":5.5,\"server\":\"silver-helix\",\"moduleSequenceNumber\":402971}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///5c390c52-285f-43db-ac78-32410b5e2fda\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///5c390c52-285f-43db-ac78-32410b5e2fda\"}],\"ramUsage\":6.05,\"server\":\"silver-helix\",\"moduleSequenceNumber\":403086}}],\"serversOnNetwork\":[\"zer0\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":1125000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-262516.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[10,6],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-616136-Netburners.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[12],[33],[45],[5],[3],[40],[7],[39],[9],[2],[38]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"70.0.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":11.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.409999999999965,\"pid\":981085,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.409999999999965,\"pid\":981086,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"hong-fang-tea\",10,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981391,\"ramUsage\":6.05,\"server\":\"hong-fang-tea\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":262}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":263}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":264}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///42bda810-6e30-442c-a6c4-c6755fef8337\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///42bda810-6e30-442c-a6c4-c6755fef8337\"}],\"ramUsage\":5.5,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":402985}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///2d672124-1610-4596-b433-45d178a5d9f5\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///2d672124-1610-4596-b433-45d178a5d9f5\"}],\"ramUsage\":6.05,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":403093}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":75000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-701508.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-4,-1,0,-9,2,-3,8,-6,-2,9,-1,-9,-9,9,7,1,1,3,-3,-9,9,-1,0,7,-2,2,3,-9,0,-3,-8,-9,-10,6,-4],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-551714.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,1,0],[0,0,0,0,1,1,0,0,0,0,0],[0,0,0,0,0,1,0,0,0,0,0],[1,0,0,0,1,0,0,0,0,0,0],[0,1,0,0,1,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"8.3.4.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":11.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.409999999999965,\"pid\":981083,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.409999999999965,\"pid\":981084,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"harakiri-sushi\",10,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981390,\"ramUsage\":6.05,\"server\":\"harakiri-sushi\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":267}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":268}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":269}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///50c6e86a-2519-43f2-b2d3-f49791574170\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///50c6e86a-2519-43f2-b2d3-f49791574170\"}],\"ramUsage\":5.5,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":402983}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///44fc382b-1472-47f5-acd0-e2cbf4b20f0a\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///44fc382b-1472-47f5-acd0-e2cbf4b20f0a\"}],\"ramUsage\":6.05,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":403092}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.008,\"minDifficulty\":10,\"moneyAvailable\":100000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-60794.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"1391\",38],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"28.0.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":23.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.809999999999963,\"pid\":981073,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.809999999999963,\"pid\":981074,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"phantasy\",26,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981385,\"ramUsage\":6.05,\"server\":\"phantasy\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":272}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":273}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":274}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///f3d5a2b1-2b26-4d44-95c9-ea0914db22ae\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///f3d5a2b1-2b26-4d44-95c9-ea0914db22ae\"}],\"ramUsage\":5.5,\"server\":\"phantasy\",\"moduleSequenceNumber\":402973}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///39eae66a-4ce4-4f6a-a64e-67b272b818cc\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///39eae66a-4ce4-4f6a-a64e-67b272b818cc\"}],\"ramUsage\":6.05,\"server\":\"phantasy\",\"moduleSequenceNumber\":403087}}],\"serversOnNetwork\":[\"max-hardware\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":13.046000000000015,\"minDifficulty\":13,\"moneyAvailable\":593300822,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"33.8.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":23.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.609999999999964,\"pid\":981077,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.609999999999964,\"pid\":981078,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"max-hardware\",26,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981387,\"ramUsage\":6.05,\"server\":\"max-hardware\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":277}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":278}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":279}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///d01f125b-bb0a-4f8a-a4da-dfd15b2a9e33\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///d01f125b-bb0a-4f8a-a4da-dfd15b2a9e33\"}],\"ramUsage\":5.5,\"server\":\"max-hardware\",\"moduleSequenceNumber\":402977}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///a7364156-4edd-4cf3-9072-657aff63778c\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///a7364156-4edd-4cf3-9072-657aff63778c\"}],\"ramUsage\":6.05,\"server\":\"max-hardware\",\"moduleSequenceNumber\":403089}}],\"serversOnNetwork\":[\"iron-gym\",\"neo-net\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":250000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"94.8.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":23.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.009999999999962,\"pid\":981071,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.009999999999962,\"pid\":981072,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"omega-net\",26,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981379,\"ramUsage\":6.05,\"server\":\"omega-net\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":282}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":283}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":284}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///a96f2ab9-ebbe-45ec-bac0-117c0242fd10\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///a96f2ab9-ebbe-45ec-bac0-117c0242fd10\"}],\"ramUsage\":5.5,\"server\":\"omega-net\",\"moduleSequenceNumber\":402967}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///48da3952-4572-4051-a35b-eb34fe881df8\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///48da3952-4572-4051-a35b-eb34fe881df8\"}],\"ramUsage\":6.05,\"server\":\"omega-net\",\"moduleSequenceNumber\":403081}}],\"serversOnNetwork\":[\"CSEC\",\"comptek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":23.031999999999982,\"minDifficulty\":23,\"moneyAvailable\":1531763751,\"moneyMax\":1539121675,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":204,\"serverGrowth\":33}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-732032.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((((a()()a)(()))(\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-330073.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"4305063\",4],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"74.2.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":54484}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":54485}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":54486}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":402969}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":402970}}],\"serversOnNetwork\":[\"silver-helix\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":27.112000000000016,\"minDifficulty\":27,\"moneyAvailable\":1227617425,\"moneyMax\":1227617425,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":262,\"serverGrowth\":29}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-571026.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[9,13],[22,28],[12,15],[19,20],[25,32],[4,14],[14,18],[25,29],[18,26],[17,26],[20,28],[3,13],[4,9],[21,26],[13,18],[22,30],[18,27],[14,23]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"81.9.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":23.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.609999999999964,\"pid\":981075,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.609999999999964,\"pid\":981076,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"iron-gym\",26,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981386,\"ramUsage\":6.05,\"server\":\"iron-gym\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":287}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":288}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":289}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///5ed6c042-be0b-471f-87d8-8f2046d106c4\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///5ed6c042-be0b-471f-87d8-8f2046d106c4\"}],\"ramUsage\":5.5,\"server\":\"iron-gym\",\"moduleSequenceNumber\":402975}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ce599cec-a83d-41a4-b43c-d65ec84b326f\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ce599cec-a83d-41a4-b43c-d65ec84b326f\"}],\"ramUsage\":6.05,\"server\":\"iron-gym\",\"moduleSequenceNumber\":403088}}],\"serversOnNetwork\":[\"home\",\"max-hardware\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":500000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"13.7.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":106,\"hackDifficulty\":106,\"minDifficulty\":35,\"moneyAvailable\":125000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":476,\"serverGrowth\":26}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-157967.cct\",\"type\":\"Array Jumping Game\",\"data\":[1,7,0,0,3,10,0,10,3,0,8,7,0,10,0,5,8,7,7,10],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"64.5.7.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":118,\"hackDifficulty\":118,\"minDifficulty\":39,\"moneyAvailable\":450000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1093,\"serverGrowth\":51}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-280530.cct\",\"type\":\"Array Jumping Game\",\"data\":[9,10,9,2,5,0,10,0,0,0,10,0,2,2,1,2,4,0,6,5,7,3,5,4,7],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-500954-MegaCorp.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"3121205223\",\"reward\":{\"name\":\"MegaCorp\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"67.6.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":225000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":693,\"serverGrowth\":45}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"58.8.8.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":524,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-621416-CarmichaelSecurity.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,1,1],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0],[0,0,0,0,0,0,1,0],[0,0,0,1,1,1,0,0],[0,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1],[0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0],[0,0,1,0,0,0,0,0],[0,0,0,0,1,0,0,0]],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"11.4.4.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":365,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-179303.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"23818275195\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"66.4.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":215,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-425059-NiteSec.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0],[0,0],[0,0],[0,0],[0,0]],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"78.4.7.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":515,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"0.3.4.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"iron-gym\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":53,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-421148.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[7,6],[9,1,1],[9,3,4,8],[5,4,6,6,9]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-828000.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"2242124225\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"45.7.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"5.7.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":4500,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"43.9.9.5\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-0\",\"httpPortOpen\":false,\"ip\":\"40.3.2.8\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":798.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1202.6100000001345,\"pid\":959052,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1202.6100000001345,\"pid\":959053,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":121}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1202.6100000001345,\"pid\":959054,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1202.6100000001345,\"pid\":959055,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":104}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1202.6100000001345,\"pid\":959056,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1202.6100000001345,\"pid\":959057,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":75}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1202.6100000001345,\"pid\":959058,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":552.2099999999888,\"pid\":970261,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":512.8099999999799,\"pid\":971587,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":512.8099999999799,\"pid\":971588,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":324.80999999999034,\"pid\":975202,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":324.80999999999034,\"pid\":975203,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":178.40999999999846,\"pid\":977944,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":178.40999999999846,\"pid\":977945,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":178.40999999999846,\"pid\":977946,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":146.81000000000023,\"pid\":978477,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":146.81000000000023,\"pid\":978478,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":146.81000000000023,\"pid\":978479,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":126.0100000000012,\"pid\":978763,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":93.41000000000078,\"pid\":979267,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":93.41000000000078,\"pid\":979268,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":83.21000000000063,\"pid\":979410,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.810000000000336,\"pid\":980483,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.810000000000336,\"pid\":980484,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.810000000000336,\"pid\":980485,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.41000000000018,\"pid\":980671,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.41000000000018,\"pid\":980672,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.41000000000018,\"pid\":980673,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.41000000000018,\"pid\":980674,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.009999999999966,\"pid\":981095,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.009999999999966,\"pid\":981096,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999996,\"pid\":981198,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999996,\"pid\":981199,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999996,\"pid\":981200,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999996,\"pid\":981201,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999996,\"pid\":981202,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999996,\"pid\":981203,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999996,\"pid\":981204,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999996,\"pid\":981205,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999997,\"pid\":981206,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999997,\"pid\":981207,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999997,\"pid\":981208,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999997,\"pid\":981209,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999997,\"pid\":981210,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981396,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981397,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981398,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981399,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981400,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981401,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981402,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981403,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981404,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981405,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981406,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981407,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981408,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981409,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981410,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981411,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981412,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981413,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981414,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981415,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981416,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981417,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981418,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"moduleSequenceNumber\":207361}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"moduleSequenceNumber\":207362}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-0\",\"moduleSequenceNumber\":207363}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-0\",\"moduleSequenceNumber\":402997}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///c217f560-63be-47a9-9a65-3032b33e57a6\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///c217f560-63be-47a9-9a65-3032b33e57a6\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"moduleSequenceNumber\":403120}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-1\",\"httpPortOpen\":false,\"ip\":\"66.9.2.4\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":795.1499999999992,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1201.4100000001342,\"pid\":959109,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1201.4100000001342,\"pid\":959110,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":121}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1201.4100000001342,\"pid\":959111,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1201.4100000001342,\"pid\":959112,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":104}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1201.2100000001342,\"pid\":959113,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1201.2100000001342,\"pid\":959114,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":75}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1201.2100000001342,\"pid\":959115,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":551.8099999999887,\"pid\":970274,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":512.6099999999799,\"pid\":971593,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":512.6099999999799,\"pid\":971594,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":324.40999999999036,\"pid\":975215,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":324.40999999999036,\"pid\":975216,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":178.00999999999848,\"pid\":977953,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":178.00999999999848,\"pid\":977954,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":178.00999999999848,\"pid\":977955,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":146.61000000000024,\"pid\":978481,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":146.61000000000024,\"pid\":978482,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":146.61000000000024,\"pid\":978483,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":125.8100000000012,\"pid\":978767,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":93.21000000000078,\"pid\":979271,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":93.21000000000078,\"pid\":979272,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":83.21000000000063,\"pid\":979419,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.21000000000033,\"pid\":980501,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.21000000000033,\"pid\":980502,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.21000000000033,\"pid\":980503,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000017,\"pid\":980677,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000017,\"pid\":980678,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000017,\"pid\":980679,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.61000000000017,\"pid\":980680,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.809999999999967,\"pid\":981097,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.809999999999967,\"pid\":981098,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999997,\"pid\":981211,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999997,\"pid\":981212,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999997,\"pid\":981213,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999997,\"pid\":981214,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999997,\"pid\":981215,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999997,\"pid\":981216,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999997,\"pid\":981217,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999997,\"pid\":981218,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999997,\"pid\":981219,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999997,\"pid\":981220,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999997,\"pid\":981221,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981419,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981420,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981421,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981422,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981423,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981424,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981425,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981426,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981427,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981428,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981429,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981430,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981431,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981432,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981433,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981434,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981435,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981436,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981437,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981438,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981439,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981440,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981441,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"moduleSequenceNumber\":207370}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"moduleSequenceNumber\":207371}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-1\",\"moduleSequenceNumber\":207372}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-1\",\"moduleSequenceNumber\":402999}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///0680e15a-d9bb-4d6f-a1a9-07970995bcff\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///0680e15a-d9bb-4d6f-a1a9-07970995bcff\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"moduleSequenceNumber\":403143}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-2\",\"httpPortOpen\":false,\"ip\":\"81.2.6.1\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":798.6499999999992,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1200.210000000134,\"pid\":959169,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1200.210000000134,\"pid\":959170,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":121}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1200.210000000134,\"pid\":959171,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1200.210000000134,\"pid\":959172,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":104}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1200.210000000134,\"pid\":959173,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1200.210000000134,\"pid\":959174,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":75}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1200.010000000134,\"pid\":959175,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":551.4099999999886,\"pid\":970287,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":512.4099999999798,\"pid\":971599,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":512.4099999999798,\"pid\":971600,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":324.0099999999904,\"pid\":975230,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":324.0099999999904,\"pid\":975231,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":177.6099999999985,\"pid\":977962,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":177.6099999999985,\"pid\":977963,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":177.6099999999985,\"pid\":977964,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":145.8100000000003,\"pid\":978486,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":145.8100000000003,\"pid\":978487,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":145.8100000000003,\"pid\":978488,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":125.41000000000119,\"pid\":978771,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":92.81000000000077,\"pid\":979275,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":92.81000000000077,\"pid\":979276,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":82.81000000000063,\"pid\":979428,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.81000000000032,\"pid\":980517,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.81000000000032,\"pid\":980518,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.81000000000032,\"pid\":980519,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.41000000000017,\"pid\":980684,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.41000000000017,\"pid\":980685,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.41000000000017,\"pid\":980686,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.41000000000017,\"pid\":980687,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.809999999999967,\"pid\":981101,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.809999999999967,\"pid\":981102,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.609999999999967,\"pid\":981103,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999997,\"pid\":981222,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999997,\"pid\":981223,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999997,\"pid\":981224,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999997,\"pid\":981225,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999997,\"pid\":981226,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999997,\"pid\":981227,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.609999999999998,\"pid\":981228,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.609999999999998,\"pid\":981229,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.609999999999998,\"pid\":981231,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.609999999999998,\"pid\":981232,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.609999999999998,\"pid\":981233,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.609999999999998,\"pid\":981234,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981442,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981443,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981444,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981445,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981446,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981447,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981448,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981449,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981450,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981451,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981452,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981453,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981454,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981455,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981456,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981457,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981458,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981459,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981460,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981461,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981462,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981463,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981464,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"moduleSequenceNumber\":214411}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"moduleSequenceNumber\":214412}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-2\",\"moduleSequenceNumber\":214413}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-2\",\"moduleSequenceNumber\":403001}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///565b2fb7-fc36-4193-844c-aecb5eb030ac\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///565b2fb7-fc36-4193-844c-aecb5eb030ac\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"moduleSequenceNumber\":403166}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-3\",\"httpPortOpen\":false,\"ip\":\"59.6.2.6\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":798.6499999999992,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1199.2100000001337,\"pid\":959229,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1199.2100000001337,\"pid\":959230,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":121}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1199.0100000001337,\"pid\":959231,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1199.0100000001337,\"pid\":959232,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":104}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1199.0100000001337,\"pid\":959233,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1199.0100000001337,\"pid\":959234,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":75}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1199.0100000001337,\"pid\":959235,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":551.0099999999885,\"pid\":970299,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":512.2099999999798,\"pid\":971606,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":512.2099999999798,\"pid\":971607,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":323.6099999999904,\"pid\":975236,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":323.6099999999904,\"pid\":975237,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":177.00999999999854,\"pid\":977975,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":177.00999999999854,\"pid\":977976,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":177.00999999999854,\"pid\":977977,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":145.21000000000032,\"pid\":978494,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":145.21000000000032,\"pid\":978495,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":145.21000000000032,\"pid\":978496,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":125.01000000000118,\"pid\":978775,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":82.81000000000063,\"pid\":979437,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.41000000000048,\"pid\":980316,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.41000000000048,\"pid\":980317,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.410000000000316,\"pid\":980528,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.410000000000316,\"pid\":980529,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.410000000000316,\"pid\":980530,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.01000000000016,\"pid\":980691,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.01000000000016,\"pid\":980692,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.01000000000016,\"pid\":980693,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.81000000000002,\"pid\":980866,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.81000000000002,\"pid\":980867,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.609999999999967,\"pid\":981106,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.609999999999967,\"pid\":981107,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.609999999999967,\"pid\":981108,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.609999999999967,\"pid\":981109,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.609999999999998,\"pid\":981235,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.609999999999998,\"pid\":981236,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.609999999999998,\"pid\":981237,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.609999999999998,\"pid\":981238,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.609999999999998,\"pid\":981239,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.81,\"pid\":981240,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.81,\"pid\":981241,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.81,\"pid\":981242,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981465,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981466,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981467,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981468,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981469,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981470,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981471,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981472,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981473,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981474,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981475,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981476,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981477,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981478,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981479,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981480,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981481,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981482,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981483,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981484,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981485,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981486,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981487,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":981994,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":981995,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"moduleSequenceNumber\":227953}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"moduleSequenceNumber\":227954}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-3\",\"moduleSequenceNumber\":227955}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-3\",\"moduleSequenceNumber\":403003}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///34f9e604-3599-43aa-9394-eb28ed8afdfd\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///34f9e604-3599-43aa-9394-eb28ed8afdfd\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"moduleSequenceNumber\":403189}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-4\",\"httpPortOpen\":false,\"ip\":\"63.1.5.1\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":795.1499999999992,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1197.8100000001334,\"pid\":959292,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1197.8100000001334,\"pid\":959293,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":121}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1197.6100000001334,\"pid\":959294,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1197.6100000001334,\"pid\":959295,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":104}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1197.6100000001334,\"pid\":959296,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1197.6100000001334,\"pid\":959297,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":75}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1197.6100000001334,\"pid\":959298,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":550.4099999999884,\"pid\":970311,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":511.80999999997977,\"pid\":971613,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":511.80999999997977,\"pid\":971614,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":323.2099999999904,\"pid\":975243,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":323.2099999999904,\"pid\":975244,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":176.80999999999855,\"pid\":977984,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":176.80999999999855,\"pid\":977985,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":176.80999999999855,\"pid\":977986,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":145.01000000000033,\"pid\":978500,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":145.01000000000033,\"pid\":978501,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":145.01000000000033,\"pid\":978502,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":124.61000000000118,\"pid\":978780,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":82.21000000000062,\"pid\":979447,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.41000000000048,\"pid\":980320,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.41000000000048,\"pid\":980321,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.81000000000031,\"pid\":980539,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.81000000000031,\"pid\":980540,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.81000000000031,\"pid\":980541,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.41000000000015,\"pid\":980697,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.41000000000015,\"pid\":980698,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.41000000000015,\"pid\":980699,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.21000000000015,\"pid\":980700,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.80999999999997,\"pid\":981112,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.80999999999997,\"pid\":981113,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.80999999999997,\"pid\":981114,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.81,\"pid\":981243,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.81,\"pid\":981244,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.81,\"pid\":981245,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.81,\"pid\":981246,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.81,\"pid\":981247,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000001,\"pid\":981248,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000001,\"pid\":981249,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000001,\"pid\":981250,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981488,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981489,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981490,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981491,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981492,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981493,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981494,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981495,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981496,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981497,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981498,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981499,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981500,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981501,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981502,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981503,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981504,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981505,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981506,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981507,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981508,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981509,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981510,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":981996,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":981997,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"moduleSequenceNumber\":239398}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"moduleSequenceNumber\":239399}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-4\",\"moduleSequenceNumber\":239400}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-4\",\"moduleSequenceNumber\":403005}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///bd199e6d-6db5-4747-b8c0-a880f0eb8198\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///bd199e6d-6db5-4747-b8c0-a880f0eb8198\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"moduleSequenceNumber\":403212}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-5\",\"httpPortOpen\":false,\"ip\":\"28.5.4.0\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":800.3999999999992,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1196.410000000133,\"pid\":959355,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1196.410000000133,\"pid\":959356,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":121}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1196.410000000133,\"pid\":959357,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1196.410000000133,\"pid\":959358,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":104}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1196.410000000133,\"pid\":959359,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1196.410000000133,\"pid\":959360,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":75}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1196.410000000133,\"pid\":959361,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":550.0099999999883,\"pid\":970323,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":511.6099999999798,\"pid\":971620,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":511.6099999999798,\"pid\":971621,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":323.0099999999904,\"pid\":975250,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":323.0099999999904,\"pid\":975251,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":176.60999999999856,\"pid\":977993,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":176.60999999999856,\"pid\":977994,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":176.60999999999856,\"pid\":977995,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":144.61000000000035,\"pid\":978505,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":144.61000000000035,\"pid\":978506,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":144.61000000000035,\"pid\":978507,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":124.41000000000118,\"pid\":978785,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.81000000000061,\"pid\":979457,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.21000000000048,\"pid\":980324,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.21000000000048,\"pid\":980325,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.610000000000305,\"pid\":980550,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.610000000000305,\"pid\":980551,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.610000000000305,\"pid\":980552,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.01000000000015,\"pid\":980706,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.01000000000015,\"pid\":980707,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.01000000000015,\"pid\":980708,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.010000000000005,\"pid\":980869,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.010000000000005,\"pid\":980870,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000001,\"pid\":981251,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000001,\"pid\":981252,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000001,\"pid\":981253,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000001,\"pid\":981254,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000001,\"pid\":981255,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000001,\"pid\":981256,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000001,\"pid\":981257,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000001,\"pid\":981258,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000001,\"pid\":981259,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000001,\"pid\":981261,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.410000000000002,\"pid\":981262,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.410000000000002,\"pid\":981263,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.210000000000003,\"pid\":981264,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981511,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981512,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981513,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981514,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981515,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981516,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981517,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981518,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981519,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981520,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981521,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981522,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981523,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981524,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981525,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981526,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981527,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981528,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981529,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981530,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981531,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981532,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981533,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":981998,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":981999,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"moduleSequenceNumber\":250563}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"moduleSequenceNumber\":250564}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-5\",\"moduleSequenceNumber\":250565}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-5\",\"moduleSequenceNumber\":403007}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///5bda241d-419d-48dc-83aa-9dd6acb267e9\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///5bda241d-419d-48dc-83aa-9dd6acb267e9\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"moduleSequenceNumber\":403235}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-6\",\"httpPortOpen\":false,\"ip\":\"86.1.5.1\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":798.6499999999992,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1195.0100000001328,\"pid\":959418,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1195.0100000001328,\"pid\":959419,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":121}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1195.0100000001328,\"pid\":959420,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1195.0100000001328,\"pid\":959421,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":104}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1195.0100000001328,\"pid\":959422,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1195.0100000001328,\"pid\":959423,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":75}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1194.8100000001327,\"pid\":959424,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":559.0099999999901,\"pid\":970078,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":511.4099999999798,\"pid\":971628,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":511.4099999999798,\"pid\":971629,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":322.4099999999904,\"pid\":975260,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":322.4099999999904,\"pid\":975261,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":176.2099999999986,\"pid\":978002,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":176.2099999999986,\"pid\":978003,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":176.2099999999986,\"pid\":978004,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":144.21000000000038,\"pid\":978511,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":144.21000000000038,\"pid\":978512,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":144.21000000000038,\"pid\":978513,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":123.81000000000117,\"pid\":978788,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.21000000000048,\"pid\":980333,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.21000000000048,\"pid\":980334,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.2100000000003,\"pid\":980562,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.2100000000003,\"pid\":980563,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.2100000000003,\"pid\":980564,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.810000000000144,\"pid\":980711,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.810000000000144,\"pid\":980712,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.810000000000144,\"pid\":980713,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61,\"pid\":980877,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61,\"pid\":980878,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.210000000000003,\"pid\":981265,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.210000000000003,\"pid\":981266,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.210000000000003,\"pid\":981267,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.210000000000003,\"pid\":981268,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.210000000000003,\"pid\":981269,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.210000000000003,\"pid\":981270,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.210000000000003,\"pid\":981271,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.210000000000003,\"pid\":981272,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.210000000000003,\"pid\":981273,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.210000000000003,\"pid\":981275,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.210000000000003,\"pid\":981276,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.210000000000003,\"pid\":981277,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.210000000000003,\"pid\":981278,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981534,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981535,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981536,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981537,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981538,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981539,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981540,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981541,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981542,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981543,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981544,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981545,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981546,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981547,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981548,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981549,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981550,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981551,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981552,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981553,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981554,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981555,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981556,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":982000,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":982001,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"moduleSequenceNumber\":250571}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"moduleSequenceNumber\":250572}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-6\",\"moduleSequenceNumber\":250573}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-6\",\"moduleSequenceNumber\":403009}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///8c0823d5-e37d-4aab-902c-968c57ba0fd7\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///8c0823d5-e37d-4aab-902c-968c57ba0fd7\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"moduleSequenceNumber\":403258}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-7\",\"httpPortOpen\":false,\"ip\":\"2.7.1.1\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":784.6999999999991,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1194.0100000001325,\"pid\":959534,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1194.0100000001325,\"pid\":959535,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":121}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1194.0100000001325,\"pid\":959536,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1194.0100000001325,\"pid\":959537,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":104}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1194.0100000001325,\"pid\":959538,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1194.0100000001325,\"pid\":959539,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":75}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1194.0100000001325,\"pid\":959540,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":558.6099999999901,\"pid\":970093,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":511.2099999999798,\"pid\":971636,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":511.2099999999798,\"pid\":971637,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":322.00999999999044,\"pid\":975270,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":322.00999999999044,\"pid\":975271,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":176.0099999999986,\"pid\":978008,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":176.0099999999986,\"pid\":978009,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":176.0099999999986,\"pid\":978010,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.60999999999984,\"pid\":978356,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.60999999999984,\"pid\":978357,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.60999999999984,\"pid\":978358,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.2100000000006,\"pid\":979470,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.2100000000006,\"pid\":979471,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.810000000000294,\"pid\":980574,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.810000000000294,\"pid\":980575,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.810000000000294,\"pid\":980576,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.810000000000294,\"pid\":980577,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.810000000000294,\"pid\":980578,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.810000000000294,\"pid\":980579,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.209999999999994,\"pid\":980885,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.209999999999994,\"pid\":980886,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.209999999999994,\"pid\":980887,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.209999999999994,\"pid\":980888,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.010000000000003,\"pid\":981279,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.010000000000003,\"pid\":981280,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.410000000000005,\"pid\":981281,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.410000000000005,\"pid\":981282,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.410000000000005,\"pid\":981283,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.410000000000005,\"pid\":981284,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981557,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981558,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981559,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981560,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981561,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981562,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981563,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981564,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981565,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981566,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981567,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981568,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981569,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981570,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981571,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981572,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981573,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981574,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981575,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981576,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981577,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981578,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981579,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"moduleSequenceNumber\":250579}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"moduleSequenceNumber\":250580}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-7\",\"moduleSequenceNumber\":250581}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-7\",\"moduleSequenceNumber\":403011}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///b7b34543-59fe-4b48-b03d-8086606012af\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///b7b34543-59fe-4b48-b03d-8086606012af\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"moduleSequenceNumber\":403281}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-8\",\"httpPortOpen\":false,\"ip\":\"12.1.2.8\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":782.9499999999991,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1193.8100000001325,\"pid\":959585,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1193.8100000001325,\"pid\":959586,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":121}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1193.8100000001325,\"pid\":959587,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1193.8100000001325,\"pid\":959588,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":104}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1193.8100000001325,\"pid\":959589,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1193.8100000001325,\"pid\":959590,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":75}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1193.8100000001325,\"pid\":959591,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":558.20999999999,\"pid\":970103,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":511.0099999999798,\"pid\":971647,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":511.0099999999798,\"pid\":971648,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":321.60999999999046,\"pid\":975280,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":321.60999999999046,\"pid\":975281,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":186.409999999998,\"pid\":977798,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":175.60999999999862,\"pid\":978016,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":175.60999999999862,\"pid\":978017,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":175.60999999999862,\"pid\":978018,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.20999999999987,\"pid\":978364,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.20999999999987,\"pid\":978365,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.20999999999987,\"pid\":978366,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":90.81000000000074,\"pid\":979290,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.01000000000047,\"pid\":980348,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.01000000000047,\"pid\":980349,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.41000000000029,\"pid\":980586,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.41000000000029,\"pid\":980587,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.41000000000029,\"pid\":980588,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.41000000000029,\"pid\":980589,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.41000000000029,\"pid\":980590,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.41000000000029,\"pid\":980591,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.01000000000013,\"pid\":980721,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.80999999999999,\"pid\":980895,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.80999999999999,\"pid\":980896,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999976,\"pid\":981117,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.210000000000004,\"pid\":981285,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.210000000000004,\"pid\":981286,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.210000000000004,\"pid\":981287,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981580,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981581,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981582,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981583,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981584,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981585,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981586,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981587,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981588,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981589,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981590,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981591,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981592,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981593,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981594,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981595,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981596,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981597,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981598,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981599,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981600,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981601,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981602,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"moduleSequenceNumber\":255877}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"moduleSequenceNumber\":255878}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-8\",\"moduleSequenceNumber\":255879}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-8\",\"moduleSequenceNumber\":403013}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///d6f54c4b-b031-4b33-81d8-0c334278b618\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///d6f54c4b-b031-4b33-81d8-0c334278b618\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"moduleSequenceNumber\":403304}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-9\",\"httpPortOpen\":false,\"ip\":\"33.2.2.7\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":784.6999999999991,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1193.6100000001325,\"pid\":959638,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1193.6100000001325,\"pid\":959639,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":121}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1193.6100000001325,\"pid\":959640,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1193.6100000001325,\"pid\":959641,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":104}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1193.6100000001325,\"pid\":959642,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1193.6100000001325,\"pid\":959643,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":75}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1193.6100000001325,\"pid\":959644,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":558.00999999999,\"pid\":970116,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":510.8099999999798,\"pid\":971658,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":510.8099999999798,\"pid\":971659,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":321.2099999999905,\"pid\":975289,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":321.2099999999905,\"pid\":975290,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":185.80999999999804,\"pid\":977811,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":175.20999999999864,\"pid\":978022,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":175.20999999999864,\"pid\":978023,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":175.20999999999864,\"pid\":978024,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.00999999999988,\"pid\":978373,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.00999999999988,\"pid\":978374,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.00999999999988,\"pid\":978375,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":90.21000000000073,\"pid\":979296,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":71.81000000000047,\"pid\":980357,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":71.81000000000047,\"pid\":980358,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.41000000000029,\"pid\":980595,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.41000000000029,\"pid\":980596,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.41000000000029,\"pid\":980597,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.210000000000285,\"pid\":980598,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.210000000000285,\"pid\":980599,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.210000000000285,\"pid\":980600,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.81000000000013,\"pid\":980728,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.41,\"pid\":980903,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.41,\"pid\":980904,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.41,\"pid\":980906,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.009999999999977,\"pid\":981118,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.009999999999977,\"pid\":981119,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.010000000000004,\"pid\":981288,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.010000000000004,\"pid\":981289,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981603,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981604,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981605,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981606,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981607,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981608,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981609,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981610,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981611,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981612,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981613,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981614,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981615,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981616,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981617,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981618,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981619,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981620,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981621,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981622,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981623,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981624,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981625,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"moduleSequenceNumber\":260965}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"moduleSequenceNumber\":260966}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-9\",\"moduleSequenceNumber\":260967}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-9\",\"moduleSequenceNumber\":403015}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///8c0aeac7-39e7-4d6e-be46-2eef2a2267bb\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///8c0aeac7-39e7-4d6e-be46-2eef2a2267bb\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"moduleSequenceNumber\":403327}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-10\",\"httpPortOpen\":false,\"ip\":\"33.8.3.0\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":781.1999999999991,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1193.0100000001323,\"pid\":959691,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1193.0100000001323,\"pid\":959692,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":121}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1193.0100000001323,\"pid\":959693,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1193.0100000001323,\"pid\":959694,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":104}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1193.0100000001323,\"pid\":959695,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1193.0100000001323,\"pid\":959696,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":75}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1193.0100000001323,\"pid\":959697,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":557.6099999999899,\"pid\":970129,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":510.60999999997983,\"pid\":971669,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":510.60999999997983,\"pid\":971670,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":321.0099999999905,\"pid\":975295,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":321.0099999999905,\"pid\":975296,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":174.20999999999867,\"pid\":978030,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":174.20999999999867,\"pid\":978031,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":174.20999999999867,\"pid\":978032,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":152.20999999999992,\"pid\":978379,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":152.20999999999992,\"pid\":978380,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":152.20999999999992,\"pid\":978381,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.81000000000058,\"pid\":979489,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.81000000000058,\"pid\":979490,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.81000000000058,\"pid\":979492,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.01000000000028,\"pid\":980601,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.01000000000028,\"pid\":980602,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.01000000000028,\"pid\":980603,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.61000000000013,\"pid\":980733,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.61000000000013,\"pid\":980734,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.61000000000013,\"pid\":980735,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.410000000000124,\"pid\":980736,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.00999999999999,\"pid\":980914,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.00999999999994,\"pid\":981031,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.20999999999998,\"pid\":981120,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.20999999999998,\"pid\":981121,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.610000000000004,\"pid\":981290,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.2100000000000035,\"pid\":981291,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981626,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981627,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981628,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981629,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981630,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981631,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981632,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981633,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981634,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981635,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981636,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981637,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981638,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981639,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981640,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981641,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981642,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981643,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981644,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981645,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981646,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981647,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981648,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"moduleSequenceNumber\":265782}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"moduleSequenceNumber\":265783}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-10\",\"moduleSequenceNumber\":265784}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-10\",\"moduleSequenceNumber\":403017}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///a2dcc834-61ba-47c4-b1d5-f6e3a2a15155\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///a2dcc834-61ba-47c4-b1d5-f6e3a2a15155\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"moduleSequenceNumber\":403350}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-0-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-0-0\",\"httpPortOpen\":false,\"ip\":\"0.9.3.8\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":781.1999999999991,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1218.6100000001381,\"pid\":958339,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1218.6100000001381,\"pid\":958340,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":121}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1218.6100000001381,\"pid\":958341,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1218.6100000001381,\"pid\":958342,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":104}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1218.6100000001381,\"pid\":958343,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1218.6100000001381,\"pid\":958344,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":75}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1218.6100000001381,\"pid\":958345,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":557.0099999999898,\"pid\":970141,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":510.40999999997985,\"pid\":971677,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":510.40999999997985,\"pid\":971678,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":320.8099999999905,\"pid\":975301,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":320.8099999999905,\"pid\":975302,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":174.00999999999868,\"pid\":978040,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":174.00999999999868,\"pid\":978041,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":174.00999999999868,\"pid\":978042,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":151.80999999999995,\"pid\":978388,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":151.80999999999995,\"pid\":978389,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":151.80999999999995,\"pid\":978390,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.41000000000058,\"pid\":979500,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.41000000000058,\"pid\":979501,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.21000000000058,\"pid\":979503,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.01000000000028,\"pid\":980604,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.01000000000028,\"pid\":980605,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.01000000000028,\"pid\":980606,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.21000000000012,\"pid\":980741,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.21000000000012,\"pid\":980742,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.21000000000012,\"pid\":980743,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.60999999999999,\"pid\":980921,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.209999999999944,\"pid\":981032,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.20999999999998,\"pid\":981122,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.20999999999998,\"pid\":981123,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.00999999999998,\"pid\":981124,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.2100000000000035,\"pid\":981292,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.2100000000000035,\"pid\":981293,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981649,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981650,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981651,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981652,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981653,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981654,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981655,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981656,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981657,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981658,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981659,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981660,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981661,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981662,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981663,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981664,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981665,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981666,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981667,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981668,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981669,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981670,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981671,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"moduleSequenceNumber\":368964}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"moduleSequenceNumber\":368965}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-0-0\",\"moduleSequenceNumber\":368966}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-0-0\",\"moduleSequenceNumber\":403019}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///8b47bfaa-c0bc-42f7-8e17-0c9153e1b5d3\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///8b47bfaa-c0bc-42f7-8e17-0c9153e1b5d3\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"moduleSequenceNumber\":403373}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-1-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-1-0\",\"httpPortOpen\":false,\"ip\":\"93.5.6.3\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":781.1999999999991,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1217.810000000138,\"pid\":958389,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1217.810000000138,\"pid\":958390,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":121}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1217.810000000138,\"pid\":958391,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1217.810000000138,\"pid\":958392,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":104}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1217.810000000138,\"pid\":958393,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1217.810000000138,\"pid\":958394,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":75}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1217.810000000138,\"pid\":958395,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":556.6099999999898,\"pid\":970154,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":510.20999999997986,\"pid\":971685,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":510.20999999997986,\"pid\":971686,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":320.6099999999905,\"pid\":975306,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":320.6099999999905,\"pid\":975307,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":173.6099999999987,\"pid\":978051,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":173.6099999999987,\"pid\":978052,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":173.6099999999987,\"pid\":978053,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":151.40999999999997,\"pid\":978397,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":151.40999999999997,\"pid\":978398,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":151.40999999999997,\"pid\":978399,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.01000000000057,\"pid\":979512,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.01000000000057,\"pid\":979513,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.01000000000057,\"pid\":979515,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.81000000000028,\"pid\":980607,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.81000000000028,\"pid\":980608,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.81000000000028,\"pid\":980609,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.21000000000012,\"pid\":980746,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.21000000000012,\"pid\":980747,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.21000000000012,\"pid\":980748,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.209999999999944,\"pid\":981033,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.00999999999998,\"pid\":981125,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.00999999999998,\"pid\":981126,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.00999999999998,\"pid\":981127,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981294,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981672,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981673,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981674,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981675,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981676,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981677,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981678,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981679,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981680,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981681,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981682,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981683,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981684,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981685,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981686,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981687,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981688,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981689,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981690,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981691,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981692,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981693,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981694,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":982002,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":982003,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"moduleSequenceNumber\":368969}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"moduleSequenceNumber\":368970}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-1-0\",\"moduleSequenceNumber\":368971}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-1-0\",\"moduleSequenceNumber\":403021}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///9db454eb-144d-4eac-b42a-1cd9800b1fd6\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///9db454eb-144d-4eac-b42a-1cd9800b1fd6\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"moduleSequenceNumber\":403396}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-2-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-2-0\",\"httpPortOpen\":false,\"ip\":\"11.1.1.2\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":788.1499999999992,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1216.8100000001377,\"pid\":958436,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1216.8100000001377,\"pid\":958437,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":121}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1216.8100000001377,\"pid\":958438,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1216.8100000001377,\"pid\":958439,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":104}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1216.8100000001377,\"pid\":958440,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1216.8100000001377,\"pid\":958441,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":75}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1215.8100000001375,\"pid\":958442,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":556.2099999999897,\"pid\":970167,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":510.00999999997987,\"pid\":971693,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":510.00999999997987,\"pid\":971694,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.00999999999,\"pid\":975091,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.00999999999,\"pid\":975092,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":173.20999999999873,\"pid\":978060,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":173.20999999999873,\"pid\":978061,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":173.20999999999873,\"pid\":978062,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":151.20999999999998,\"pid\":978406,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":151.20999999999998,\"pid\":978407,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":151.20999999999998,\"pid\":978408,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.41000000000057,\"pid\":979520,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.41000000000057,\"pid\":979521,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.21000000000056,\"pid\":979523,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.81000000000028,\"pid\":980610,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.81000000000028,\"pid\":980611,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.81000000000028,\"pid\":980612,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.01000000000012,\"pid\":980752,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.01000000000012,\"pid\":980753,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.01000000000012,\"pid\":980754,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.01000000000012,\"pid\":980755,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.20999999999999,\"pid\":980932,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.009999999999945,\"pid\":981034,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.00999999999998,\"pid\":981128,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.00999999999998,\"pid\":981129,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981695,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981696,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981697,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981698,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981699,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981700,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981701,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981702,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981703,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981704,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981705,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981706,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981707,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981708,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981709,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981710,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981711,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981712,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981713,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981714,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981715,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981716,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981717,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":982004,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":982005,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":982006,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":982007,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":982008,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":982009,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"moduleSequenceNumber\":368974}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"moduleSequenceNumber\":368975}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-2-0\",\"moduleSequenceNumber\":368976}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-2-0\",\"moduleSequenceNumber\":403023}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///9cc81ead-1319-4510-bec6-be2b3df2cb1c\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///9cc81ead-1319-4510-bec6-be2b3df2cb1c\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"moduleSequenceNumber\":403419}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-3-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-3-0\",\"httpPortOpen\":false,\"ip\":\"11.2.4.6\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":786.3999999999992,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1215.8100000001375,\"pid\":958486,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1215.8100000001375,\"pid\":958487,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":121}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1215.8100000001375,\"pid\":958488,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1215.8100000001375,\"pid\":958489,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":104}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1215.8100000001375,\"pid\":958490,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1215.8100000001375,\"pid\":958491,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":75}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1214.6100000001372,\"pid\":958492,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.8099999999896,\"pid\":970177,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":509.8099999999799,\"pid\":971699,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":509.8099999999799,\"pid\":971700,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":330.60999999999,\"pid\":975098,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":330.60999999999,\"pid\":975099,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":172.80999999999875,\"pid\":978070,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":172.80999999999875,\"pid\":978071,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":172.80999999999875,\"pid\":978072,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":151.01,\"pid\":978415,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":151.01,\"pid\":978416,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":151.01,\"pid\":978417,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,0,1]},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6.72,\"onlineMoneyMade\":0,\"onlineRunningTime\":88.2100000000007,\"pid\":979315,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.21000000000056,\"pid\":979531,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.21000000000056,\"pid\":979532,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.81000000000028,\"pid\":980613,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.81000000000028,\"pid\":980614,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.81000000000028,\"pid\":980615,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.810000000000116,\"pid\":980760,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.810000000000116,\"pid\":980761,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.810000000000116,\"pid\":980762,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.41000000000011,\"pid\":980763,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.009999999999984,\"pid\":980939,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.009999999999945,\"pid\":981035,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.809999999999981,\"pid\":981130,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.809999999999981,\"pid\":981131,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981718,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981719,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981720,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981721,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981722,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981723,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981724,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981725,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981726,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981727,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981728,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981729,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981730,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981731,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981732,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981733,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981734,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981735,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981736,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981737,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981738,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981739,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981740,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":982010,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":982011,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":982012,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":982013,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":982014,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"moduleSequenceNumber\":368979}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"moduleSequenceNumber\":368980}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-3-0\",\"moduleSequenceNumber\":368981}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-3-0\",\"moduleSequenceNumber\":403025}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///6b3e1119-669b-4168-8f70-32c51f32fa7d\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///6b3e1119-669b-4168-8f70-32c51f32fa7d\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"moduleSequenceNumber\":403442}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-4-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-4-0\",\"httpPortOpen\":false,\"ip\":\"35.6.3.7\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":786.3999999999992,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1213.610000000137,\"pid\":958545,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1213.610000000137,\"pid\":958546,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":121}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1213.610000000137,\"pid\":958547,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1213.610000000137,\"pid\":958548,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":104}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1213.610000000137,\"pid\":958549,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1213.610000000137,\"pid\":958550,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":75}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1213.610000000137,\"pid\":958551,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.6099999999896,\"pid\":970189,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":509.6099999999799,\"pid\":971704,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":509.6099999999799,\"pid\":971705,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":330.40999999999,\"pid\":975103,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":330.40999999999,\"pid\":975104,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":172.60999999999876,\"pid\":978076,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":172.60999999999876,\"pid\":978077,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":172.60999999999876,\"pid\":978078,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":150.61,\"pid\":978424,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":150.61,\"pid\":978425,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":150.61,\"pid\":978426,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87.8100000000007,\"pid\":979324,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.81000000000056,\"pid\":979540,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.81000000000056,\"pid\":979541,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.61000000000028,\"pid\":980618,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.61000000000028,\"pid\":980619,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.61000000000028,\"pid\":980620,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.8100000000001,\"pid\":980770,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.8100000000001,\"pid\":980771,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.8100000000001,\"pid\":980772,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.6100000000001,\"pid\":980773,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.409999999999975,\"pid\":980942,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.409999999999947,\"pid\":981038,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.209999999999983,\"pid\":981132,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.209999999999983,\"pid\":981133,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981741,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981742,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981743,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981744,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981745,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981746,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981747,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981748,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981749,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981750,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981751,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981752,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981753,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981754,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981755,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981756,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981757,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981758,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981759,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981760,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981761,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981762,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981763,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":982015,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":982016,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":982017,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":982018,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":982019,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"moduleSequenceNumber\":368984}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"moduleSequenceNumber\":368985}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-4-0\",\"moduleSequenceNumber\":368986}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-4-0\",\"moduleSequenceNumber\":403027}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f8254b9d-41e6-491e-833b-83932cbfc450\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f8254b9d-41e6-491e-833b-83932cbfc450\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"moduleSequenceNumber\":403465}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-5-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-5-0\",\"httpPortOpen\":false,\"ip\":\"78.2.2.9\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":789.8999999999992,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1212.6100000001368,\"pid\":958605,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1212.6100000001368,\"pid\":958606,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":121}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1212.6100000001368,\"pid\":958607,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1212.6100000001368,\"pid\":958608,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":104}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1212.6100000001368,\"pid\":958609,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1212.6100000001368,\"pid\":958610,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":75}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1212.6100000001368,\"pid\":958611,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999895,\"pid\":970198,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":509.6099999999799,\"pid\":971707,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":509.6099999999799,\"pid\":971708,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":330.20999999999003,\"pid\":975111,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":330.20999999999003,\"pid\":975112,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":172.2099999999988,\"pid\":978082,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":172.2099999999988,\"pid\":978083,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":172.2099999999988,\"pid\":978084,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":150.41000000000003,\"pid\":978433,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":150.41000000000003,\"pid\":978434,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":150.41000000000003,\"pid\":978435,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87.4100000000007,\"pid\":979333,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87.4100000000007,\"pid\":979334,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.21000000000055,\"pid\":979549,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.410000000000274,\"pid\":980623,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.410000000000274,\"pid\":980624,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.410000000000274,\"pid\":980625,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.410000000000096,\"pid\":980780,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.410000000000096,\"pid\":980781,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.410000000000096,\"pid\":980782,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.410000000000096,\"pid\":980783,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.20999999999997,\"pid\":980945,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.209999999999948,\"pid\":981041,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.009999999999984,\"pid\":981134,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.009999999999984,\"pid\":981135,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981764,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981765,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981766,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981767,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981768,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981769,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981770,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981771,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981772,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981773,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981774,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981775,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981776,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981777,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981778,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981779,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981780,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981781,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981782,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981783,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981784,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981785,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981786,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":982020,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":982021,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":982022,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":982023,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":982024,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":982025,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":982026,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"moduleSequenceNumber\":368989}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"moduleSequenceNumber\":368990}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-5-0\",\"moduleSequenceNumber\":368991}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-5-0\",\"moduleSequenceNumber\":403029}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///6fa84156-5f3f-4085-96dc-c9ea623ab453\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///6fa84156-5f3f-4085-96dc-c9ea623ab453\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"moduleSequenceNumber\":403488}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-6-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-6-0\",\"httpPortOpen\":false,\"ip\":\"26.2.8.9\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":786.3999999999992,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1209.610000000136,\"pid\":958722,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1209.610000000136,\"pid\":958723,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":121}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1209.610000000136,\"pid\":958724,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1209.610000000136,\"pid\":958725,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":104}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1209.610000000136,\"pid\":958726,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1209.610000000136,\"pid\":958727,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":75}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1209.610000000136,\"pid\":958728,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":554.8099999999894,\"pid\":970204,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":509.4099999999799,\"pid\":971713,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":509.4099999999799,\"pid\":971714,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":329.60999999999,\"pid\":975119,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":329.60999999999,\"pid\":975120,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":171.8099999999988,\"pid\":978094,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":171.8099999999988,\"pid\":978095,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":171.8099999999988,\"pid\":978096,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":149.81000000000006,\"pid\":978440,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":149.81000000000006,\"pid\":978441,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":149.81000000000006,\"pid\":978442,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87.01000000000069,\"pid\":979340,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87.01000000000069,\"pid\":979341,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":76.81000000000054,\"pid\":979558,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.410000000000274,\"pid\":980626,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.410000000000274,\"pid\":980627,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.410000000000274,\"pid\":980628,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.21000000000009,\"pid\":980790,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.21000000000009,\"pid\":980791,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.21000000000009,\"pid\":980792,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.00999999999997,\"pid\":980949,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.00999999999995,\"pid\":981042,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.809999999999985,\"pid\":981138,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.609999999999985,\"pid\":981139,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.609999999999985,\"pid\":981140,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.609999999999985,\"pid\":981142,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.609999999999985,\"pid\":981143,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981787,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981788,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981789,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981790,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981791,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981792,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981793,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981794,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981795,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981796,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981797,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981798,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981799,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981800,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981801,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981802,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981803,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981804,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981805,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981806,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981807,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981808,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981809,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":982027,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":982028,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":982029,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"moduleSequenceNumber\":368994}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"moduleSequenceNumber\":368995}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-6-0\",\"moduleSequenceNumber\":368996}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-6-0\",\"moduleSequenceNumber\":403031}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///1887df61-174d-4fbc-bc69-4494f8351336\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///1887df61-174d-4fbc-bc69-4494f8351336\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"moduleSequenceNumber\":403511}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-7-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-7-0\",\"httpPortOpen\":false,\"ip\":\"4.8.9.6\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":791.6499999999992,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1208.4100000001358,\"pid\":958782,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1208.4100000001358,\"pid\":958783,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":121}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1208.2100000001358,\"pid\":958784,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1208.2100000001358,\"pid\":958785,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":104}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1208.2100000001358,\"pid\":958786,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1208.2100000001358,\"pid\":958787,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":75}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1208.2100000001358,\"pid\":958788,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":554.6099999999893,\"pid\":970210,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":509.2099999999799,\"pid\":971716,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":509.2099999999799,\"pid\":971717,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":329.20999999999003,\"pid\":975127,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":329.20999999999003,\"pid\":975128,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":181.60999999999828,\"pid\":977893,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":181.60999999999828,\"pid\":977894,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":181.60999999999828,\"pid\":977895,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":149.61000000000007,\"pid\":978447,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":149.61000000000007,\"pid\":978448,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":149.61000000000007,\"pid\":978449,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.41000000000092,\"pid\":979040,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.21000000000068,\"pid\":979348,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.21000000000068,\"pid\":979349,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":76.21000000000053,\"pid\":979568,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.21000000000027,\"pid\":980631,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.21000000000027,\"pid\":980632,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.21000000000027,\"pid\":980633,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.01000000000009,\"pid\":980797,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.01000000000009,\"pid\":980798,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.01000000000009,\"pid\":980799,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.01000000000009,\"pid\":980800,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.609999999999964,\"pid\":980952,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.60999999999995,\"pid\":981044,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999986,\"pid\":981146,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999986,\"pid\":981147,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999986,\"pid\":981149,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999986,\"pid\":981150,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999986,\"pid\":981152,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999986,\"pid\":981153,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981810,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981811,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981812,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981813,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981814,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981815,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981816,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981817,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981818,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981819,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981820,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981821,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981822,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981823,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981824,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981825,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981826,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981827,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981828,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981829,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981830,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981831,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981832,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":982030,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":982031,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":982032,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"moduleSequenceNumber\":368999}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"moduleSequenceNumber\":369000}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-7-0\",\"moduleSequenceNumber\":369001}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-7-0\",\"moduleSequenceNumber\":403033}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///3ed5db44-bbeb-4edd-977f-0b081f1e5e29\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///3ed5db44-bbeb-4edd-977f-0b081f1e5e29\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"moduleSequenceNumber\":403534}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-8-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-8-0\",\"httpPortOpen\":false,\"ip\":\"40.5.6.4\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":793.3999999999992,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1207.2100000001356,\"pid\":958842,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1207.2100000001356,\"pid\":958843,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":121}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1207.0100000001355,\"pid\":958844,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1207.0100000001355,\"pid\":958845,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":104}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1207.0100000001355,\"pid\":958846,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1207.0100000001355,\"pid\":958847,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":75}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1207.0100000001355,\"pid\":958848,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":554.4099999999893,\"pid\":970217,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":509.2099999999799,\"pid\":971721,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":509.2099999999799,\"pid\":971722,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":329.00999999999004,\"pid\":975135,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":329.00999999999004,\"pid\":975136,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":181.4099999999983,\"pid\":977898,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":181.4099999999983,\"pid\":977899,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":181.4099999999983,\"pid\":977900,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":149.41000000000008,\"pid\":978451,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":149.41000000000008,\"pid\":978452,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":149.41000000000008,\"pid\":978453,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.01000000000091,\"pid\":979052,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.21000000000068,\"pid\":979355,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.21000000000068,\"pid\":979356,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":76.01000000000053,\"pid\":979579,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.21000000000027,\"pid\":980634,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.21000000000027,\"pid\":980635,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.21000000000027,\"pid\":980636,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.610000000000085,\"pid\":980808,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.610000000000085,\"pid\":980809,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.610000000000085,\"pid\":980810,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.610000000000085,\"pid\":980811,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.609999999999964,\"pid\":980955,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.40999999999995,\"pid\":981045,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.40999999999995,\"pid\":981046,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.209999999999987,\"pid\":981156,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.209999999999987,\"pid\":981157,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.209999999999987,\"pid\":981159,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.209999999999987,\"pid\":981160,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.009999999999987,\"pid\":981161,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.009999999999987,\"pid\":981162,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981833,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981834,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981835,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981836,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981837,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981838,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981839,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981840,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981841,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981842,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981843,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981844,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981845,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981846,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981847,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981848,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981849,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981850,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981851,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981852,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981853,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981854,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981855,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":982033,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":982034,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":982035,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"moduleSequenceNumber\":369004}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"moduleSequenceNumber\":369005}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-8-0\",\"moduleSequenceNumber\":369006}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-8-0\",\"moduleSequenceNumber\":403035}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///3d05eb43-3efc-4211-b7f3-b1719715eed4\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///3d05eb43-3efc-4211-b7f3-b1719715eed4\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"moduleSequenceNumber\":403557}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-9-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-9-0\",\"httpPortOpen\":false,\"ip\":\"14.3.5.1\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":793.3999999999992,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1205.8100000001352,\"pid\":958899,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1205.8100000001352,\"pid\":958900,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":121}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1205.8100000001352,\"pid\":958901,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1205.8100000001352,\"pid\":958902,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":104}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1205.6100000001352,\"pid\":958903,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1205.6100000001352,\"pid\":958904,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":75}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1205.6100000001352,\"pid\":958905,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":554.0099999999892,\"pid\":970224,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":509.0099999999799,\"pid\":971726,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":509.0099999999799,\"pid\":971727,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.4099999999901,\"pid\":975143,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.4099999999901,\"pid\":975144,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":181.2099999999983,\"pid\":977905,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":181.2099999999983,\"pid\":977906,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":181.2099999999983,\"pid\":977907,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":149.2100000000001,\"pid\":978456,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":149.2100000000001,\"pid\":978457,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":149.2100000000001,\"pid\":978458,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":106.61000000000091,\"pid\":979062,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.01000000000067,\"pid\":979362,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.01000000000067,\"pid\":979363,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":76.01000000000053,\"pid\":979588,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.01000000000027,\"pid\":980638,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.01000000000027,\"pid\":980639,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.01000000000027,\"pid\":980640,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.41000000000008,\"pid\":980817,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.41000000000008,\"pid\":980818,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.41000000000008,\"pid\":980819,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.41000000000008,\"pid\":980820,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.009999999999955,\"pid\":980958,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.009999999999952,\"pid\":981048,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.809999999999953,\"pid\":981049,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.809999999999988,\"pid\":981164,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.809999999999988,\"pid\":981165,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.809999999999988,\"pid\":981167,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.809999999999988,\"pid\":981168,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.609999999999987,\"pid\":981169,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.609999999999987,\"pid\":981170,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981856,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981857,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981858,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981859,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981860,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981861,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981862,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981863,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981864,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981865,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981866,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981867,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981868,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981869,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981870,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981871,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981872,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981873,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981874,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981875,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981876,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981877,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981878,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":982036,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":982037,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":982038,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"moduleSequenceNumber\":369009}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"moduleSequenceNumber\":369010}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-9-0\",\"moduleSequenceNumber\":369011}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-9-0\",\"moduleSequenceNumber\":403037}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///a8faf67d-4ec5-4a08-9cca-245720cac530\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///a8faf67d-4ec5-4a08-9cca-245720cac530\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"moduleSequenceNumber\":403580}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-10-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-10-0\",\"httpPortOpen\":false,\"ip\":\"14.2.5.9\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":791.6499999999992,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1204.610000000135,\"pid\":958959,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1204.610000000135,\"pid\":958960,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":121}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1204.410000000135,\"pid\":958961,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1204.410000000135,\"pid\":958962,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":104}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1204.410000000135,\"pid\":958963,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1204.410000000135,\"pid\":958964,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":75}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1204.410000000135,\"pid\":958965,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":553.8099999999891,\"pid\":970231,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":508.80999999997994,\"pid\":971731,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":508.80999999997994,\"pid\":971732,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.0099999999901,\"pid\":975153,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.0099999999901,\"pid\":975154,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":181.0099999999983,\"pid\":977912,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":181.0099999999983,\"pid\":977913,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":181.0099999999983,\"pid\":977914,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":148.81000000000012,\"pid\":978461,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":148.81000000000012,\"pid\":978462,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":148.81000000000012,\"pid\":978463,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":106.2100000000009,\"pid\":979073,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":85.61000000000067,\"pid\":979372,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":85.61000000000067,\"pid\":979373,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":75.61000000000053,\"pid\":979596,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.810000000000265,\"pid\":980645,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.810000000000265,\"pid\":980646,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.810000000000265,\"pid\":980647,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.21000000000008,\"pid\":980825,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.21000000000008,\"pid\":980826,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.21000000000008,\"pid\":980827,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.21000000000008,\"pid\":980828,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.21000000000008,\"pid\":980829,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.010000000000076,\"pid\":980831,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.80999999999995,\"pid\":980964,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.609999999999953,\"pid\":981051,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.609999999999987,\"pid\":981172,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.609999999999987,\"pid\":981173,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.409999999999986,\"pid\":981174,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.409999999999986,\"pid\":981175,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981879,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981880,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981881,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981882,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981883,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981884,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981885,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981886,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981887,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981888,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981889,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981890,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981891,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981892,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981893,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981894,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981895,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981896,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981897,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981898,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981899,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981900,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981901,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":982039,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":982040,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":982041,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"moduleSequenceNumber\":369014}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"moduleSequenceNumber\":369015}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-10-0\",\"moduleSequenceNumber\":369016}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-10-0\",\"moduleSequenceNumber\":403039}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///5c7aaa7b-4093-4203-973d-c2d5ddf2475d\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///5c7aaa7b-4093-4203-973d-c2d5ddf2475d\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"moduleSequenceNumber\":403603}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-11\",\"httpPortOpen\":false,\"ip\":\"27.2.3.7\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":789.8999999999992,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1219.8100000001384,\"pid\":958276,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1219.8100000001384,\"pid\":958277,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":121}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1219.8100000001384,\"pid\":958278,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1219.8100000001384,\"pid\":958279,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":104}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1219.8100000001384,\"pid\":958280,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1219.8100000001384,\"pid\":958281,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":75}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1219.8100000001384,\"pid\":958282,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":553.409999999989,\"pid\":970238,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":508.60999999997995,\"pid\":971736,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":508.60999999997995,\"pid\":971737,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":327.6099999999901,\"pid\":975166,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":327.6099999999901,\"pid\":975167,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":180.80999999999833,\"pid\":977917,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":180.80999999999833,\"pid\":977918,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":180.80999999999833,\"pid\":977919,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":148.61000000000013,\"pid\":978464,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":148.61000000000013,\"pid\":978465,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":148.61000000000013,\"pid\":978466,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":127.81000000000122,\"pid\":978731,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":94.8100000000008,\"pid\":979231,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":94.8100000000008,\"pid\":979232,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.61000000000065,\"pid\":979378,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.810000000000265,\"pid\":980649,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.810000000000265,\"pid\":980650,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.810000000000265,\"pid\":980651,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000007,\"pid\":980837,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000007,\"pid\":980838,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000007,\"pid\":980839,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.60999999999995,\"pid\":980967,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.60999999999995,\"pid\":980968,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.60999999999995,\"pid\":980969,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.409999999999954,\"pid\":981053,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.209999999999987,\"pid\":981177,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.209999999999987,\"pid\":981178,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.209999999999987,\"pid\":981180,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.209999999999987,\"pid\":981181,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981902,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981903,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981904,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981905,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981906,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981907,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981908,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981909,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981910,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981911,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981912,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981913,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981914,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981915,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981916,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981917,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981918,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981919,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981920,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981921,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981922,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981923,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981924,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":982042,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":982043,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":982044,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-11\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"moduleSequenceNumber\":368844}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"moduleSequenceNumber\":368845}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-11\",\"moduleSequenceNumber\":368846}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-11\",\"moduleSequenceNumber\":403041}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///fb3a7065-f4e0-4c98-9d70-1bb3d1e5a02e\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///fb3a7065-f4e0-4c98-9d70-1bb3d1e5a02e\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"moduleSequenceNumber\":403626}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-12\",\"httpPortOpen\":false,\"ip\":\"88.6.2.8\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":789.8999999999992,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1211.6100000001366,\"pid\":958661,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1211.6100000001366,\"pid\":958662,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":121}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1211.6100000001366,\"pid\":958663,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1211.6100000001366,\"pid\":958664,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":104}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1211.6100000001366,\"pid\":958665,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1211.6100000001366,\"pid\":958666,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":75}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1211.6100000001366,\"pid\":958667,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":553.209999999989,\"pid\":970247,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":508.40999999997996,\"pid\":971744,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":508.40999999997996,\"pid\":971745,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":327.40999999999013,\"pid\":975173,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":327.40999999999013,\"pid\":975174,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":180.40999999999835,\"pid\":977928,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":180.40999999999835,\"pid\":977929,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":180.40999999999835,\"pid\":977930,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":148.21000000000015,\"pid\":978469,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":148.21000000000015,\"pid\":978470,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":148.21000000000015,\"pid\":978471,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":127.41000000000122,\"pid\":978735,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":94.41000000000079,\"pid\":979239,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":94.41000000000079,\"pid\":979240,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.41000000000051,\"pid\":979605,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.41000000000026,\"pid\":980655,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.41000000000026,\"pid\":980656,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.41000000000026,\"pid\":980657,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000007,\"pid\":980845,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000007,\"pid\":980846,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000007,\"pid\":980847,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000007,\"pid\":980848,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.209999999999944,\"pid\":980974,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.209999999999944,\"pid\":980975,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.009999999999955,\"pid\":981056,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.009999999999987,\"pid\":981182,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.009999999999987,\"pid\":981183,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.009999999999987,\"pid\":981184,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.009999999999987,\"pid\":981185,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981925,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981926,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981927,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981928,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981929,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981930,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981931,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981932,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981933,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981934,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981935,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981936,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981937,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981938,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981939,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981940,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981941,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981942,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981943,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981944,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981945,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981946,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981947,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":982045,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":982046,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":982047,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-12\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"moduleSequenceNumber\":372661}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"moduleSequenceNumber\":372662}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-12\",\"moduleSequenceNumber\":372663}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-12\",\"moduleSequenceNumber\":403043}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///e32199ab-8765-4563-8806-0ed0074a55b0\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///e32199ab-8765-4563-8806-0ed0074a55b0\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"moduleSequenceNumber\":403649}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-13\",\"httpPortOpen\":false,\"ip\":\"75.4.5.1\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":798.6499999999992,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1194.2100000001326,\"pid\":959474,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1194.2100000001326,\"pid\":959475,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":121}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1194.2100000001326,\"pid\":959476,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1194.2100000001326,\"pid\":959477,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":104}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1194.2100000001326,\"pid\":959478,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1194.2100000001326,\"pid\":959479,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":75}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1194.2100000001326,\"pid\":959480,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":553.009999999989,\"pid\":970252,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":508.20999999997997,\"pid\":971752,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":508.20999999997997,\"pid\":971753,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":326.80999999999017,\"pid\":975186,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":326.80999999999017,\"pid\":975187,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":180.20999999999836,\"pid\":977933,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":180.20999999999836,\"pid\":977934,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":180.20999999999836,\"pid\":977935,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":148.01000000000016,\"pid\":978472,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":148.01000000000016,\"pid\":978473,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":148.01000000000016,\"pid\":978474,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":127.01000000000121,\"pid\":978740,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000064,\"pid\":979390,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000064,\"pid\":979391,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000064,\"pid\":979393,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.010000000000254,\"pid\":980662,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.010000000000254,\"pid\":980663,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.010000000000254,\"pid\":980664,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.210000000000065,\"pid\":980854,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.210000000000065,\"pid\":980855,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.210000000000065,\"pid\":980856,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.210000000000065,\"pid\":980857,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.00999999999994,\"pid\":980979,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.00999999999994,\"pid\":980980,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.609999999999987,\"pid\":981186,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.609999999999987,\"pid\":981187,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.409999999999988,\"pid\":981188,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.409999999999988,\"pid\":981189,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.409999999999988,\"pid\":981191,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.409999999999988,\"pid\":981192,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.409999999999988,\"pid\":981193,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.409999999999988,\"pid\":981194,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981948,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981949,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981950,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981951,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981952,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981953,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981954,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981955,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981956,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981957,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981958,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981959,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981960,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981961,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981962,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981963,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981964,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981965,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981966,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981967,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981968,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981969,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":981970,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982048,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982049,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982050,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982051,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":982052,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"moduleSequenceNumber\":382536}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"moduleSequenceNumber\":382537}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-13\",\"moduleSequenceNumber\":382538}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-13\",\"moduleSequenceNumber\":403045}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///b11aaa0c-7214-4f06-b4fa-3496319610b6\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///b11aaa0c-7214-4f06-b4fa-3496319610b6\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"moduleSequenceNumber\":403672}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":3569.236047815034,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":6.17909661538462,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":14.617656410256421,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":82402.09058867263}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":7326.946666661872}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":49617.96877067638}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":55951.53226632747}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":38038.80512003144}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{\"c\":\"clear\",\"ch\":\"connect home\"}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":20,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":200,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"}}","VersionSave":"7","AllGangsSave":"","LastExportBonus":"1641007573288","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}
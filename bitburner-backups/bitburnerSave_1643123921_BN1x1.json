{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":993,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":32,\"hacking_chance_mult\":1.5963679512396005,\"hacking_speed_mult\":1.5883952173993818,\"hacking_money_mult\":2.66746642668,\"hacking_grow_mult\":1.5974766,\"hacking_exp\":491908271.16181296,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":903.5,\"hacking_mult\":2.2559908811063734,\"strength_mult\":1.3608133999999998,\"defense_mult\":1.183316,\"dexterity_mult\":1.8860873723999996,\"agility_mult\":1.2424818,\"charisma_mult\":1.4199791999999998,\"hacking_exp_mult\":1.9458123791420163,\"strength_exp_mult\":1.3016476000000001,\"defense_exp_mult\":1.3016476000000001,\"dexterity_exp_mult\":1.3016476000000001,\"agility_exp_mult\":1.3016476000000001,\"charisma_exp_mult\":1.3016476000000001,\"company_rep_mult\":1.183316,\"faction_rep_mult\":1.183316,\"money\":17338779447741.203,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-65536gb-0\",\"pserv-65536gb-1\",\"pserv-65536gb-2\",\"pserv-65536gb-3\",\"pserv-65536gb-4\",\"pserv-65536gb-5\",\"pserv-65536gb-6\",\"pserv-65536gb-7\",\"pserv-65536gb-8\",\"pserv-65536gb-9\",\"pserv-65536gb-10\",\"pserv-65536gb-11\",\"pserv-65536gb-12\",\"pserv-65536gb-13\",\"pserv-65536gb-14\",\"pserv-65536gb-15\",\"pserv-65536gb-16\",\"pserv-65536gb-17\",\"pserv-65536gb-18\",\"pserv-65536gb-19\",\"pserv-65536gb-20\",\"pserv-65536gb-21\",\"pserv-65536gb-22\",\"pserv-65536gb-23\",\"pserv-65536gb-24\"],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Sector-12\",\"CyberSec\",\"NiteSec\",\"The Black Hand\",\"BitRunners\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":3,\"name\":\"NeuroFlux Governor\"},{\"level\":4,\"name\":\"NeuroFlux Governor\"},{\"level\":5,\"name\":\"NeuroFlux Governor\"},{\"level\":6,\"name\":\"NeuroFlux Governor\"},{\"level\":7,\"name\":\"NeuroFlux Governor\"},{\"level\":8,\"name\":\"NeuroFlux Governor\"},{\"level\":9,\"name\":\"NeuroFlux Governor\"},{\"level\":10,\"name\":\"NeuroFlux Governor\"},{\"level\":11,\"name\":\"NeuroFlux Governor\"},{\"level\":12,\"name\":\"NeuroFlux Governor\"},{\"level\":13,\"name\":\"NeuroFlux Governor\"},{\"level\":14,\"name\":\"NeuroFlux Governor\"},{\"level\":15,\"name\":\"NeuroFlux Governor\"},{\"level\":16,\"name\":\"NeuroFlux Governor\"},{\"level\":17,\"name\":\"NeuroFlux Governor\"},{\"level\":18,\"name\":\"NeuroFlux Governor\"},{\"level\":19,\"name\":\"NeuroFlux Governor\"},{\"level\":20,\"name\":\"NeuroFlux Governor\"},{\"level\":21,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":2,\"name\":\"NeuroFlux Governor\"}],\"sourceFiles\":[{\"lvl\":1,\"n\":1},{\"lvl\":1,\"n\":5}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.183316,\"crime_success_mult\":1.183316,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":20,\"workExpMult\":10,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.183316,\"hacknet_node_money_mult\":1.183316,\"hacknet_node_purchase_cost_mult\":0.8232839999999999,\"hacknet_node_ram_cost_mult\":0.8232839999999999,\"hacknet_node_core_cost_mult\":0.8232839999999999,\"hacknet_node_level_cost_mult\":0.8232839999999999,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1643123920467,\"totalPlaytime\":3588012000,\"playtimeSinceLastAug\":246273600,\"playtimeSinceLastBitnode\":582725600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":2468596615564.8213,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":427053180399417.7,\"total\":17338778447741.203,\"work\":0,\"servers\":-73480762804571.14,\"other\":-313200000,\"augmentations\":-338701922562670.2}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":2570970824975.8213,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":430271644613417.94,\"total\":17566505555722.953,\"work\":0,\"servers\":-73701729387116.84,\"other\":-624900000,\"augmentations\":-341573755595554.06}},\"scriptProdSinceLastAug\":429521800435971.56,\"exploits\":[],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":6,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"95.5.4.6\",\"isConnectedTo\":true,\"maxRam\":524288,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"Formulas.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"DeepscanV1.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\ttarget = target || 'foodnstuff';\\n\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.45;\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(target);\\n\\t}\\n\\t\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(target);\\n\\t}\\n\\n\\tns.nuke(target);\\n\\n\\tlet moneyThreshOverride = 0;\\n\\tlet securityThreshOverride = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (!securityThreshOverride && ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tsecurityThreshOverride = 4;\\n\\t\\t} else if (!moneyThreshOverride && ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tlet percentGrowth = await ns.grow(target);\\n\\t\\t\\tif (percentGrowth < 1) {\\n\\t\\t\\t\\tmoneyThreshOverride = 10;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tmoneyThreshOverride = 4;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t\\tif (securityThreshOverride) {\\n\\t\\t\\tsecurityThreshOverride--\\n\\t\\t}\\n\\n\\t\\tif (moneyThreshOverride) {\\n\\t\\t\\tmoneyThreshOverride--\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"basic_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///a7cf0364-c8b1-4d05-a53e-1ee1dd627301\"}],\"ramUsage\":2.65,\"server\":\"home\",\"_hash\":\"66564122da72e063078801a9be4d4953671743756497c8cd5154d628cbf8aab5\",\"moduleSequenceNumber\":380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let pserv = false;\\n    let targetLimit = 0;\\n    if (ns.args.length) {\\n        [pserv, targetLimit] = ns.args;\\n    }\\n\\n    let purchased = ns.getPurchasedServers();\\n\\n    function __readNodes__(fPath) {\\n        let nodes = ns.read(fPath);\\n        nodes = nodes.split(',');\\n        return nodes;\\n    }\\n\\n    async function __scanAndWriteAllNodes__() {\\n        let nodes = [];\\n        let newNodes = ['home'];\\n        let newNodes2 = [];\\n        let repeat = true;\\n\\n        while (repeat) {\\n            newNodes2 = [];\\n            repeat = false;\\n\\n            let i, j;\\n            for (i = 0; i < newNodes.length; i++) {\\n                let connected = ns.scan(newNodes[i]);\\n\\n                for (j = 0; j < connected.length; j++) {\\n                    let node = connected[j];\\n                    if (!nodes.includes(node) && !newNodes.includes(node) && !newNodes2.includes(node)) {\\n                        newNodes2.push(node);\\n                        repeat = true;\\n                    }\\n                }\\n            }\\n\\n            nodes = nodes.concat(newNodes);\\n            newNodes = newNodes2;\\n        }\\n\\n        nodes = nodes.concat(purchased);\\n        await ns.write('nodes.txt', nodes, 'w');\\n    }\\n\\n    function __nukeAvailableNodes__() {\\n        let nodes = __readNodes__('nodes.txt');\\n        let myHackLevel = ns.getHackingLevel();\\n\\n        let Programs = [\\n            ns.fileExists('BruteSSH.exe'),\\n            ns.fileExists('FTPCrack.exe'),\\n            ns.fileExists('relaySMTP.exe'),\\n            ns.fileExists('HTTPWorm.exe'),\\n            ns.fileExists('SQLInject.exe')\\n        ];\\n\\n        let availPrograms = Programs.reduce((num, bool) => num + bool, 0);\\n\\n        nodes.forEach((node) => {\\n            if (\\n                !ns.hasRootAccess(node) &&\\n                ns.getServerNumPortsRequired(node) <= availPrograms &&\\n                ns.getServerRequiredHackingLevel(node) <= myHackLevel\\n            ) {\\n                Programs.forEach((exists, i) => {\\n                    if (exists) {\\n                        switch (i) {\\n                            case 0:\\n                                ns.brutessh(node);\\n                                break;\\n                            case 1:\\n                                ns.ftpcrack(node);\\n                                break;\\n                            case 2:\\n                                ns.relaysmtp(node);\\n                                break;\\n                            case 3:\\n                                ns.httpworm(node);\\n                                break;\\n                            case 4:\\n                                ns.sqlinject(node);\\n                                break;\\n                        }\\n                    }\\n                });\\n                ns.nuke(node);\\n            }\\n        });\\n    }\\n\\n    async function __scanAndWriteRootedNodes__() {\\n        let nodes = __readNodes__('nodes.txt');\\n        let rooted = nodes.reduce((arr, node) => {\\n            //don't hack ourselves\\n            if (ns.hasRootAccess(node) && node !== 'home' && !purchased.includes(node)) {\\n                let maxMoney = ns.getServerMaxMoney(node);\\n\\n                arr.push(`${maxMoney} ${node}`);\\n            }\\n            return arr;\\n        }, []);\\n\\n        //lowest max money at the front, filter invalid servers, remove money from name\\n        rooted.sort((a, b) => +b.split(' ')[0] - +a.split(' ')[0]);\\n        rooted = rooted.filter((node) => +node.split(' ')[0] > 0);\\n        await ns.write('money_rooted.txt', rooted, 'w');\\n\\n        rooted = rooted.map((node) => node.split(' ')[1]);\\n\\n        if (targetLimit && targetLimit != 'All') {\\n            rooted = rooted.slice(rooted.length - targetLimit);\\n        }\\n\\n        ns.tprint(`hackable nodes: ${rooted.length}`);\\n        await ns.write('rooted.txt', rooted, 'w');\\n    }\\n\\n    //read the nodes\\n    await __scanAndWriteAllNodes__();\\n    __nukeAvailableNodes__();\\n    await __scanAndWriteRootedNodes__();\\n\\n    //load nodes\\n    let attackNodes = [];\\n    if (pserv) {\\n        attackNodes = purchased;\\n    } else {\\n        attackNodes = __readNodes__('rooted.txt');\\n        if (purchased.length) {\\n            attackNodes = attackNodes.concat(purchased);\\n        }\\n    }\\n\\n    attackNodes.push('home');\\n    ns.scriptKill('daemon.js', 'home');\\n    ns.scriptKill('daemon_fml.js', 'home');\\n\\n    // spin up attack servers\\n    if (ns.getServerMaxRam('home') - ns.getServerUsedRam('home') > ns.getScriptRam('main_hack.js') * attackNodes.length)\\n        attackNodes.forEach((attacker) => {\\n            ns.exec('main_hack.js', 'home', 1, attacker, pserv || false, targetLimit || '');\\n        });\\n    else\\n        for (let i = 0; i < attackNodes.length; i++) {\\n            await ns.sleep(200);\\n            ns.exec('main_hack.js', 'home', 1, attackNodes[i], pserv || false, targetLimit || '');\\n        }\\n}\",\"filename\":\"setup_hacks.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"setup_hacks.js\",\"url\":\"blob:file:///f779b2ab-a040-4606-8bd5-4324b8e41f57\"}],\"ramUsage\":7.35,\"server\":\"home\",\"_hash\":\"bab487f9870b5a45f142d2639c50db25528a86db6566b2dac8a46e1865ca9a5e\",\"moduleSequenceNumber\":381,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet server = ns.args[0];\\n\\n\\tlet maxRam = ns.getServerMaxRam('home');\\n\\tlet usedRam = ns.getServerUsedRam('home');\\n\\tlet scriptRam = ns.getScriptRam('basic_hack.js');\\n\\tlet threads = Math.floor((maxRam - usedRam) / scriptRam);\\n\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t}\\n\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t}\\n\\n\\tns.nuke(server);\\n\\tns.run('basic_hack.js', threads, server);\\n}\",\"filename\":\"home_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"home_hack.js\",\"url\":\"blob:file:///e4d5c7e1-2a3e-4351-a242-0862f6f2a700\"}],\"ramUsage\":3.05,\"server\":\"home\",\"_hash\":\"14c038be817942d1f32ecaee03479bdd10d3725398564691f517ffb10d5f4d8e\",\"moduleSequenceNumber\":382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [ATTACK_SERVER, pserv, limit] = ns.args;\\n\\n    function __readNodes__(fPath) {\\n        let nodes = ns.read(fPath);\\n        nodes = nodes.split(',');\\n        return nodes;\\n    }\\n\\n    function __findAttackableNodes__() {\\n        let rooted = __readNodes__('rooted.txt');\\n        let targetNodes = [];\\n\\n        //check which are valid for attacking\\n        for (let i = 0; i < rooted.length; i++) {\\n            if (ns.getServerMaxMoney(rooted[i])) {\\n                targetNodes.push(rooted[i]);\\n            }\\n        }\\n\\n        if (pserv && limit && ATTACK_SERVER.split('-')[0] === 'pserv') {\\n            let pservNum = +ATTACK_SERVER.split('-')[2];\\n            let multiplier = Math.floor(targetNodes.length / 5);\\n\\n            if (pservNum < 5) {\\n                targetNodes = targetNodes.slice(0, multiplier);\\n            } else if (pservNum < 10) {\\n                targetNodes = targetNodes.slice(multiplier, multiplier * 2);\\n            } else if (pservNum < 15) {\\n                targetNodes = targetNodes.slice(multiplier * 2, multiplier * 3);\\n            } else if (pservNum < 20) {\\n                targetNodes = targetNodes.slice(multiplier * 3, multiplier * 4);\\n            } else {\\n                targetNodes = targetNodes.slice(multiplier * 4, -1);\\n            }\\n        }\\n\\n        return targetNodes;\\n    }\\n\\n    //prep attackServer\\n    let files = ['weaken.script', 'grow.script', 'hack.script', 'daemon.js', 'daemon_fml.js'];\\n    await ns.scp(files, 'home', ATTACK_SERVER);\\n\\n    let scripts = ['daemon.js', 'daemon_fml.js', 'hack.script', 'weaken.script', 'grow.script'];\\n    scripts.forEach((script) => {\\n        ns.scriptKill(script, ATTACK_SERVER);\\n    });\\n\\n    //load nodes\\n    let targetNodes = __findAttackableNodes__();\\n\\n    //calc ram and threads per daemon\\n    let serverRam = ns.getServerMaxRam(ATTACK_SERVER);\\n    if (ATTACK_SERVER === 'home') {\\n        serverRam -= ns.getServerUsedRam(ATTACK_SERVER);\\n        serverRam -= ns.getScriptRam('setup_hacks.js');\\n    }\\n\\n    let daemonRam = ns.getScriptRam('daemon.js');\\n    let minRamPerDaemon =\\n        ns.getScriptRam('weaken.script') + ns.getScriptRam('grow.script') + ns.getScriptRam('hack.script');\\n\\n    let leftoverRam = serverRam - daemonRam * targetNodes.length;\\n    let ramPerDaemon = leftoverRam / targetNodes.length;\\n\\n    while (ramPerDaemon < minRamPerDaemon) {\\n        targetNodes.pop();\\n        if (!targetNodes.length) {\\n            ns.tprint(`'${ATTACK_SERVER}' - insufficient RAM: exiting`);\\n            return;\\n        }\\n\\n        if (targetNodes.length === 2 && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel('joesguns')) {\\n            targetNodes = ['joesguns'];\\n        }\\n\\n        leftoverRam = serverRam - daemonRam * targetNodes.length;\\n        ramPerDaemon = leftoverRam / targetNodes.length;\\n    }\\n\\n    //start daemons\\n    let daemonCount = 0;\\n    let daemonFile = ns.fileExists('Formulas.exe') ? 'daemon_fml.js' : 'daemon.js';\\n    targetNodes.forEach((target) => {\\n        let success = ns.exec(\\n            daemonFile,\\n            ATTACK_SERVER,\\n            1,\\n            target,\\n            ATTACK_SERVER,\\n            Math.floor(ramPerDaemon),\\n            limit || false\\n        );\\n        daemonCount += success ? 1 : 0;\\n    });\\n\\n    ns.tprint(`attack server: ${ATTACK_SERVER}`);\\n    ns.tprint(`ram/daemon: ${Math.floor(ramPerDaemon)}`);\\n    ns.tprint(`daemon count: ${daemonCount}`);\\n}\",\"filename\":\"main_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"main_hack.js\",\"url\":\"blob:file:///a782b6b9-2c80-41c5-8760-3940c617583c\"}],\"ramUsage\":5.05,\"server\":\"home\",\"_hash\":\"d12f6fa1e32b565729137e29e350ea6909a5b1298e064c9df31e24d8e38e579a\",\"moduleSequenceNumber\":386,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///d9eeae94-7628-4b0a-a8b6-23799681c9aa\"}],\"ramUsage\":5.5,\"server\":\"home\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":387,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    let newSize = 0;\\n    let silent = false;\\n    if (ns.args.length > 0) {\\n        [newSize, silent] = ns.args;\\n    }\\n\\n    if (isNaN(newSize)) {\\n        newSize = 0;\\n        silent = true;\\n    }\\n\\n    let files = ['weaken.script', 'grow.script', 'hack.script', 'daemon.js'];\\n    let servers = ns.getPurchasedServers();\\n\\n    if (servers.length < 25) {\\n        //buy servers until max\\n        if (!newSize) {\\n            newSize = 64;\\n        }\\n\\n        let price = ns.getPurchasedServerCost(newSize);\\n\\n        let i = servers.length;\\n        while (i < 25) {\\n            ns.print('');\\n            ns.print('===');\\n            ns.print('');\\n            let newHostname = 'pserv-' + newSize + 'gb-' + i;\\n\\n            ns.print(`attempting to purchase ${newHostname} for ${ns.nFormat(price, '$0.000a')}`);\\n\\n            if (ns.getServerMoneyAvailable('home') > price) {\\n                ns.purchaseServer(newHostname, newSize);\\n                ns.print('purchased ' + newHostname);\\n                ns.tprint('purchased ' + newHostname);\\n\\n                if (!silent) {\\n                    //start scripts on new server\\n                    await ns.scp(files, 'home', newHostname);\\n                    ns.exec('main_hack.js', 'home', 1, newHostname);\\n                }\\n\\n                ++i;\\n            }\\n\\n            if (ns.getServerMoneyAvailable('home') < price) {\\n                await ns.sleep(10000);\\n            }\\n        }\\n    } else {\\n        // upgrade existing servers\\n        let i = 0;\\n        while (i < 25) {\\n            ns.print('');\\n            ns.print('===');\\n            ns.print('');\\n            let oldServerName = servers[i];\\n            let oldServerSize = ns.getServerMaxRam(oldServerName);\\n            let newServerSize = newSize;\\n\\n            if (!newServerSize) {\\n                newServerSize = 2 * oldServerSize;\\n            }\\n\\n            let price = ns.getPurchasedServerCost(newServerSize);\\n\\n            ns.print(`looking at server: ${oldServerName} - size: ${oldServerSize} -> ${newServerSize}`);\\n\\n            if (oldServerSize < newServerSize) {\\n                let newHostname = 'pserv-' + newServerSize + 'gb-' + i;\\n\\n                ns.print(`attempt upgrade: ${oldServerName} -> ${newHostname} for ${ns.nFormat(price, '$0.000a')}`);\\n\\n                if (ns.getServerMoneyAvailable('home') > price) {\\n                    ns.killall(oldServerName);\\n                    let deleted = ns.deleteServer(oldServerName);\\n\\n                    if (deleted) {\\n                        ns.purchaseServer(newHostname, newServerSize);\\n\\n                        ns.print('purchased ' + newHostname);\\n                        ns.tprint('purchased ' + newHostname);\\n\\n                        if (!silent) {\\n                            //start scripts on new server\\n                            await ns.scp(files, 'home', newHostname);\\n                            ns.exec('main_hack.js', 'home', 1, newHostname);\\n                        }\\n                    } else {\\n                        ns.print(`${oldServerName} deletion failed`);\\n                    }\\n                    ++i;\\n                }\\n            }\\n\\n            if (oldServerSize >= newServerSize) {\\n                i++;\\n            }\\n\\n            if (ns.getServerMoneyAvailable('home') < price) {\\n                await ns.sleep(20000);\\n            }\\n        }\\n    }\\n}\",\"filename\":\"refresh_servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"refresh_servers.js\",\"url\":\"blob:file:///dc137a51-5abd-41db-b90e-05c314a09a87\"}],\"ramUsage\":11.15,\"server\":\"home\",\"_hash\":\"a0f23c2b61b1e1dcff13e8559ffd844de098fce27a8702e4a154d8093911b7c0\",\"moduleSequenceNumber\":388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getServerMoneyAvailable');\\n\\n    // We will not buy anything if there's less money than this ammount\\n    let reserveMoney = 1000;\\n    let HNT = ns.hacknet;\\n\\n    // Buy first HacknetNode if there are none\\n    if (HNT.numNodes() === 0 && ns.getServerMoneyAvailable('home') >= reserveMoney) {\\n        HNT.purchaseNode();\\n        ns.print('Purchased ' + HNT.getNodeStats(HNT.numNodes() - 1).name + ' because there was none.');\\n    }\\n\\n    // If there are no Hacknet Nodes, we can't do anything, so the script ends\\n    let numUpgrades = 1;\\n    while (HNT.numNodes() > 0) {\\n        // If there is not enough money, we wait for it instead of ending\\n        // the loop.\\n        while (ns.getServerMoneyAvailable('home') * 0.1 >= reserveMoney) {\\n            for (let i = 0; i < HNT.numNodes(); i++) {\\n                while (\\n                    HNT.getLevelUpgradeCost(i, numUpgrades) < ns.getServerMoneyAvailable('home') * 0.1 &&\\n                    HNT.upgradeLevel(i, numUpgrades)\\n                ) {\\n                    ns.print('Upgraded ' + HNT.getNodeStats(i).name + ' to level ' + HNT.getNodeStats(i).level);\\n                }\\n\\n                while (\\n                    HNT.getRamUpgradeCost(i, numUpgrades) < ns.getServerMoneyAvailable('home') * 0.1 &&\\n                    HNT.upgradeRam(i, numUpgrades)\\n                ) {\\n                    ns.print('Upgraded ' + HNT.getNodeStats(i).name + ' RAM to ' + HNT.getNodeStats(i).ram);\\n                }\\n\\n                while (\\n                    HNT.getCoreUpgradeCost(i, numUpgrades) < ns.getServerMoneyAvailable('home') * 0.1 &&\\n                    HNT.upgradeCore(i, numUpgrades)\\n                ) {\\n                    ns.print('Upgraded ' + HNT.getNodeStats(i).name + ' core to ' + HNT.getNodeStats(i).core);\\n                }\\n            }\\n\\n            // Buy next Hacknet Node if the last one is already fully\\n            // upgraded. If for some reason the last Hacknet Node is fully\\n            // upgraded and the others don't, the loop above will still\\n            // attempt to upgrade them all.\\n            if (\\n                HNT.getLevelUpgradeCost(HNT.numNodes() - 1, numUpgrades) === Infinity &&\\n                HNT.getRamUpgradeCost(HNT.numNodes() - 1, numUpgrades) === Infinity &&\\n                HNT.getCoreUpgradeCost(HNT.numNodes() - 1, numUpgrades) === Infinity &&\\n                HNT.getPurchaseNodeCost() < ns.getServerMoneyAvailable('home') * 0.1\\n            ) {\\n                HNT.purchaseNode();\\n                ns.print(\\n                    `Purchased ${\\n                        HNT.getNodeStats(HNT.numNodes() - 1).name\\n                    } because the last one couldn't be upgraded further.`\\n                );\\n            } else if (\\n                // Or buy the next Hacknet Node if the next upgrade is more\\n                // expensive than buying a new Hacknet Node.\\n                HNT.getLevelUpgradeCost(HNT.numNodes() - 1, numUpgrades) > HNT.getPurchaseNodeCost() &&\\n                HNT.getRamUpgradeCost(HNT.numNodes() - 1, numUpgrades) > HNT.getPurchaseNodeCost() &&\\n                HNT.getCoreUpgradeCost(HNT.numNodes() - 1, numUpgrades) > HNT.getPurchaseNodeCost() &&\\n                HNT.getPurchaseNodeCost() < ns.getServerMoneyAvailable('home') * 0.1\\n            ) {\\n                HNT.purchaseNode();\\n                ns.print(\\n                    `Purchased ${HNT.getNodeStats(HNT.numNodes() - 1).name} because it was cheaper than next upgrade.`\\n                );\\n            }\\n\\n            await ns.sleep(1000);\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"hacknet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacknet.js\",\"url\":\"blob:file:///7d8be283-c257-4130-96f3-0bbd397293e9\"}],\"ramUsage\":5.7,\"server\":\"home\",\"_hash\":\"652df912c4c46e5dd174253c86656806cdabb9ca90b2ebe872a24f98daf3cbef\",\"moduleSequenceNumber\":389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {{\\n *  sym: string;\\n *  shares: number;\\n *  price: number;\\n *  forecast: number;\\n * }[]} Stocks\\n *\\n * @typedef {{\\n *  [sym: string]: {\\n *      profit: string;\\n *      raw: number;\\n *  }\\n * }} Tracker\\n */\\n\\n/** @type {Stocks} */\\nlet stocks = [];\\n/** @type {Stocks} */\\nlet myStocks = [];\\nlet corpus = 0;\\n\\n/** @type {Tracker} */\\nlet profitTracker = {};\\n\\nlet COMMISSION = 100000; //Buy or sell commission\\nlet numCycles = 2; //Each cycle is ~ 5 seconds\\nlet fracL = 0.2; //Fraction of assets to keep as cash in hand\\nlet fracH = 0.2;\\n\\n/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    ns.tail();\\n\\n    let TIX = ns.stock;\\n    let syms = TIX.getSymbols();\\n    syms.forEach((sym) => (profitTracker[sym] = { profit: '$0.00', raw: 0 }));\\n\\n    function __refresh__() {\\n        let newCorpus = ns.getServerMoneyAvailable('home');\\n\\n        stocks = [];\\n        myStocks = [];\\n        syms.forEach((sym) => {\\n            let [shares] = TIX.getPosition(sym);\\n            let price = TIX.getPrice(sym);\\n            let forecast = TIX.getForecast(sym);\\n            newCorpus += price * shares;\\n\\n            if (shares) {\\n                myStocks.push({ sym, shares, price, forecast });\\n            } else {\\n                stocks.push({ sym, shares, price, forecast });\\n            }\\n        });\\n\\n        stocks.sort((a, b) => b.forecast - a.forecast);\\n        corpus = newCorpus;\\n    }\\n\\n    function __format__(profit) {\\n        return ns.nFormat(profit, '($0.00a)');\\n    }\\n\\n    function __buy__(stock, numShares) {\\n        //buy\\n        let pricePer = TIX.buy(stock.sym, numShares);\\n        let price = __format__(pricePer * numShares + COMMISSION);\\n\\n        //track\\n        profitTracker[stock.sym].raw = profitTracker[stock.sym].raw - pricePer * numShares;\\n        profitTracker[stock.sym].profit = __format__(profitTracker[stock.sym].raw);\\n\\n        //log\\n        ns.print(`Bought ${pricePer ? numShares : 0} shares of ${stock.sym} for ${price}`);\\n        ns.print(`Current profit for ${stock.sym}: ${profitTracker[stock.sym].profit}`);\\n    }\\n\\n    function __sell__(stock, numShares) {\\n        //buy\\n        let profitPer = TIX.sell(stock.sym, numShares);\\n        let profit = __format__(profitPer * numShares + COMMISSION);\\n\\n        //track\\n        profitTracker[stock.sym].raw = profitTracker[stock.sym].raw + profitPer * numShares;\\n        profitTracker[stock.sym].profit = __format__(profitTracker[stock.sym].raw);\\n\\n        //log\\n        ns.print(`Sold ${profitPer ? numShares : 0} shares of ${stock.sym} for ${profit}`);\\n        ns.print(`Current profit for ${stock.sym}: ${profitTracker[stock.sym].profit}`);\\n    }\\n\\n    while (true) {\\n        __refresh__();\\n\\n        //Sell underperforming shares\\n        myStocks.forEach((stock) => {\\n            if (stock.forecast < stocks[0].forecast) {\\n                __sell__(stock, stock.shares);\\n                corpus -= COMMISSION;\\n            }\\n        });\\n\\n        //Sell shares if not enough cash in hand\\n        myStocks.forEach((stock) => {\\n            if (ns.getServerMoneyAvailable('home') < fracL * corpus) {\\n                let cashNeeded = corpus * fracH - ns.getServerMoneyAvailable('home') + COMMISSION;\\n                let numShares = Math.floor(cashNeeded / stock.price);\\n\\n                __sell__(stock, numShares);\\n                corpus -= COMMISSION;\\n            }\\n        });\\n\\n        // Buy shares with cash remaining in hand\\n        let cashToSpend = ns.getServerMoneyAvailable('home') - fracH * corpus;\\n        let numShares = Math.floor((cashToSpend - COMMISSION) / stocks[0].price);\\n        let maxShares = TIX.getMaxShares(stocks[0].sym) - stocks[0].shares;\\n\\n        numShares = Math.min(numShares, maxShares);\\n\\n        ns.print('stocks[0].price: ' + stocks[0].price);\\n        ns.print('corpus: ' + corpus);\\n        ns.print('cashToSpend: ' + cashToSpend);\\n\\n        if (numShares * stocks[0].forecast * stocks[0].price * numCycles > COMMISSION) {\\n            __buy__(stocks[0], numShares);\\n        }\\n\\n        await ns.sleep(5 * 1000 * numCycles + 200);\\n    }\\n}\",\"filename\":\"stocks.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stocks.js\",\"url\":\"blob:file:///8f829e6a-aece-4fe8-99ae-8f1c81465c47\"}],\"ramUsage\":17.2,\"server\":\"home\",\"_hash\":\"b9bcf2be9c7706da63fb4e833eafc0a1a1ac4fd683d532f8bf5186763f5af5a4\",\"moduleSequenceNumber\":390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\n\\t//get the TOR router\\n\\twhile (!ns.purchaseTor()) {\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n\\n\\t//buy programs in this order\\n\\tlet cheapProgramList = [\\n\\t\\t'BruteSSH.exe',\\n\\t\\t'FTPCrack.exe',\\n\\t\\t'AutoLink.exe',\\n\\t\\t'DeepscanV1.exe',\\n\\t\\t'ServerProfiler.exe',\\n\\t\\t'DeepscanV2.exe',\\n\\t];\\n\\tfor (let i = 0; i < cheapProgramList.length; i++) {\\n\\t\\tlet prg = cheapProgramList[i];\\n\\t\\twhile (!ns.purchaseProgram(prg)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\t}\\n\\n\\t//buy baseline 64g servers\\n\\twhile (ns.getServerMoneyAvailable('home') < 88000000) {\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n\\tns.run('refresh_servers.js', 1, 64);\\n\\n\\t//buy programs in this order\\n\\tlet priceyProgramList = ['DeepscanV2.exe', 'relaySMTP.exe', 'HTTPWorm.exe', 'SQLInject.exe'];\\n\\tfor (let i = 0; i < priceyProgramList.length; i++) {\\n\\t\\tlet prg = priceyProgramList[i];\\n\\t\\twhile (!ns.purchaseProgram(prg)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"buy_darkweb.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"buy_darkweb.js\",\"url\":\"blob:file:///2a3a7ebd-7bef-459a-9cc1-554a8d433205\"}],\"ramUsage\":66.7,\"server\":\"home\",\"_hash\":\"4b23f33ef10c4f22e88ad0f6c473e6d326f1bafaee03aca06626e9dbbbc384e9\",\"moduleSequenceNumber\":391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":32},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n\\r\\n    let COMMISSION = 100000; //Buy or sell commission\\r\\n\\r\\n    if (ns.isRunning('stocks.js', 'home')) {\\r\\n        ns.kill('stocks.js', 'home');\\r\\n    }\\r\\n\\r\\n    function __format__(profit) {\\r\\n        return ns.nFormat(profit, '-$0.00a');\\r\\n    }\\r\\n\\r\\n    let TIX = ns.stock;\\r\\n    let syms = TIX.getSymbols();\\r\\n\\r\\n    syms.forEach((sym) => {\\r\\n        let [numShares] = TIX.getPosition(sym);\\r\\n        if (numShares) {\\r\\n            let profitPer = TIX.sell(sym, numShares);\\r\\n            let profit = __format__(profitPer * numShares - COMMISSION);\\r\\n            ns.tprint(`Sold ${profitPer ? numShares : 0} shares of ${sym} for profit of ${profit}`);\\r\\n        }\\r\\n    });\\r\\n}\",\"filename\":\"sell_stocks.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"sell_stocks.js\",\"url\":\"blob:file:///d60dd579-ff31-4b0f-b541-774ac9f47d5b\"}],\"ramUsage\":8.7,\"server\":\"home\",\"_hash\":\"9818913a8426e7bc4615bec616a98b69d0a0e69e79b42a2f5ba34f09b2e39c59\",\"moduleSequenceNumber\":82122,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {{\\n *  sym: string;\\n *  shares: number;\\n *  price: number;\\n *  forecast: number;\\n * }[]} Stocks\\n *\\n * @typedef {{\\n *  [sym: string]: {\\n *      profit: string;\\n *      raw: number;\\n *  }\\n * }} Tracker\\n */\\n\\n/** @type {Stocks} */\\nlet stocks = [];\\n/** @type {Stocks} */\\nlet myStocks = [];\\nlet corpus = 0;\\n\\n/** @type {Tracker} */\\nlet profitTracker = {};\\n\\n/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    const TIX = ns.stock;\\n\\n    const KEEP = 0.2;\\n    const BUY_LIMIT = 0.58;\\n    const SELL_LIMIT = 0.5;\\n    const COMMISSION = 100000;\\n\\n    //init stocks\\n    let syms = TIX.getSymbols();\\n    syms.forEach((sym) => {\\n        stocks.push({ sym });\\n        profitTracker[sym] = { profit: '$0.00', raw: 0 };\\n    });\\n\\n    function __updateStockData__() {\\n        let corpus = ns.getServerMoneyAvailable('home');\\n        myStocks.length = 0;\\n\\n        stocks.forEach((stock) => {\\n            let sym = stock.sym;\\n            stock.price = TIX.getPrice(sym);\\n            stock.shares = TIX.getPosition(sym)[0];\\n            stock.forecast = TIX.getForecast(sym);\\n\\n            corpus += stock.price * stock.shares;\\n\\n            if (stock.shares) {\\n                myStocks.push(stock);\\n            }\\n        });\\n\\n        stocks.sort((a, b) => b.forecast - a.forecast);\\n        return corpus;\\n    }\\n\\n    function __format__(profit) {\\n        return ns.nFormat(profit, '-$0.00a');\\n    }\\n\\n    function __buy__(stock, numShares) {\\n        //buy\\n        let pricePer = TIX.buy(stock.sym, numShares);\\n        let price = __format__(pricePer * numShares + COMMISSION);\\n\\n        //track\\n        profitTracker[stock.sym].raw = profitTracker[stock.sym].raw - pricePer * numShares;\\n        profitTracker[stock.sym].profit = __format__(profitTracker[stock.sym].raw);\\n\\n        //log\\n        ns.print(`Bought ${pricePer ? numShares : 0} shares of ${stock.sym} for ${price}`);\\n        ns.print(`Current profit for ${stock.sym}: ${profitTracker[stock.sym].profit}`);\\n    }\\n\\n    function __sell__(stock, numShares) {\\n        //buy\\n        let profitPer = TIX.sell(stock.sym, numShares);\\n        let profit = __format__(profitPer * numShares + COMMISSION);\\n\\n        //track\\n        profitTracker[stock.sym].raw = profitTracker[stock.sym].raw + profitPer * numShares;\\n        profitTracker[stock.sym].profit = __format__(profitTracker[stock.sym].raw);\\n\\n        //log\\n        ns.print(`Sold ${profitPer ? numShares : 0} shares of ${stock.sym} for ${profit}`);\\n        ns.print(`Current profit for ${stock.sym}: ${profitTracker[stock.sym].profit}`);\\n    }\\n\\n    while (true) {\\n        corpus = __updateStockData__();\\n\\n        // Sell bad shares\\n        myStocks.forEach((stock) => {\\n            if (stock.forecast < SELL_LIMIT) {\\n                ns.print(`${stock.sym} no longer valuable - selling.`);\\n                __sell__(stock, stock.shares);\\n            }\\n        });\\n\\n        // Don't do this. Use getStockPurchaseCost for some proportion of corpus,\\n        // then reduce it by a certain % until it's buyable.\\n\\n        let stockIndex = -1;\\n        let cashToSpend = ns.getServerMoneyAvailable('home');\\n        while (cashToSpend > 100 * COMMISSION && cashToSpend > corpus * 0.1) {\\n            stockIndex++;\\n            corpus = __updateStockData__();\\n\\n            let stockToBuy = stocks[stockIndex];\\n            if (!stockToBuy || stockToBuy.forecast < BUY_LIMIT) {\\n                // No more (good) stocks left\\n                break;\\n            }\\n\\n            let availibleShares = TIX.getMaxShares(stockToBuy.sym) - stockToBuy.shares;\\n            if (!availibleShares) {\\n                // We bought all shares of this stock\\n                continue;\\n            }\\n\\n            while (availibleShares) {\\n                let purchaseCost = TIX.getPurchaseCost(stockToBuy.sym, availibleShares, 'Long');\\n                if (purchaseCost <= cashToSpend) {\\n                    __buy__(stockToBuy, availibleShares);\\n                    cashToSpend -= purchaseCost;\\n                    break;\\n                }\\n\\n                availibleShares = Math.floor(availibleShares * 0.9);\\n            }\\n        }\\n\\n        await ns.sleep(5 * 1000);\\n    }\\n}\",\"filename\":\"stocks_V2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"stocks_V2.js\",\"url\":\"blob:file:///d7fba959-1c19-42a2-bfb5-ed20a6a8ab3c\"}],\"ramUsage\":19.2,\"server\":\"home\",\"_hash\":\"c6d388b4c5d6ee07d6e33f810f1ccc82a16f93b5e1c9651bfb8380ce826638a1\",\"moduleSequenceNumber\":956,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPurchaseCost\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"home\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    let roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n\\n    let nodes = {\\n        home: roots.reduce((obj, node) => {\\n            let maxMoney = ns.nFormat(ns.getServerMaxMoney(node), '$0.00a');\\n            let hackingReq = ns.getServerRequiredHackingLevel(node);\\n            let childName = `${node} - ${maxMoney} - ${hackingReq}`;\\n\\n            obj[childName] = {};\\n            return obj;\\n        }, {})\\n    };\\n\\n    roots.unshift('home');\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        ns.tprint('');\\n        ns.tprint('      rootName: ', rootNode);\\n        ns.tprint('connectedNodes: ', connectedNodes);\\n        ns.tprint('         roots: ', roots);\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let maxMoney = ns.nFormat(ns.getServerMaxMoney(childNode), '$0.00a');\\n                let hackingReq = ns.getServerRequiredHackingLevel(childNode);\\n                let childName = `${childNode} - ${maxMoney} - ${hackingReq}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n    }\\n\\n    Object.keys(nodes.home).forEach((node) => {\\n        traverseNodes(nodes.home[node], node.split(' ')[0]);\\n    });\\n    await ns.write('servers.txt', JSON.stringify(nodes), 'w');\\n    ns.tprint(nodes);\\n}\",\"filename\":\"scan_servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"scan_servers.js\",\"url\":\"blob:file:///4ea7d605-ffbe-4206-8664-51478e8b0d33\"}],\"ramUsage\":2,\"server\":\"home\",\"_hash\":\"90330bb76b24adcf682a1cd4bc71810366d4722f7b98d2a67769ace055bf2fd7\",\"moduleSequenceNumber\":395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let purchased = ns.getPurchasedServers();\\n\\n    function __readNodes__(fPath) {\\n        let nodes = ns.read(fPath);\\n        nodes = nodes.split(',');\\n        return nodes;\\n    }\\n\\n    async function __scanAndWriteAllNodes__() {\\n        let nodes = [];\\n        let newNodes = ['home'];\\n        let newNodes2 = [];\\n        let repeat = true;\\n\\n        while (repeat) {\\n            newNodes2 = [];\\n            repeat = false;\\n\\n            let i, j;\\n            for (i = 0; i < newNodes.length; i++) {\\n                let connected = ns.scan(newNodes[i]);\\n\\n                for (j = 0; j < connected.length; j++) {\\n                    let node = connected[j];\\n                    if (!nodes.includes(node) && !newNodes.includes(node) && !newNodes2.includes(node)) {\\n                        newNodes2.push(node);\\n                        repeat = true;\\n                    }\\n                }\\n            }\\n\\n            nodes = nodes.concat(newNodes);\\n            newNodes = newNodes2;\\n        }\\n\\n        nodes = nodes.concat(purchased);\\n        await ns.write('nodes.txt', nodes, 'w');\\n    }\\n\\n    function __nukeAvailableNodes__() {\\n        let nodes = __readNodes__('nodes.txt');\\n        let myHackLevel = ns.getHackingLevel();\\n\\n        let Programs = [\\n            ns.fileExists('BruteSSH.exe'),\\n            ns.fileExists('FTPCrack.exe'),\\n            ns.fileExists('relaySMTP.exe'),\\n            ns.fileExists('HTTPWorm.exe'),\\n            ns.fileExists('SQLInject.exe')\\n        ];\\n\\n        let availPrograms = Programs.reduce((num, bool) => num + bool, 0);\\n\\n        nodes.forEach((node) => {\\n            if (\\n                !ns.hasRootAccess(node) &&\\n                ns.getServerNumPortsRequired(node) <= availPrograms &&\\n                ns.getServerRequiredHackingLevel(node) <= myHackLevel\\n            ) {\\n                Programs.forEach((exists, i) => {\\n                    if (exists) {\\n                        switch (i) {\\n                            case 0:\\n                                ns.brutessh(node);\\n                                break;\\n                            case 1:\\n                                ns.ftpcrack(node);\\n                                break;\\n                            case 2:\\n                                ns.relaysmtp(node);\\n                                break;\\n                            case 3:\\n                                ns.httpworm(node);\\n                                break;\\n                            case 4:\\n                                ns.sqlinject(node);\\n                                break;\\n                        }\\n                    }\\n                });\\n                ns.nuke(node);\\n                ns.tprint(`NUKE: ${node}`)\\n            }\\n        });\\n    }\\n\\n\\n    //read the nodes\\n    await __scanAndWriteAllNodes__();\\n    __nukeAvailableNodes__();\\n}\",\"filename\":\"nuke_servers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"nuke_servers.js\",\"url\":\"blob:file:///07fcf1ae-e426-493c-b06a-f0ccb4c9c13c\"}],\"ramUsage\":4.75,\"server\":\"home\",\"_hash\":\"fd0ed6db573bff7f57e5883f86054f664a0ba57ab679b97e64338ba0d8c80f91\",\"moduleSequenceNumber\":957,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.deleteServer('pserv-64gb-24-0')\\n}\",\"filename\":\"adhoc.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"adhoc.js\",\"url\":\"blob:file:///b2e2c27b-8ffe-4fab-926f-a84b5074e245\"}],\"ramUsage\":3.85,\"server\":\"home\",\"_hash\":\"344bb010339ae80ed6bf4b096cb3818b4424008a9b04085ab0d04c5ae1f56b3b\",\"moduleSequenceNumber\":397,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// ns.disableLog('ALL')\\n\\t// ns.getServerMaxRam('home')\\n\\t// ns.enableLog('exec')\\n\\t// ns.enableLog('weaken')\\n\\t// ns.enableLog('grow')\\n\\t// ns.enableLog('hack')\\n\\t// ns.enableLog('getServerUsedRam')\\n\\t// ns.enableLog('getServerSecurityLevel')\\n\\t// ns.enableLog('getServerMoneyAvailable')\\n\\t// ns.enableLog('hackAnalyze')\\n\\t// ns.enableLog('growthAnalyze')\\n\\t// ns.getServerMaxRam('home')\\n\\n\\tns.tprint(ns.getServerMoneyAvailable('home'))\\n\\n\\tns.formulas.skills.calculateExp(1)\\n\\n\\t// while (true) {\\n\\t// \\tawait ns.sleep(100000)\\n\\t// }\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"afe8e263b0ef5729a6b7245fa5e13e8250fed27d7a6a905007592d4fb97599de\",\"moduleSequenceNumber\":398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"home\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":898,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let purchased = ns.getPurchasedServers();\\n\\n    function __readNodes__(fPath) {\\n        let nodes = ns.read(fPath);\\n        nodes = nodes.split(',');\\n        return nodes;\\n    }\\n\\n    async function __scanAndWriteAllNodes__() {\\n        let nodes = [];\\n        let newNodes = ['home'];\\n        let newNodes2 = [];\\n        let repeat = true;\\n\\n        while (repeat) {\\n            newNodes2 = [];\\n            repeat = false;\\n\\n            let i, j;\\n            for (i = 0; i < newNodes.length; i++) {\\n                let connected = ns.scan(newNodes[i]);\\n\\n                for (j = 0; j < connected.length; j++) {\\n                    let node = connected[j];\\n                    if (!nodes.includes(node) && !newNodes.includes(node) && !newNodes2.includes(node)) {\\n                        newNodes2.push(node);\\n                        repeat = true;\\n                    }\\n                }\\n            }\\n\\n            nodes = nodes.concat(newNodes);\\n            newNodes = newNodes2;\\n        }\\n\\n        nodes = nodes.concat(purchased);\\n        await ns.write('nodes.txt', nodes, 'w');\\n    }\\n\\n    function __nukeAvailableNodes__() {\\n        let nodes = __readNodes__('nodes.txt');\\n        let myHackLevel = ns.getHackingLevel();\\n\\n        let Programs = [\\n            ns.fileExists('BruteSSH.exe'),\\n            ns.fileExists('FTPCrack.exe'),\\n            ns.fileExists('relaySMTP.exe'),\\n            ns.fileExists('HTTPWorm.exe'),\\n            ns.fileExists('SQLInject.exe')\\n        ];\\n\\n        let availPrograms = Programs.reduce((num, bool) => num + bool, 0);\\n\\n        nodes.forEach((node) => {\\n            if (\\n                !ns.hasRootAccess(node) &&\\n                ns.getServerNumPortsRequired(node) <= availPrograms &&\\n                ns.getServerRequiredHackingLevel(node) <= myHackLevel\\n            ) {\\n                Programs.forEach((exists, i) => {\\n                    if (exists) {\\n                        switch (i) {\\n                            case 0:\\n                                ns.brutessh(node);\\n                                break;\\n                            case 1:\\n                                ns.ftpcrack(node);\\n                                break;\\n                            case 2:\\n                                ns.relaysmtp(node);\\n                                break;\\n                            case 3:\\n                                ns.httpworm(node);\\n                                break;\\n                            case 4:\\n                                ns.sqlinject(node);\\n                                break;\\n                        }\\n                    }\\n                });\\n                ns.nuke(node);\\n            }\\n        });\\n    }\\n\\n    async function __scanAndWriteRootedNodes__() {\\n        let nodes = __readNodes__('nodes.txt');\\n        let rooted = nodes.reduce((arr, node) => {\\n            //don't hack ourselves\\n            if (ns.hasRootAccess(node) && node !== 'home' && !purchased.includes(node)) {\\n                let maxMoney = ns.getServerMaxMoney(node);\\n\\n                arr.push(`${maxMoney} ${node}`);\\n            }\\n            return arr;\\n        }, []);\\n\\n        //lowest max money at the front, filter invalid servers, remove money from name\\n        rooted.sort((a, b) => +b.split(' ')[0] - +a.split(' ')[0]);\\n        rooted = rooted.filter((node) => +node.split(' ')[0] > 0);\\n        await ns.write('money_rooted.txt', rooted, 'w');\\n\\n        rooted = rooted.map((node) => node.split(' ')[1]);\\n\\n        await ns.write('rooted.txt', rooted, 'w');\\n    }\\n\\n    //read the nodes\\n    await __scanAndWriteAllNodes__();\\n    __nukeAvailableNodes__();\\n    await __scanAndWriteRootedNodes__();\\n\\n    //load nodes\\n    let attackNodes = __readNodes__('rooted.txt');\\n    if (purchased.length) {\\n        attackNodes = attackNodes.concat(purchased);\\n    }\\n\\n    attackNodes.push('home');\\n    ns.scriptKill('daemon.js', 'home');\\n    ns.scriptKill('daemon_fml.js', 'home');\\n\\n    // spin up attack servers\\n    attackNodes.forEach(async (attacker) => {\\n        ns.exec('init_skill_up.js', 'home', 1, attacker);\\n    });\\n}\",\"filename\":\"skill_setup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_setup.js\",\"url\":\"blob:file:///4483358b-77ad-43b8-94d8-91d84d8208b4\"}],\"ramUsage\":7.15,\"server\":\"home\",\"_hash\":\"266bcafe49dc3615a936a2a5aa30b8ab0c3c899b7b9bc4fc75e911fd43c15ecd\",\"moduleSequenceNumber\":759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    const ATTACKER = ns.args[0];\\n\\n    // spin up attack servers\\n    let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n\\n    if (ATTACKER !== 'home') {\\n        ns.killall(ATTACKER);\\n        await ns.scp(files, 'home', ATTACKER);\\n    }\\n\\n    ns.tprint(ATTACKER)\\n\\n    ns.exec('skill_up.js', ATTACKER, 1, ATTACKER);\\n}\",\"filename\":\"init_skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"init_skill_up.js\",\"url\":\"blob:file:///6b71cceb-e2c6-42b6-b937-e4297b50c5b2\"}],\"ramUsage\":4,\"server\":\"home\",\"_hash\":\"0115458d2eedc90b7848a0371e4a67514eb8efdcee79bff5b083c6bd84e29e6f\",\"moduleSequenceNumber\":831,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-65536gb-0\",\"pserv-65536gb-1\",\"pserv-65536gb-2\",\"pserv-65536gb-3\",\"pserv-65536gb-4\",\"pserv-65536gb-5\",\"pserv-65536gb-6\",\"pserv-65536gb-7\",\"pserv-65536gb-8\",\"pserv-65536gb-9\",\"pserv-65536gb-10\",\"pserv-65536gb-11\",\"pserv-65536gb-12\",\"pserv-65536gb-13\",\"pserv-65536gb-14\",\"pserv-65536gb-15\",\"pserv-65536gb-16\",\"pserv-65536gb-17\",\"pserv-65536gb-18\",\"pserv-65536gb-19\",\"pserv-65536gb-20\",\"pserv-65536gb-21\",\"pserv-65536gb-22\",\"pserv-65536gb-23\",\"pserv-65536gb-24\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"nodes.txt\",\"text\":\"home,n00dles,foodnstuff,sigma-cosmetics,joesguns,hong-fang-tea,harakiri-sushi,iron-gym,darkweb,pserv-65536gb-0,pserv-65536gb-1,pserv-65536gb-2,pserv-65536gb-3,pserv-65536gb-4,pserv-65536gb-5,pserv-65536gb-6,pserv-65536gb-7,pserv-65536gb-8,pserv-65536gb-9,pserv-65536gb-10,pserv-65536gb-11,pserv-65536gb-12,pserv-65536gb-13,pserv-65536gb-14,pserv-65536gb-15,pserv-65536gb-16,pserv-65536gb-17,pserv-65536gb-18,pserv-65536gb-19,pserv-65536gb-20,pserv-65536gb-21,pserv-65536gb-22,pserv-65536gb-23,pserv-65536gb-24,zer0,max-hardware,nectar-net,CSEC,silver-helix,phantasy,neo-net,omega-net,comptek,crush-fitness,avmnite-02h,johnson-ortho,the-hub,netlink,summit-uni,catalyst,I.I.I.I,zb-institute,rothman-uni,syscore,rho-construction,alpha-ent,aevum-police,millenium-fitness,lexo-corp,galactic-cyber,global-pharm,snap-fitness,aerocorp,unitalife,deltaone,omnia,univ-energy,defcomm,icarus,solaris,zeus-med,infocomm,taiyang-digital,nova-med,zb-def,microdyne,run4theh111z,applied-energetics,titan-labs,vitalife,fulcrumtech,stormtech,helios,kuai-gong,omnitek,4sigma,.,b-and-a,clarkinc,powerhouse-fitness,blade,nwo,ecorp,fulcrumassets,The-Cave,megacorp,pserv-65536gb-0,pserv-65536gb-1,pserv-65536gb-2,pserv-65536gb-3,pserv-65536gb-4,pserv-65536gb-5,pserv-65536gb-6,pserv-65536gb-7,pserv-65536gb-8,pserv-65536gb-9,pserv-65536gb-10,pserv-65536gb-11,pserv-65536gb-12,pserv-65536gb-13,pserv-65536gb-14,pserv-65536gb-15,pserv-65536gb-16,pserv-65536gb-17,pserv-65536gb-18,pserv-65536gb-19,pserv-65536gb-20,pserv-65536gb-21,pserv-65536gb-22,pserv-65536gb-23,pserv-65536gb-24\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"rooted.txt\",\"text\":\"global-pharm,deltaone,zeus-med,univ-energy,nova-med,unitalife,aerocorp,icarus,zb-institute,applied-energetics,zb-def,solaris,galactic-cyber,titan-labs,lexo-corp,vitalife,alpha-ent,helios,catalyst,microdyne,rho-construction,snap-fitness,syscore,aevum-police,netlink,millenium-fitness,rothman-uni,comptek,summit-uni,the-hub,johnson-ortho,omega-net,silver-helix,crush-fitness,phantasy,iron-gym,max-hardware,zer0,neo-net,harakiri-sushi,hong-fang-tea,nectar-net,joesguns,sigma-cosmetics,foodnstuff,n00dles\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servers.txt\",\"text\":\"{\\\"home\\\":{\\\"n00dles - $1.75m - 1\\\":{},\\\"foodnstuff - $50.00m - 1\\\":{\\\"zer0 - $187.50m - 75\\\":{}},\\\"sigma-cosmetics - $57.50m - 5\\\":{\\\"max-hardware - $250.00m - 80\\\":{\\\"silver-helix - $1.13b - 150\\\":{\\\"comptek - $5.79b - 346\\\":{\\\"summit-uni - $5.26b - 442\\\":{},\\\"catalyst - $12.70b - 425\\\":{\\\"rho-construction - $12.50b - 522\\\":{},\\\"alpha-ent - $15.64b - 568\\\":{}},\\\"I.I.I.I - $0.00 - 353\\\":{\\\"aevum-police - $8.37b - 412\\\":{}}},\\\"crush-fitness - $1.12b - 271\\\":{\\\"zb-institute - $24.46b - 755\\\":{\\\"millenium-fitness - $6.25b - 517\\\":{\\\"galactic-cyber - $20.07b - 838\\\":{\\\"unitalife - $26.52b - 797\\\":{}},\\\"global-pharm - $38.80b - 828\\\":{\\\"deltaone - $35.50b - 810\\\":{\\\"univ-energy - $28.59b - 817\\\":{\\\"infocomm - $20.13b - 940\\\":{\\\"microdyne - $12.65b - 823\\\":{\\\"vitalife - $18.25b - 809\\\":{\\\"kuai-gong - $685.36b - 960\\\":{}}},\\\"run4theh111z - $0.00 - 531\\\":{\\\"fulcrumtech - $42.24b - 1027\\\":{}}},\\\"taiyang-digital - $22.38b - 898\\\":{\\\"applied-energetics - $24.31b - 840\\\":{\\\"stormtech - $25.30b - 973\\\":{\\\"omnitek - $409.21b - 1060\\\":{\\\"b-and-a - $629.81b - 900\\\":{},\\\"clarkinc - $558.34b - 1078\\\":{\\\"ecorp - $1.52t - 1071\\\":{},\\\"fulcrumassets - $25.00m - 1130\\\":{},\\\"The-Cave - $0.00 - 925\\\":{}},\\\"powerhouse-fitness - $22.50b - 1043\\\":{}},\\\"4sigma - $555.28b - 1212\\\":{\\\"blade - $385.02b - 1192\\\":{}}},\\\"helios - $14.87b - 807\\\":{\\\". - $0.00 - 518\\\":{\\\"nwo - $827.27b - 1028\\\":{\\\"megacorp - $1.48t - 1342\\\":{}}}}}}}}},\\\"snap-fitness - $11.25b - 751\\\":{\\\"omnia - $23.28b - 897\\\":{\\\"defcomm - $20.74b - 912\\\":{\\\"nova-med - $28.06b - 846\\\":{}},\\\"icarus - $24.76b - 873\\\":{},\\\"solaris - $20.08b - 850\\\":{\\\"zb-def - $23.54b - 802\\\":{\\\"titan-labs - $19.42b - 854\\\":{}}},\\\"zeus-med - $34.07b - 805\\\":{}}}}}},\\\"avmnite-02h - $0.00 - 213\\\":{\\\"rothman-uni - $6.17b - 392\\\":{\\\"lexo-corp - $18.31b - 665\\\":{\\\"aerocorp - $26.37b - 890\\\":{}}}}},\\\"phantasy - $600.00m - 100\\\":{\\\"johnson-ortho - $1.88b - 298\\\":{\\\"syscore - $10.89b - 581\\\":{}}}}},\\\"joesguns - $62.50m - 10\\\":{\\\"nectar-net - $68.75m - 20\\\":{\\\"neo-net - $125.00m - 50\\\":{\\\"the-hub - $4.73b - 299\\\":{}}}},\\\"hong-fang-tea - $75.00m - 30\\\":{\\\"CSEC - $0.00 - 54\\\":{\\\"omega-net - $1.52b - 212\\\":{\\\"netlink - $6.88b - 384\\\":{}}}},\\\"harakiri-sushi - $100.00m - 40\\\":{},\\\"iron-gym - $500.00m - 100\\\":{},\\\"darkweb - $0.00 - 1\\\":{}}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"money_rooted.txt\",\"text\":\"38804686075 global-pharm,35503113675 deltaone,34074460850 zeus-med,28589081850 univ-energy,28057848400 nova-med,26520810725 unitalife,26373283950 aerocorp,24756418225 icarus,24459877475 zb-institute,24306382775 applied-energetics,23537590850 zb-def,20076639375 solaris,20072165875 galactic-cyber,19420823750 titan-labs,18309599200 lexo-corp,18250168375 vitalife,15637436425 alpha-ent,14870379675 helios,12698433875 catalyst,12645692700 microdyne,12500281850 rho-construction,11250000000 snap-fitness,10885249900 syscore,8366476375 aevum-police,6875000000 netlink,6250000000 millenium-fitness,6171498925 rothman-uni,5791850125 comptek,5261681700 summit-uni,4733671250 the-hub,1881147250 johnson-ortho,1524514300 omega-net,1125000000 silver-helix,1122196525 crush-fitness,600000000 phantasy,500000000 iron-gym,250000000 max-hardware,187500000 zer0,125000000 neo-net,100000000 harakiri-sushi,75000000 hong-fang-tea,68750000 nectar-net,62500000 joesguns,57500000 sigma-cosmetics,50000000 foodnstuff,1750000 n00dles\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"28.5.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":60770301024,\"moneyMax\":1519257525600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1071,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-791060.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,10,4,3,0,4,6,0],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"57.9.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":59049918425,\"moneyMax\":1476247960625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1342,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"11.3.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76.406,\"minDifficulty\":25,\"moneyAvailable\":0,\"moneyMax\":629814864325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":900,\"serverGrowth\":65}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-567838.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[5,76,127,1,166,44,33,39,161,159,24,115,81,15,81,19,28,24,162,160,16,162,132,19,51,196,93,188,95,124,41,145,53,126,41,124,180,17,165,33,64,110,110,190,24,162,75,200,42,189]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"15.1.2.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":15400934383,\"moneyMax\":385023359575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1192,\"serverGrowth\":71}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-922141.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[5,-8,-8,10,-7,-5,-5,-9,7,-8,-10,10,4,-9,-10,1,0,-6,-4,8,-6,-2,7,6,0,-9,-6,-3,7,-6,-7,9,1,-8,3,-8,4,-2],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"41.9.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":33090961933,\"moneyMax\":827274048325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1028,\"serverGrowth\":81}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"71.6.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":22333677395,\"moneyMax\":558341934875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1078,\"serverGrowth\":53}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"36.6.4.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":16368544701,\"moneyMax\":409213617525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1060,\"serverGrowth\":96}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"61.3.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":22211047469,\"moneyMax\":555276186725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1212,\"serverGrowth\":75}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"89.2.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":39.956,\"minDifficulty\":32,\"moneyAvailable\":0,\"moneyMax\":685362056400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":960,\"serverGrowth\":95}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"87.7.8.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1689576578,\"moneyMax\":42239414450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1027,\"serverGrowth\":85}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"91.2.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1130,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-425853.cct\",\"type\":\"Total Ways to Sum\",\"data\":71,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-351348.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[108,135,36,77,134,120,35,93,32,3,174,148,22,188,172,25,96,92,163,160,198,75,61,68,184,146,111,113,61,91,87,63,103,54,133,11,167,170,111,60,49],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"76.8.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":82.536,\"minDifficulty\":27,\"moneyAvailable\":397315871,\"moneyMax\":25296989050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":973,\"serverGrowth\":74}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-820840-TheBlackHand.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[143,137,130,156,5,186,37,75,142,58,105,78,145,56,71,55,143,32,67,91,163,64,92,164,109,127,11,182,53,194,177],\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"74.6.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":829401884,\"moneyMax\":20735047100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":912,\"serverGrowth\":52}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"65.0.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":805025150,\"moneyMax\":20125628750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":940,\"serverGrowth\":73}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-592414.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[172,20,145,40],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"64.1.3.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":19.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4541.186245718087,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":84,\"ramUsage\":5.25,\"server\":\"helios\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1806,\"ramUsage\":1.75,\"server\":\"helios\",\"threads\":4,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1807,\"ramUsage\":1.75,\"server\":\"helios\",\"threads\":4,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":402,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":403,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":404,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"helios\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":405,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"helios\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":406,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"helios\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":908,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"applied-energetics\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":712.8726782109416,\"moneyMax\":14870379675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":807,\"serverGrowth\":79}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"3.9.5.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":40.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11492.099821744176,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":82,\"ramUsage\":5.25,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1844,\"ramUsage\":1.75,\"server\":\"vitalife\",\"threads\":10,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1845,\"ramUsage\":1.75,\"server\":\"vitalife\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":408,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"vitalife\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":411,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"vitalife\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"vitalife\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":906,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"microdyne\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":804.0701562072016,\"moneyMax\":18250168375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":809,\"serverGrowth\":64}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"6.2.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":869,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":870,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":871,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.25,\"server\":\"icarus\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":872,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":30,\"minDifficulty\":30,\"moneyAvailable\":105428346.74247561,\"moneyMax\":24756418225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":873,\"serverGrowth\":95}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"63.8.2.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":82.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25115.658558898438,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":76,\"ramUsage\":5.25,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1770,\"ramUsage\":1.75,\"server\":\"univ-energy\",\"threads\":22,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1771,\"ramUsage\":1.75,\"server\":\"univ-energy\",\"threads\":22,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"univ-energy\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":417,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"univ-energy\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"univ-energy\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":900,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":3493.9728270748615,\"moneyMax\":28589081850,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":817,\"serverGrowth\":86}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"23.2.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":8.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1135.2965614295217,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":80,\"ramUsage\":5.25,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":711.0100000000248,\"pid\":1713,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":711.0100000000248,\"pid\":1714,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":421,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":422,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"titan-labs\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":904,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":25,\"minDifficulty\":25,\"moneyAvailable\":4614641.74916608,\"moneyMax\":19420823750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":854,\"serverGrowth\":75}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"60.1.8.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":40.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11492.099821744176,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":86,\"ramUsage\":5.25,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1803,\"ramUsage\":1.75,\"server\":\"microdyne\",\"threads\":10,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1804,\"ramUsage\":1.75,\"server\":\"microdyne\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":424,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"microdyne\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":427,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"microdyne\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":428,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"microdyne\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":910,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"infocomm\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":22,\"minDifficulty\":22,\"moneyAvailable\":1328.0998279518592,\"moneyMax\":12645692700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":823,\"serverGrowth\":82}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-576129.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0],[0,1,0,0,0,0],[0,0,1,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[1,0,0,0,0,0],[0,0,0,1,0,0],[1,1,0,0,0,0],[0,0,0,1,0,0],[0,0,1,0,1,0],[0,1,1,0,0,0],[0,1,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"3.8.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":895070456,\"moneyMax\":22376761400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":898,\"serverGrowth\":79}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"83.0.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":431,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.25,\"server\":\"galactic-cyber\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"millenium-fitness\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":107105.8603973307,\"moneyMax\":20072165875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":838,\"serverGrowth\":85}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-157857.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0],[0,0,0],[1,1,0],[0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-817215.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":801188889,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"98.4.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":865,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":867,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.25,\"server\":\"aerocorp\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":31.818,\"minDifficulty\":29,\"moneyAvailable\":4.013434188760584,\"moneyMax\":26373283950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":890,\"serverGrowth\":56}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-900635.cct\",\"type\":\"Total Ways to Sum\",\"data\":29,\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-194762.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":268416557,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"50.7.6.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"icarus\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":931280130,\"moneyMax\":23282003250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":897,\"serverGrowth\":63}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"40.9.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":436,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"zb-def\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":437,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"zb-def\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":438,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.25,\"server\":\"zb-def\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":439,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"solaris\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":22,\"minDifficulty\":22,\"moneyAvailable\":3658.5025967420975,\"moneyMax\":23537590850,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":802,\"serverGrowth\":65}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-474698.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")(((((((((\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"34.3.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":441,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.25,\"server\":\"applied-energetics\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":443,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":68.572,\"minDifficulty\":21,\"moneyAvailable\":0,\"moneyMax\":24306382775,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":840,\"serverGrowth\":75}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-693761.cct\",\"type\":\"Array Jumping Game\",\"data\":[7,4,0,0,4,9,4,0,6,6,5,9,8,4,4,0,0,0,6,0,9,8,2],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"65.7.4.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":19.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4541.186245718087,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":79,\"ramUsage\":5.25,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1758,\"ramUsage\":1.75,\"server\":\"solaris\",\"threads\":4,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1759,\"ramUsage\":1.75,\"server\":\"solaris\",\"threads\":4,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":444,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"solaris\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":903,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":38.629999999999995,\"minDifficulty\":25,\"moneyAvailable\":0,\"moneyMax\":20076639375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":850,\"serverGrowth\":79}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"23.2.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":448,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":449,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":450,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"deltaone\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":451,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"deltaone\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":452,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.25,\"server\":\"deltaone\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":453,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"global-pharm\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":28.132000000000044,\"minDifficulty\":28,\"moneyAvailable\":2638.35226620527,\"moneyMax\":35503113675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":810,\"serverGrowth\":55}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"35.6.5.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":40.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11935.831872282932,\"onlineMoneyMade\":126272718,\"onlineRunningTime\":50935.21000001013,\"pid\":75,\"ramUsage\":5.25,\"server\":\"global-pharm\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1827,\"ramUsage\":1.75,\"server\":\"global-pharm\",\"threads\":10,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1828,\"ramUsage\":1.75,\"server\":\"global-pharm\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":456,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"global-pharm\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":457,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"global-pharm\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"global-pharm\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":899,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"millenium-fitness\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":28,\"minDifficulty\":28,\"moneyAvailable\":3063.098708654653,\"moneyMax\":38804686075,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":828,\"serverGrowth\":83}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"73.9.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.25,\"server\":\"nova-med\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":25,\"minDifficulty\":25,\"moneyAvailable\":2523316.067174144,\"moneyMax\":28057848400,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":846,\"serverGrowth\":70}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"29.0.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":465,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"zeus-med\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"zeus-med\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.25,\"server\":\"zeus-med\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":23,\"minDifficulty\":23,\"moneyAvailable\":8142.8284265393995,\"moneyMax\":34074460850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":805,\"serverGrowth\":77}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"89.4.6.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":8.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1135.2965614295217,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":77,\"ramUsage\":5.25,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1830,\"ramUsage\":1.75,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1831,\"ramUsage\":1.75,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"unitalife\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"unitalife\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"unitalife\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":901,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":5565.61912508445,\"moneyMax\":26520810725,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":797,\"serverGrowth\":74}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"92.8.9.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":82.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26124.01856979413,\"onlineMoneyMade\":2314511114,\"onlineRunningTime\":50935.21000001013,\"pid\":81,\"ramUsage\":5.25,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":711.0100000000248,\"pid\":1698,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"threads\":22,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":711.0100000000248,\"pid\":1699,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"threads\":22,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"lexo-corp\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"lexo-corp\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"lexo-corp\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":905,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":3704.5118783285156,\"moneyMax\":18309599200,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":665,\"serverGrowth\":61}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"92.8.2.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":19.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3650.3416045050526,\"onlineMoneyMade\":55090136,\"onlineRunningTime\":50935.21000001013,\"pid\":87,\"ramUsage\":5.25,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1752,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"threads\":4,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1753,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"threads\":4,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"rho-construction\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"rho-construction\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"rho-construction\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":911,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":15,\"minDifficulty\":15,\"moneyAvailable\":90113.25406128424,\"moneyMax\":12500281850,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":522,\"serverGrowth\":56}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-325924.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"4529415\",-50],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-950384.cct\",\"type\":\"Total Ways to Sum\",\"data\":98,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"40.4.8.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":40.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11492.099821744176,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":83,\"ramUsage\":5.25,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1728,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"threads\":10,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1729,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"alpha-ent\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"alpha-ent\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"alpha-ent\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":907,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":22.020000000000007,\"minDifficulty\":22,\"moneyAvailable\":6325.3422135631845,\"moneyMax\":15637436425,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":568,\"serverGrowth\":60}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"8.3.3.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":8.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1222.980040637843,\"onlineMoneyMade\":241860100,\"onlineRunningTime\":50935.21000001013,\"pid\":88,\"ramUsage\":5.25,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":711.0100000000248,\"pid\":1704,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":711.0100000000248,\"pid\":1705,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"aevum-police\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"aevum-police\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"aevum-police\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":912,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":25,\"minDifficulty\":25,\"moneyAvailable\":350.63960069497443,\"moneyMax\":8366476375,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":412,\"serverGrowth\":36}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-839342.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0],[1,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],[0,0,0],[0,1,0],[0,0,0],[0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"86.9.5.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":82.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26043.461937297652,\"onlineMoneyMade\":196029,\"onlineRunningTime\":50935.21000001013,\"pid\":91,\"ramUsage\":5.25,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1797,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":22,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1798,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":22,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"rothman-uni\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"rothman-uni\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"rothman-uni\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":915,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":15.011999999999999,\"minDifficulty\":15,\"moneyAvailable\":364652.3445593135,\"moneyMax\":6171498925,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":392,\"serverGrowth\":43}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-385287.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[1,44,25],[26,10,29],[20,19,48],[31,28,47]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-694548.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0,0,0],[0,0,1,1,0],[0,0,0,0,0],[1,0,0,1,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,1,0],[0,0,0,1,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,1,0],[0,0,0,1,0]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"85.3.4.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":8.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1135.2965614295217,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":78,\"ramUsage\":5.25,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1791,\"ramUsage\":1.75,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1792,\"ramUsage\":1.75,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"zb-institute\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"zb-institute\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"zb-institute\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":902,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":23,\"minDifficulty\":23,\"moneyAvailable\":5424.261982806997,\"moneyMax\":24459877475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":755,\"serverGrowth\":84}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"52.8.1.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":40.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11492.099821744176,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":92,\"ramUsage\":5.25,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1740,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":10,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1741,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"summit-uni\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"summit-uni\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"summit-uni\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":916,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":21,\"minDifficulty\":21,\"moneyAvailable\":14877.010817613038,\"moneyMax\":5261681700,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":442,\"serverGrowth\":52}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"48.7.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"syscore\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"syscore\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.25,\"server\":\"syscore\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":21,\"minDifficulty\":21,\"moneyAvailable\":3349.679248913531,\"moneyMax\":10885249900,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":581,\"serverGrowth\":68}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"50.3.9.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":40.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11492.099821744176,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":85,\"ramUsage\":5.25,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":711.0100000000248,\"pid\":1686,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":10,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":711.0100000000248,\"pid\":1687,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"catalyst\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"catalyst\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"catalyst\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":909,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"comptek\",\"rho-construction\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":22,\"minDifficulty\":22,\"moneyAvailable\":15341.264690523512,\"moneyMax\":12698433875,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":425,\"serverGrowth\":37}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"16.9.2.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"the-hub\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"the-hub\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"the-hub\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":917,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":15,\"minDifficulty\":15,\"moneyAvailable\":9966166.97773381,\"moneyMax\":4733671250,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":299,\"serverGrowth\":54}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"29.0.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"comptek\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"comptek\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.25,\"server\":\"comptek\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":21,\"minDifficulty\":21,\"moneyAvailable\":22636.849319283363,\"moneyMax\":5791850125,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":346,\"serverGrowth\":45}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"40.4.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":8.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1175.6358387512269,\"onlineMoneyMade\":6827,\"onlineRunningTime\":50935.21000001013,\"pid\":89,\"ramUsage\":5.25,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1776,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1777,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"netlink\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"netlink\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"netlink\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":913,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":22,\"minDifficulty\":22,\"moneyAvailable\":58533.042975666496,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":384,\"serverGrowth\":64}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-336579.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"))()))\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"5.2.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"johnson-ortho\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"johnson-ortho\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.25,\"server\":\"johnson-ortho\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":36,\"hackDifficulty\":12,\"minDifficulty\":12,\"moneyAvailable\":168598410.5532447,\"moneyMax\":1881147250,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":298,\"serverGrowth\":51}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"35.3.7.1\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"n00dles\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"n00dles\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.25,\"server\":\"n00dles\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.006,\"minDifficulty\":1,\"moneyAvailable\":1692869,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"43.4.3.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":8.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1135.2965614295217,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":106,\"ramUsage\":5.25,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1779,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1780,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"foodnstuff\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"foodnstuff\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"foodnstuff\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":49591746.727774546,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-281594.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"4910\",51],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"83.5.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":8.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1175.6358387512269,\"onlineMoneyMade\":8491,\"onlineRunningTime\":50935.21000001013,\"pid\":105,\"ramUsage\":5.25,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1809,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1810,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"sigma-cosmetics\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"sigma-cosmetics\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"sigma-cosmetics\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":929,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":51947685.48684782,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-880697-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[6,66,9,192,69,87,33,4,41,47,19,23,164,134,112,139,18,90,79,84,198,59,56,86,60,91,60,177,30,199,6,121,118,64,140,164,171,156,193,107,138,129,90,94,171,200,155],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"23.3.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":8.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1135.2965614295217,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":104,\"ramUsage\":5.25,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1785,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1786,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"joesguns\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"joesguns\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"joesguns\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":928,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":56934038.584885284,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"52.1.5.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":19.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4702.543355004907,\"onlineMoneyMade\":45682960,\"onlineRunningTime\":50935.21000001013,\"pid\":99,\"ramUsage\":5.25,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1835,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":4,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1836,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":4,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"zer0\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"zer0\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"zer0\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":923,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8.011999999999999,\"minDifficulty\":8,\"moneyAvailable\":174839216.63039038,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"93.8.5.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":8.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1135.2965614295217,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":103,\"ramUsage\":5.25,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1782,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1783,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"nectar-net\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"nectar-net\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"nectar-net\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":927,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"joesguns\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":67368906.99924053,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"61.7.5.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":19.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4891.920162551372,\"onlineMoneyMade\":968259240,\"onlineRunningTime\":50935.21000001013,\"pid\":100,\"ramUsage\":5.25,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":711.0100000000248,\"pid\":1701,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":4,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":711.0100000000248,\"pid\":1702,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":4,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"neo-net\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"neo-net\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"neo-net\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":924,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":121798895.81758419,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"11.8.6.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":40.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11935.831872282932,\"onlineMoneyMade\":125394962,\"onlineRunningTime\":50935.21000001013,\"pid\":95,\"ramUsage\":5.25,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1838,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":10,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1839,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"silver-helix\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"silver-helix\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"silver-helix\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":919,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"comptek\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":26990.674371578585,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"11.9.1.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":8.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1135.2965614295217,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":102,\"ramUsage\":5.25,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1749,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1750,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"hong-fang-tea\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"hong-fang-tea\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"hong-fang-tea\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":926,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":74171673.67776555,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-334802.cct\",\"type\":\"Array Jumping Game\",\"data\":[2,0,2,8,10,9,5,0,2,10,0],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-615305.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[17,24],[2,4],[11,15],[1,9],[7,10],[17,18],[1,6],[19,21],[19,28],[12,13],[3,13],[5,8]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"61.5.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":8.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1135.2965614295217,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":101,\"ramUsage\":5.25,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":711.0100000000248,\"pid\":1695,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":711.0100000000248,\"pid\":1696,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"harakiri-sushi\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"harakiri-sushi\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"harakiri-sushi\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":925,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":98735041.65709741,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-678975.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[9,6],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"27.6.4.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":19.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4541.186245718087,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":96,\"ramUsage\":5.25,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1731,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":4,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1732,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":4,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"phantasy\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":617,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"phantasy\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":618,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"phantasy\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":920,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7.198,\"minDifficulty\":7,\"moneyAvailable\":0,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"95.6.3.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":19.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4702.543355004907,\"onlineMoneyMade\":46002768,\"onlineRunningTime\":50935.21000001013,\"pid\":98,\"ramUsage\":5.25,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1824,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":4,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1825,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":4,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"max-hardware\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":623,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"max-hardware\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"max-hardware\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":922,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":241001915.1483176,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-559850-NiteSec.cct\",\"type\":\"Total Ways to Sum\",\"data\":78,\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"53.4.3.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":19.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4541.186245718087,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":94,\"ramUsage\":5.25,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1767,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":4,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1768,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":4,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"omega-net\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"omega-net\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"omega-net\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":918,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":368394209.8584744,\"moneyMax\":1524514300,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":212,\"serverGrowth\":31}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"31.0.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":634,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"crush-fitness\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"crush-fitness\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.25,\"server\":\"crush-fitness\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":14,\"minDifficulty\":14,\"moneyAvailable\":64215.2960940828,\"moneyMax\":1122196525,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":271,\"serverGrowth\":32}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"49.3.8.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":19.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4541.186245718087,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":97,\"ramUsage\":5.25,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1800,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":4,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1801,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":4,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":640,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"iron-gym\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":641,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"iron-gym\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"iron-gym\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":921,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":46462509.01626124,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-481701.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[6,2],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"82.8.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":8.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1135.2965614295217,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":90,\"ramUsage\":5.25,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///b9d89b3c-a6c4-444b-9391-1a7380f40b8f\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1722,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1723,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"millenium-fitness\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":647,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///68d7c4b0-9d9f-41cb-8980-b4f01325845d\"}],\"ramUsage\":6.05,\"server\":\"millenium-fitness\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":648,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"millenium-fitness\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":914,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":18,\"minDifficulty\":18,\"moneyAvailable\":1924.5926519412942,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":517,\"serverGrowth\":44}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-743451.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[157,190,114,60,184,156,84,185,24,41,171,106,125,146,122,65,174,43,34,97,170]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"3.8.2.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1043,\"serverGrowth\":53}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"8.2.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":651,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"snap-fitness\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"snap-fitness\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.25,\"server\":\"snap-fitness\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":17,\"minDifficulty\":17,\"moneyAvailable\":2973.6418894112494,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":751,\"serverGrowth\":52}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-740668.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[104,136,193,174,67,186,113,16,68,58,85,113,75],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-622267.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[72,175,130,37,181,79,70,74,131,179,93,86,62,125,187,156,165,164,118,92,192,26,190,180,22,47,7,146,18],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"45.7.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":531,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"55.6.0.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":353,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"13.8.1.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":213,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"0.8.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":518,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"3.0.9.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"hong-fang-tea\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":54,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"26.9.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"21.2.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-56060.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"15353126226\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-753710.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,1,0,0,0,0],[1,1,0,0,0,0,0,0,1,0,0,1],[0,0,0,0,0,0,0,0,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0,0],[0,0,1,0,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"41.2.7.6\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-65536gb-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-65536gb-0\",\"httpPortOpen\":false,\"ip\":\"12.3.6.1\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":43688.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"pserv-65536gb-0\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14220698.637335626,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":107,\"ramUsage\":5.25,\"server\":\"pserv-65536gb-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1716,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-0\",\"threads\":12481,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1717,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-0\",\"threads\":12481,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-0\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-0\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":657,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-65536gb-0\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":658,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-65536gb-0\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///66980069-e812-426f-a865-0dce4923881b\"}],\"ramUsage\":6.05,\"server\":\"pserv-65536gb-0\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"pserv-65536gb-0\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":931,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-65536gb-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-65536gb-1\",\"httpPortOpen\":false,\"ip\":\"12.1.5.1\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":43688.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"pserv-65536gb-1\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14220698.637335626,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":108,\"ramUsage\":5.25,\"server\":\"pserv-65536gb-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1812,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-1\",\"threads\":12481,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1813,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-1\",\"threads\":12481,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-1\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-1\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-65536gb-1\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":663,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-65536gb-1\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///66980069-e812-426f-a865-0dce4923881b\"}],\"ramUsage\":6.05,\"server\":\"pserv-65536gb-1\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"pserv-65536gb-1\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":932,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-65536gb-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-65536gb-2\",\"httpPortOpen\":false,\"ip\":\"73.9.5.8\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":43688.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"pserv-65536gb-2\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14220698.637335626,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":109,\"ramUsage\":5.25,\"server\":\"pserv-65536gb-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1788,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-2\",\"threads\":12481,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1789,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-2\",\"threads\":12481,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-2\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":666,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-2\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-65536gb-2\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":668,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-65536gb-2\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":669,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///66980069-e812-426f-a865-0dce4923881b\"}],\"ramUsage\":6.05,\"server\":\"pserv-65536gb-2\",\"_hash\":\"1c95770fe18e97e50b5d8f80ddffb19ba71eceb8b2c6864cbe6ac5b9be412bae\",\"moduleSequenceNumber\":670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"pserv-65536gb-2\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":933,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-65536gb-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-65536gb-3\",\"httpPortOpen\":false,\"ip\":\"59.9.4.0\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":43688.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"pserv-65536gb-3\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14783977.307769882,\"onlineMoneyMade\":684652982630,\"onlineRunningTime\":50935.21000001013,\"pid\":110,\"ramUsage\":5.25,\"server\":\"pserv-65536gb-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1719,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-3\",\"threads\":12481,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1720,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-3\",\"threads\":12481,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-3\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":671,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-3\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":672,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-65536gb-3\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-65536gb-3\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"pserv-65536gb-3\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":934,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-65536gb-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-65536gb-4\",\"httpPortOpen\":false,\"ip\":\"72.6.1.0\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":43688.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"pserv-65536gb-4\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14783977.307769882,\"onlineMoneyMade\":682546499716,\"onlineRunningTime\":50935.21000001013,\"pid\":111,\"ramUsage\":5.25,\"server\":\"pserv-65536gb-4\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":711.0100000000248,\"pid\":1710,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-4\",\"threads\":12481,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":711.0100000000248,\"pid\":1711,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-4\",\"threads\":12481,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-4\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-4\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-65536gb-4\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-65536gb-4\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"pserv-65536gb-4\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":935,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-65536gb-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-65536gb-5\",\"httpPortOpen\":false,\"ip\":\"11.9.8.3\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":43688.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"pserv-65536gb-5\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14738977.672364892,\"onlineMoneyMade\":26029930542,\"onlineRunningTime\":50935.21000001013,\"pid\":112,\"ramUsage\":5.25,\"server\":\"pserv-65536gb-5\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1841,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-5\",\"threads\":12481,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1842,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-5\",\"threads\":12481,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-5\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-5\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-65536gb-5\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-65536gb-5\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"pserv-65536gb-5\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":936,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-65536gb-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-65536gb-6\",\"httpPortOpen\":false,\"ip\":\"16.4.9.4\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":43688.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"pserv-65536gb-6\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14220698.637335626,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":113,\"ramUsage\":5.25,\"server\":\"pserv-65536gb-6\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1821,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-6\",\"threads\":12481,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1822,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-6\",\"threads\":12481,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-6\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-6\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-65536gb-6\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-65536gb-6\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"pserv-65536gb-6\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":937,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-65536gb-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-65536gb-7\",\"httpPortOpen\":false,\"ip\":\"68.0.3.6\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":43688.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"pserv-65536gb-7\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14220698.637335626,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":114,\"ramUsage\":5.25,\"server\":\"pserv-65536gb-7\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1794,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-7\",\"threads\":12481,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1795,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-7\",\"threads\":12481,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-7\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-7\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-65536gb-7\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-65536gb-7\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"pserv-65536gb-7\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":938,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-65536gb-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-65536gb-8\",\"httpPortOpen\":false,\"ip\":\"70.8.6.1\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":43688.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"pserv-65536gb-8\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14738977.67236489,\"onlineMoneyMade\":130754096,\"onlineRunningTime\":50935.21000001013,\"pid\":115,\"ramUsage\":5.25,\"server\":\"pserv-65536gb-8\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":711.0100000000248,\"pid\":1707,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-8\",\"threads\":12481,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":711.0100000000248,\"pid\":1708,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-8\",\"threads\":12481,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-8\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-8\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-65536gb-8\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-65536gb-8\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"pserv-65536gb-8\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":939,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-65536gb-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-65536gb-9\",\"httpPortOpen\":false,\"ip\":\"47.0.3.3\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":43688.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"pserv-65536gb-9\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14220698.637335626,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":116,\"ramUsage\":5.25,\"server\":\"pserv-65536gb-9\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1746,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-9\",\"threads\":12481,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1747,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-9\",\"threads\":12481,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-9\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-9\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-65536gb-9\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-65536gb-9\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"pserv-65536gb-9\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":940,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-65536gb-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-65536gb-10\",\"httpPortOpen\":false,\"ip\":\"54.8.4.2\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":43688.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"pserv-65536gb-10\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14220698.637335626,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":117,\"ramUsage\":5.25,\"server\":\"pserv-65536gb-10\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1764,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-10\",\"threads\":12481,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1765,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-10\",\"threads\":12481,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-10\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-10\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-65536gb-10\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-65536gb-10\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"pserv-65536gb-10\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":941,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-65536gb-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-65536gb-11\",\"httpPortOpen\":false,\"ip\":\"47.0.3.8\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":43688.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"pserv-65536gb-11\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15257256.707394158,\"onlineMoneyMade\":52746567900,\"onlineRunningTime\":50935.21000001013,\"pid\":118,\"ramUsage\":5.25,\"server\":\"pserv-65536gb-11\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":711.0100000000248,\"pid\":1692,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-11\",\"threads\":12481,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":711.0100000000248,\"pid\":1693,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-11\",\"threads\":12481,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-11\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-11\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-65536gb-11\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-65536gb-11\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"pserv-65536gb-11\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":942,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-65536gb-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-65536gb-12\",\"httpPortOpen\":false,\"ip\":\"55.1.4.7\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":43688.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"pserv-65536gb-12\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14220698.637335626,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":119,\"ramUsage\":5.25,\"server\":\"pserv-65536gb-12\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1847,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-12\",\"threads\":12481,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1848,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-12\",\"threads\":12481,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-12\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-12\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":708,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-65536gb-12\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-65536gb-12\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"pserv-65536gb-12\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":943,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-65536gb-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-65536gb-13\",\"httpPortOpen\":false,\"ip\":\"42.2.7.2\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":43688.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"pserv-65536gb-13\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14738977.672364892,\"onlineMoneyMade\":26373283950,\"onlineRunningTime\":50935.21000001013,\"pid\":120,\"ramUsage\":5.25,\"server\":\"pserv-65536gb-13\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1743,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-13\",\"threads\":12481,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1744,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-13\",\"threads\":12481,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-13\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-13\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-65536gb-13\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-65536gb-13\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"pserv-65536gb-13\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":944,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-65536gb-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-65536gb-14\",\"httpPortOpen\":false,\"ip\":\"55.3.5.2\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":43688.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"pserv-65536gb-14\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14220698.637335626,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":121,\"ramUsage\":5.25,\"server\":\"pserv-65536gb-14\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1761,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-14\",\"threads\":12481,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1762,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-14\",\"threads\":12481,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-14\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-14\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-65536gb-14\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":717,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-65536gb-14\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"pserv-65536gb-14\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":945,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-65536gb-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-65536gb-15\",\"httpPortOpen\":false,\"ip\":\"92.5.6.9\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":43688.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"pserv-65536gb-15\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14220698.637335626,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":122,\"ramUsage\":5.25,\"server\":\"pserv-65536gb-15\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1737,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-15\",\"threads\":12481,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1738,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-15\",\"threads\":12481,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-15\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-15\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-65536gb-15\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-65536gb-15\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"pserv-65536gb-15\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":946,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-65536gb-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-65536gb-16\",\"httpPortOpen\":false,\"ip\":\"25.9.1.7\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":43688.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"pserv-65536gb-16\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14220698.637335626,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":123,\"ramUsage\":5.25,\"server\":\"pserv-65536gb-16\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":711.0100000000248,\"pid\":1689,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-16\",\"threads\":12481,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":711.0100000000248,\"pid\":1690,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-16\",\"threads\":12481,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-16\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-16\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-65536gb-16\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-65536gb-16\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"pserv-65536gb-16\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":947,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-65536gb-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-65536gb-17\",\"httpPortOpen\":false,\"ip\":\"19.0.9.6\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":43688.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"pserv-65536gb-17\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14220698.637335626,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":124,\"ramUsage\":5.25,\"server\":\"pserv-65536gb-17\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1818,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-17\",\"threads\":12481,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1819,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-17\",\"threads\":12481,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-17\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-17\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-65536gb-17\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-65536gb-17\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"pserv-65536gb-17\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":948,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-65536gb-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-65536gb-18\",\"httpPortOpen\":false,\"ip\":\"30.7.8.9\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":43688.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"pserv-65536gb-18\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14220698.637335626,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":125,\"ramUsage\":5.25,\"server\":\"pserv-65536gb-18\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1734,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-18\",\"threads\":12481,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1735,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-18\",\"threads\":12481,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-18\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-18\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-65536gb-18\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-65536gb-18\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"pserv-65536gb-18\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":949,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-65536gb-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-65536gb-19\",\"httpPortOpen\":false,\"ip\":\"13.9.5.0\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":43688.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"pserv-65536gb-19\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14220698.637335626,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":126,\"ramUsage\":5.25,\"server\":\"pserv-65536gb-19\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1773,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-19\",\"threads\":12481,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1774,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-19\",\"threads\":12481,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-19\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-19\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-65536gb-19\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-65536gb-19\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"pserv-65536gb-19\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":950,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-65536gb-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-65536gb-20\",\"httpPortOpen\":false,\"ip\":\"94.3.3.6\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":43688.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"pserv-65536gb-20\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14220698.637335626,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":127,\"ramUsage\":5.25,\"server\":\"pserv-65536gb-20\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1725,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-20\",\"threads\":12481,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1726,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-20\",\"threads\":12481,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-20\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-20\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-65536gb-20\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-65536gb-20\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"pserv-65536gb-20\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":951,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-65536gb-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-65536gb-21\",\"httpPortOpen\":false,\"ip\":\"48.0.3.2\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":43688.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"pserv-65536gb-21\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14783977.307769882,\"onlineMoneyMade\":685362056400,\"onlineRunningTime\":50935.21000001013,\"pid\":128,\"ramUsage\":5.25,\"server\":\"pserv-65536gb-21\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":711.0100000000248,\"pid\":1683,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-21\",\"threads\":12481,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":711.0100000000248,\"pid\":1684,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-21\",\"threads\":12481,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-21\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-21\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-65536gb-21\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-65536gb-21\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"pserv-65536gb-21\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":952,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-65536gb-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-65536gb-22\",\"httpPortOpen\":false,\"ip\":\"79.7.9.9\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":43688.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"pserv-65536gb-22\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14738977.67236489,\"onlineMoneyMade\":26318193814,\"onlineRunningTime\":50935.21000001013,\"pid\":129,\"ramUsage\":5.25,\"server\":\"pserv-65536gb-22\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1755,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-22\",\"threads\":12481,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1756,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-22\",\"threads\":12481,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-22\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":747,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-22\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":748,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-65536gb-22\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-65536gb-22\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":750,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"pserv-65536gb-22\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":953,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-65536gb-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-65536gb-23\",\"httpPortOpen\":false,\"ip\":\"99.0.7.4\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":43688.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"pserv-65536gb-23\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14220698.637335626,\"onlineMoneyMade\":0,\"onlineRunningTime\":50935.21000001013,\"pid\":130,\"ramUsage\":5.25,\"server\":\"pserv-65536gb-23\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1815,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-23\",\"threads\":12481,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1816,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-23\",\"threads\":12481,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-23\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":751,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-23\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-65536gb-23\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-65536gb-23\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"pserv-65536gb-23\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":954,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-65536gb-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-65536gb-24\",\"httpPortOpen\":false,\"ip\":\"84.4.8.9\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":43688.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"pserv-65536gb-24\"],\"dataMap\":{},\"filename\":\"skill_up.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14783977.307769882,\"onlineMoneyMade\":2418995744,\"onlineRunningTime\":50935.21000001013,\"pid\":131,\"ramUsage\":5.25,\"server\":\"pserv-65536gb-24\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1850,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-24\",\"threads\":12481,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":710.8100000000247,\"pid\":1851,\"ramUsage\":1.75,\"server\":\"pserv-65536gb-24\",\"threads\":12481,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-24\",\"_hash\":\"24b801e9ee87086074560ebced9388c74cdea365c2a4c3ce0b0e62c33886dce0\",\"moduleSequenceNumber\":755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-65536gb-24\",\"_hash\":\"73f96788f32028c3ad0322df568c85583b37646d47095f7a0556f1cde92cb636\",\"moduleSequenceNumber\":756,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-65536gb-24\",\"_hash\":\"9102ca5b89b86593e976bba01069d2eb616c657a0fed17d41bdbfca51f6240e2\",\"moduleSequenceNumber\":757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-65536gb-24\",\"_hash\":\"e363b539c93ecbb1f405ffd389cda02f412709b3a6bbed94a51b753598da12ee\",\"moduleSequenceNumber\":758,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // ns.tail();\\n\\n    const HOST = ns.args[0] || 'home';\\n\\n    ns.scriptKill('daemon.js', HOST);\\n    ns.scriptKill('daemon_fml.js', HOST);\\n    ns.scriptKill('hack.script', HOST);\\n    ns.scriptKill('weaken.script', HOST);\\n    ns.scriptKill('grow.script', HOST);\\n\\n    if (HOST === 'home') {\\n        ns.scriptKill('stocks_V2.js', HOST);\\n        ns.exec('stocks_V2.js', HOST);\\n    } else {\\n        let files = ['weaken.script', 'grow.script', 'hack.script', 'skill_up.js'];\\n        await ns.scp(files, 'home', HOST);\\n    }\\n\\n    const RAM =\\n        ns.getServerMaxRam(HOST) -\\n        ns.getServerUsedRam(HOST) -\\n        (HOST === 'home' ? ns.getScriptRam('stocks_V2.js') + ns.getScriptRam('refresh_servers.js') : 1);\\n\\n    let roots = [];\\n    let nodes = {};\\n    let currTarget = '';\\n    let numThreads = 0;\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let money = ns.getServerMoneyAvailable(childNode);\\n                let rooted = ns.hasRootAccess(childNode);\\n                let childName = `${childNode}|${money}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n\\n        return currTarget.split('|')[0];\\n    }\\n\\n    function buildNodes() {\\n        currTarget = '0|0';\\n        roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n        nodes = {\\n            home: roots.reduce((obj, node) => {\\n                let money = ns.getServerMaxMoney(node);\\n                let rooted = ns.hasRootAccess(node);\\n                let childName = `${node}|${money}`;\\n\\n                if (rooted && +currTarget.split('|')[1] < +money) {\\n                    currTarget = childName;\\n                }\\n\\n                obj[childName] = {};\\n                return obj;\\n            }, {})\\n        };\\n\\n        roots.unshift('home');\\n\\n        Object.keys(nodes.home).forEach((node) => {\\n            traverseNodes(nodes.home[node], node.split('|')[0]);\\n        });\\n    }\\n\\n    let target, amount;\\n    while (true) {\\n        ns.exec('nuke_servers.js', HOST);\\n\\n        buildNodes();\\n        [target, amount] = currTarget.split('|');\\n\\n        if (HOST === 'home') {\\n            ns.exec('hack.script', HOST, Math.floor(RAM / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('hack.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        } else {\\n            const ram3 = Math.floor(RAM / 3);\\n            ns.exec('weaken.script', HOST, Math.floor(ram3 / ns.getScriptRam('weaken.script')), target);\\n            ns.exec('grow.script', HOST, Math.floor(ram3 / ns.getScriptRam('grow.script')), target);\\n            ns.exec('hack.script', HOST, Math.floor(ram3 / ns.getScriptRam('hack.script')), target);\\n\\n            while (ns.isRunning('weaken.script', HOST, target)) {\\n                await ns.sleep(1000);\\n            }\\n        }\\n\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"skill_up.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"skill_up.js\",\"url\":\"blob:file:///808b5a4e-940f-438d-a261-86877815bd65\"}],\"ramUsage\":5.25,\"server\":\"pserv-65536gb-24\",\"_hash\":\"8c914af1ccb85ea8df1d98e82a2dc121ab504d14c28bc4d36c89950a0f8117b0\",\"moduleSequenceNumber\":955,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":1088833.9260053548}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":118.4655,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":351206.58010137395}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":65824.82230127325}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":61.272,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":185380.7568135483}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":50.1879,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":145755.37055426947}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{\"c\":\"clear\",\"ch\":\"connect home\"}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":12815.033610150249,\"lastPrice\":12834.127303901,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.44,\"b\":false,\"otlkMag\":6.6087981995275245,\"otlkMagForecast\":30.54617547097705,\"cap\":292843345,\"spreadPerc\":0.5,\"shareTxForMovement\":46291,\"shareTxUntilMovement\":46291,\"totalShares\":103100000,\"maxShares\":20600000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":33653.77705985521,\"lastPrice\":33708.477721220595,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.48,\"b\":false,\"otlkMag\":5.8411421024950965,\"otlkMagForecast\":30.039578415663435,\"cap\":503417316,\"spreadPerc\":0.1,\"shareTxForMovement\":43961,\"shareTxUntilMovement\":34596,\"totalShares\":99600000,\"maxShares\":19900000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":24433.69816248813,\"lastPrice\":24375.91829360607,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":6.436856991941711,\"otlkMagForecast\":37.544558623519016,\"cap\":334997340,\"spreadPerc\":0.1,\"shareTxForMovement\":64088,\"shareTxUntilMovement\":59862,\"totalShares\":110500000,\"maxShares\":22100000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":25688.08256323922,\"lastPrice\":25625.604990289663,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":5.025186951010656,\"otlkMagForecast\":60.16052431949263,\"cap\":258051881,\"spreadPerc\":0.5,\"shareTxForMovement\":32025,\"shareTxUntilMovement\":14285,\"totalShares\":101200000,\"maxShares\":20200000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":328840.85147327016,\"lastPrice\":328074.3043928095,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":7.061160875313969,\"otlkMagForecast\":61.507416833705236,\"cap\":990127801,\"spreadPerc\":0.2,\"shareTxForMovement\":80535,\"shareTxUntilMovement\":60675,\"totalShares\":42800000,\"maxShares\":8600000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":5607665.124548245,\"lastPrice\":5587420.363717141,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.07,\"b\":true,\"otlkMag\":12.40953353220203,\"otlkMagForecast\":69.01272942057923,\"cap\":224106786,\"spreadPerc\":0.9,\"shareTxForMovement\":31228,\"shareTxUntilMovement\":26188,\"totalShares\":27600000,\"maxShares\":5500000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":64520.80259627028,\"lastPrice\":64684.6647093347,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":6.194070821090172,\"otlkMagForecast\":35.34232490573973,\"cap\":346035394,\"spreadPerc\":0.7,\"shareTxForMovement\":66862,\"shareTxUntilMovement\":34492,\"totalShares\":85200000,\"maxShares\":17000000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":151557.68877892385,\"lastPrice\":152224.86237825293,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.3,\"b\":false,\"otlkMag\":7.195602792488912,\"otlkMagForecast\":41.460720884834096,\"cap\":363366398,\"spreadPerc\":0.3,\"shareTxForMovement\":47100,\"shareTxUntilMovement\":35520,\"totalShares\":59500000,\"maxShares\":11900000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":4502.637050960687,\"lastPrice\":4514.987122862943,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":true,\"otlkMag\":6.303962808224725,\"otlkMagForecast\":58.700964895146114,\"cap\":390165697,\"spreadPerc\":0.8,\"shareTxForMovement\":43459,\"shareTxUntilMovement\":43459,\"totalShares\":51400000,\"maxShares\":10300000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":12315.55385922656,\"lastPrice\":12288.0909917871,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":true,\"otlkMag\":5.668168722407592,\"otlkMagForecast\":59.25551818426704,\"cap\":178220573,\"spreadPerc\":0.7,\"shareTxForMovement\":57252,\"shareTxUntilMovement\":27338,\"totalShares\":68500000,\"maxShares\":13700000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":4182.100062298195,\"lastPrice\":4190.172167286299,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":true,\"otlkMag\":6.851405625193026,\"otlkMagForecast\":56.964722256870594,\"cap\":250814077,\"spreadPerc\":0.9,\"shareTxForMovement\":69105,\"shareTxUntilMovement\":69105,\"totalShares\":79300000,\"maxShares\":15900000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":2067.810956101765,\"lastPrice\":2072.8524686789196,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":5.1311561948021405,\"otlkMagForecast\":58.6316839885102,\"cap\":189072671,\"spreadPerc\":0.8,\"shareTxForMovement\":52679,\"shareTxUntilMovement\":9587,\"totalShares\":72000000,\"maxShares\":14400000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":4763.110652399155,\"lastPrice\":4752.328665557244,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":false,\"otlkMag\":6.653055151982988,\"otlkMagForecast\":40.39589015642948,\"cap\":308351467,\"spreadPerc\":0.8,\"shareTxForMovement\":70456,\"shareTxUntilMovement\":49692,\"totalShares\":63300000,\"maxShares\":12700000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":23739.047718897567,\"lastPrice\":23784.867781222725,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":false,\"otlkMag\":7.053006573981273,\"otlkMagForecast\":37.26055835547287,\"cap\":296823572,\"spreadPerc\":1,\"shareTxForMovement\":86503,\"shareTxUntilMovement\":55029,\"totalShares\":47700000,\"maxShares\":9500000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":48154.79505046681,\"lastPrice\":48053.90741968228,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":5.236552491981486,\"otlkMagForecast\":56.219917397153836,\"cap\":145231458,\"spreadPerc\":1,\"shareTxForMovement\":50213,\"shareTxUntilMovement\":50213,\"totalShares\":41400000,\"maxShares\":8300000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":5573.049068493923,\"lastPrice\":5586.259239309737,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":6.139374887891493,\"otlkMagForecast\":56.70361312962429,\"cap\":47492811,\"spreadPerc\":0.8,\"shareTxForMovement\":98155,\"shareTxUntilMovement\":98155,\"totalShares\":72400000,\"maxShares\":14500000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":11202.881715107731,\"lastPrice\":11176.012020191461,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":6.931322497851245,\"otlkMagForecast\":42.5868004093003,\"cap\":419664200,\"spreadPerc\":0.7,\"shareTxForMovement\":73565,\"shareTxUntilMovement\":47300,\"totalShares\":27600000,\"maxShares\":5500000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":18321.102703118504,\"lastPrice\":18358.946871901237,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":6.912051664668161,\"otlkMagForecast\":57.945766368461655,\"cap\":378764530,\"spreadPerc\":0.7,\"shareTxForMovement\":102645,\"shareTxUntilMovement\":64730,\"totalShares\":43500000,\"maxShares\":8700000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":17724.302470338647,\"lastPrice\":17771.117066562725,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":false,\"otlkMag\":5.956301573239288,\"otlkMagForecast\":42.87938410635693,\"cap\":251908803,\"spreadPerc\":1,\"shareTxForMovement\":118087,\"shareTxUntilMovement\":118087,\"totalShares\":24500000,\"maxShares\":4900000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":6146.292921335899,\"lastPrice\":6199.365594291894,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.55,\"b\":false,\"otlkMag\":7.878726317775255,\"otlkMagForecast\":46.018503236564584,\"cap\":76369487,\"spreadPerc\":1,\"shareTxForMovement\":44918,\"shareTxUntilMovement\":15764,\"totalShares\":54700000,\"maxShares\":10900000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":1083.3949292415346,\"lastPrice\":1087.6505440775659,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.16,\"b\":true,\"otlkMag\":6.880539803737581,\"otlkMagForecast\":56.77040376454906,\"cap\":63133427,\"spreadPerc\":0.8,\"shareTxForMovement\":49016,\"shareTxUntilMovement\":49016,\"totalShares\":43000000,\"maxShares\":8600000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":1172.0115787188024,\"lastPrice\":1169.2795518130577,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":1.6068007867825744,\"otlkMagForecast\":49.417769491142174,\"cap\":43358172,\"spreadPerc\":0.8,\"shareTxForMovement\":100618,\"shareTxUntilMovement\":100618,\"totalShares\":50900000,\"maxShares\":10200000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":5693.099970178797,\"lastPrice\":5727.800718593396,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.8,\"b\":false,\"otlkMag\":8.216555372835307,\"otlkMagForecast\":43.204047727460306,\"cap\":125135248,\"spreadPerc\":0.8,\"shareTxForMovement\":75901,\"shareTxUntilMovement\":67049,\"totalShares\":45500000,\"maxShares\":9100000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":1511.957003110964,\"lastPrice\":1520.3535518922067,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.64,\"b\":true,\"otlkMag\":5.915856052927102,\"otlkMagForecast\":54.42803347753051,\"cap\":10251788,\"spreadPerc\":0.7,\"shareTxForMovement\":24573,\"shareTxUntilMovement\":24573,\"totalShares\":35100000,\"maxShares\":7000000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":1560.3132174265836,\"lastPrice\":1555.7825220210486,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.86,\"b\":true,\"otlkMag\":1.3557997375118824,\"otlkMagForecast\":51.74685640947937,\"cap\":66914170,\"spreadPerc\":0.5,\"shareTxForMovement\":73352,\"shareTxUntilMovement\":73352,\"totalShares\":41600000,\"maxShares\":8300000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":145.3754308544643,\"lastPrice\":146.7242667164125,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.74,\"b\":false,\"otlkMag\":7.332299539390014,\"otlkMagForecast\":46.884197564825214,\"cap\":33299211,\"spreadPerc\":1.1,\"shareTxForMovement\":36617,\"shareTxUntilMovement\":36617,\"totalShares\":11900000,\"maxShares\":2400000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":4057.987620205303,\"lastPrice\":4045.248317391307,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.93,\"b\":false,\"otlkMag\":5.2793032823380335,\"otlkMagForecast\":41.942291435401934,\"cap\":16271837,\"spreadPerc\":0.4,\"shareTxForMovement\":73313,\"shareTxUntilMovement\":73313,\"totalShares\":11000000,\"maxShares\":2200000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":1222.161201021171,\"lastPrice\":1219.1887072429788,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":3.122783594889031,\"otlkMagForecast\":52.812208914170704,\"cap\":7392816,\"spreadPerc\":0.6,\"shareTxForMovement\":79344,\"shareTxUntilMovement\":79344,\"totalShares\":17300000,\"maxShares\":3500000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":25896.826784323614,\"lastPrice\":25712.243082021192,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.12,\"b\":true,\"otlkMag\":7.061642810285806,\"otlkMagForecast\":56.92134466429344,\"cap\":45508938,\"spreadPerc\":0.8,\"shareTxForMovement\":39411,\"shareTxUntilMovement\":37692,\"totalShares\":13800000,\"maxShares\":2800000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":58328.22520016051,\"lastPrice\":58762.754403468454,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.2,\"b\":false,\"otlkMag\":11.773130886782335,\"otlkMagForecast\":35.34395189137857,\"cap\":1494832,\"spreadPerc\":1.1,\"shareTxForMovement\":24015,\"shareTxUntilMovement\":17675,\"totalShares\":72200000,\"maxShares\":14400000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":315.8607400856065,\"lastPrice\":314.4445769774836,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.33,\"b\":true,\"otlkMag\":6.8942541872531535,\"otlkMagForecast\":70.32655602178161,\"cap\":17095596,\"spreadPerc\":1.1,\"shareTxForMovement\":53552,\"shareTxUntilMovement\":35652,\"totalShares\":125800000,\"maxShares\":25200000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":51891.48701912457,\"lastPrice\":52023.274727442695,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":7.829015246544421,\"otlkMagForecast\":58.391006888628056,\"cap\":137874780,\"spreadPerc\":0.9,\"shareTxForMovement\":180216,\"shareTxUntilMovement\":50334,\"totalShares\":17500000,\"maxShares\":3500000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":68347.5083959748,\"lastPrice\":68206.6204321028,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":13.605384846721448,\"otlkMagForecast\":35.978369793762184,\"cap\":294648552,\"spreadPerc\":0.3,\"shareTxForMovement\":211755,\"shareTxUntilMovement\":115955,\"totalShares\":28800000,\"maxShares\":5800000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":754548,\"lastUpdate\":1643123917674,\"ticksUntilCycle\":6}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":20,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":200,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"}}","VersionSave":"9","AllGangsSave":"","LastExportBonus":"1642877643608","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}
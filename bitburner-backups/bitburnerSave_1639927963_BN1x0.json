{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":273,\"hp\":15,\"max_hp\":15,\"strength\":57,\"defense\":57,\"dexterity\":62,\"agility\":62,\"charisma\":96,\"intelligence\":0,\"hacking_chance_mult\":1.01,\"hacking_speed_mult\":1.01,\"hacking_money_mult\":1.01,\"hacking_grow_mult\":1.01,\"hacking_exp\":2455376.244601469,\"strength_exp\":2550.77722000055,\"defense_exp\":2550.77722000055,\"dexterity_exp\":2762.87722000055,\"agility_exp\":2762.87722000055,\"charisma_exp\":9785.050184988972,\"intelligence_exp\":0,\"hacking_mult\":1.01,\"strength_mult\":1.01,\"defense_mult\":1.01,\"dexterity_mult\":1.0605,\"agility_mult\":1.0605,\"charisma_mult\":1.01,\"hacking_exp_mult\":1.01,\"strength_exp_mult\":1.01,\"defense_exp_mult\":1.01,\"dexterity_exp_mult\":1.01,\"agility_exp_mult\":1.01,\"charisma_exp_mult\":1.01,\"company_rep_mult\":1.01,\"faction_rep_mult\":1.01,\"money\":703255099.2144587,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{\"FoodNStuff\":\"Employee\",\"Joe's Guns\":\"Employee\",\"Nova Medical\":\"Software Consultant\"},\"companyName\":\"Nova Medical\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9263.022304799582,\"onlineTimeSeconds\":309075.20000391855,\"ram\":64,\"totalMoneyGenerated\":1316177618.0603569,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9263.022304799582,\"onlineTimeSeconds\":307766.00000391377,\"ram\":64,\"totalMoneyGenerated\":1312568386.4600537,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9263.022304799582,\"onlineTimeSeconds\":307765.6000039138,\"ram\":64,\"totalMoneyGenerated\":1519369987.3286445,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9263.022304799582,\"onlineTimeSeconds\":307764.80000391376,\"ram\":64,\"totalMoneyGenerated\":1465786323.8545582,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9263.022304799582,\"onlineTimeSeconds\":307764.60000391374,\"ram\":64,\"totalMoneyGenerated\":1250806048.1584573,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9263.022304799582,\"onlineTimeSeconds\":307764.4000039138,\"ram\":64,\"totalMoneyGenerated\":1266237640.4730256,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9263.022304799582,\"onlineTimeSeconds\":301056.40000390453,\"ram\":64,\"totalMoneyGenerated\":1283992895.2916543,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9263.022304799582,\"onlineTimeSeconds\":169776.19999953266,\"ram\":64,\"totalMoneyGenerated\":1242648874.2842758,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9263.022304799582,\"onlineTimeSeconds\":169112.59999954232,\"ram\":64,\"totalMoneyGenerated\":1241276629.8513827,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9263.022304799582,\"onlineTimeSeconds\":166790.5999995761,\"ram\":64,\"totalMoneyGenerated\":1240955492.3158965,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9263.022304799582,\"onlineTimeSeconds\":159501.59999960783,\"ram\":64,\"totalMoneyGenerated\":1219210251.1726654,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9263.022304799582,\"onlineTimeSeconds\":153982.9999996517,\"ram\":64,\"totalMoneyGenerated\":1215472688.430232,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9263.022304799582,\"onlineTimeSeconds\":142635.19999961124,\"ram\":64,\"totalMoneyGenerated\":1224123166.9271727,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9263.022304799582,\"onlineTimeSeconds\":140351.99999960294,\"ram\":64,\"totalMoneyGenerated\":1201186795.6996207,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9263.022304799582,\"onlineTimeSeconds\":139262.199999599,\"ram\":64,\"totalMoneyGenerated\":1215730907.8908315,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9263.022304799582,\"onlineTimeSeconds\":137952.99999959924,\"ram\":64,\"totalMoneyGenerated\":1193657380.867702,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9263.022304799582,\"onlineTimeSeconds\":135121.5999996018,\"ram\":64,\"totalMoneyGenerated\":1189881093.7947047,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9263.022304799582,\"onlineTimeSeconds\":132754.19999960047,\"ram\":64,\"totalMoneyGenerated\":1157801418.4842577,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9263.022304799582,\"onlineTimeSeconds\":80018.39999991878,\"ram\":64,\"totalMoneyGenerated\":728672068.9697206,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9263.022304799582,\"onlineTimeSeconds\":78655.79999993861,\"ram\":64,\"totalMoneyGenerated\":728545985.0412979,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9263.022304799582,\"onlineTimeSeconds\":78655.39999993861,\"ram\":64,\"totalMoneyGenerated\":728533018.3250713,\"name\":\"hacknet-node-20\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Sector-12\",\"Netburners\",\"CyberSec\",\"Aevum\",\"Tian Di Hui\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":2,\"name\":\"NeuroFlux Governor\"},{\"level\":3,\"name\":\"NeuroFlux Governor\"},{\"level\":4,\"name\":\"NeuroFlux Governor\"},{\"level\":5,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"NeuroFlux Governor\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":-2.25,\"crime_money_mult\":1.01,\"crime_success_mult\":1.01,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":28800000,\"work_money_mult\":1.01,\"hacknet_node_money_mult\":1.01,\"hacknet_node_purchase_cost_mult\":0.99,\"hacknet_node_ram_cost_mult\":0.99,\"hacknet_node_core_cost_mult\":0.99,\"hacknet_node_level_cost_mult\":0.99,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1639927962606,\"totalPlaytime\":392063000,\"playtimeSinceLastAug\":309115000,\"playtimeSinceLastBitnode\":392063000,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-9911000,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":1248360,\"gang\":0,\"hacking\":4027908914.486363,\"hacknet\":24942634673.91233,\"hacknet_expenses\":-8981925419.543634,\"hospitalization\":-1878000,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":703254099.2144587,\"work\":16405103.769985141,\"servers\":-4643203741.804813,\"other\":-62400000,\"augmentations\":-14585624789.418129}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-9911000,\"class\":-73920,\"codingcontract\":0,\"corporation\":0,\"crime\":1248360,\"gang\":0,\"hacking\":4029823088.1854167,\"hacknet\":25070910857.039494,\"hacknet_expenses\":-9104613196.788073,\"hospitalization\":-1879790.2560754083,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":705428504.040312,\"work\":19588173.77003189,\"servers\":-4647514276.312332,\"other\":-62600000,\"augmentations\":-14589549789.418129}},\"scriptProdSinceLastAug\":3869219021,\"exploits\":[],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"95.5.4.6\",\"isConnectedTo\":true,\"maxRam\":2048,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"AutoLink.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"DeepscanV1.exe\",\"DeepscanV2.exe\",\"ServerProfiler.exe\"],\"ramUsed\":1665,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"home\",819],\"dataMap\":{},\"filename\":\"daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1644.894,\"onlineMoneyMade\":3149280,\"onlineRunningTime\":41018.40999999629,\"pid\":78,\"ramUsage\":7.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"home\",819],\"dataMap\":{},\"filename\":\"daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41018.40999999629,\"pid\":79,\"ramUsage\":7.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"home\",819],\"dataMap\":{},\"filename\":\"daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41018.40999999629,\"pid\":80,\"ramUsage\":7.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"home\",819],\"dataMap\":{},\"filename\":\"daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41018.40999999629,\"pid\":81,\"ramUsage\":7.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"home\",819],\"dataMap\":{},\"filename\":\"daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41018.40999999629,\"pid\":82,\"ramUsage\":7.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"home\",819],\"dataMap\":{},\"filename\":\"daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41018.40999999629,\"pid\":83,\"ramUsage\":7.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"home\",819],\"dataMap\":{},\"filename\":\"daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41018.40999999629,\"pid\":84,\"ramUsage\":7.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"home\",819],\"dataMap\":{},\"filename\":\"daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41018.40999999629,\"pid\":85,\"ramUsage\":7.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"home\",819],\"dataMap\":{},\"filename\":\"daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41018.40999999629,\"pid\":86,\"ramUsage\":7.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"home\",819],\"dataMap\":{},\"filename\":\"daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41018.40999999629,\"pid\":87,\"ramUsage\":7.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"home\",819],\"dataMap\":{},\"filename\":\"daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41018.40999999629,\"pid\":88,\"ramUsage\":7.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"home\",819],\"dataMap\":{},\"filename\":\"daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":32896.89,\"onlineMoneyMade\":0,\"onlineRunningTime\":41018.40999999629,\"pid\":89,\"ramUsage\":7.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"home\",819],\"dataMap\":{},\"filename\":\"daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41018.40999999629,\"pid\":90,\"ramUsage\":7.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"home\",819],\"dataMap\":{},\"filename\":\"daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41018.40999999629,\"pid\":91,\"ramUsage\":7.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"home\",819],\"dataMap\":{},\"filename\":\"daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":41752.53,\"onlineMoneyMade\":0,\"onlineRunningTime\":41018.40999999629,\"pid\":92,\"ramUsage\":7.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":270.4099999999932,\"pid\":176,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":66}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":270.4099999999932,\"pid\":177,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":819}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\ttarget = target || 'foodnstuff';\\n\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.45;\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(target);\\n\\t}\\n\\t\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(target);\\n\\t}\\n\\n\\tns.nuke(target);\\n\\n\\tlet moneyThreshOverride = 0;\\n\\tlet securityThreshOverride = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (!securityThreshOverride && ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tsecurityThreshOverride = 4;\\n\\t\\t} else if (!moneyThreshOverride && ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tlet percentGrowth = await ns.grow(target);\\n\\t\\t\\tif (percentGrowth < 1) {\\n\\t\\t\\t\\tmoneyThreshOverride = 10;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tmoneyThreshOverride = 4;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t\\tif (securityThreshOverride) {\\n\\t\\t\\tsecurityThreshOverride--\\n\\t\\t}\\n\\n\\t\\tif (moneyThreshOverride) {\\n\\t\\t\\tmoneyThreshOverride--\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///a7cf0364-c8b1-4d05-a53e-1ee1dd627301\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///a7cf0364-c8b1-4d05-a53e-1ee1dd627301\"}],\"ramUsage\":2.65,\"server\":\"home\",\"moduleSequenceNumber\":95}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\n\\thacknet-auto.script for Bitburner v0.47.2\\n\\tWinners don't use copyright\\n    \\n\\tLatest version of this script should be at\\n\\t\\thttps://github.com/iuriguilherme/netscripts.d\\n\\tBitburner should be at https://github.com/danielyxie/bitburner\\n    \\n\\tThis script requires 5.70 GB of RAM to run for 1 thread(s)\\n    \\n\\tThis script will buy a Hacknet Node, fully upgrade it and then buy \\n\\tthe next one in an infinite loop. If the cost of the next upgrade \\n\\tis higher than buying a new Hacknet Node, then a new one will be \\n\\tbought before the last one is upgraded. There is an option to set \\n\\tthe budget limit.\\n*/\\n\\n// We will not buy anything if there's less money than this ammount\\nreserveMoney = 1000;\\n// Number of times to upgrade (shouldn't have to change this)\\nn = 1;\\n\\ndisableLog(\\\"getServerMoneyAvailable\\\");\\n\\n// Buy first HacknetNode if there are none\\nif (\\n\\thacknet.numNodes() === 0 &&\\n\\tgetServerMoneyAvailable(\\\"home\\\") >= reserveMoney\\n) {\\n\\thacknet.purchaseNode();\\n\\tprint(\\n\\t\\t\\\"Purchased \\\" +\\n\\t\\thacknet.getNodeStats((hacknet.numNodes() - 1)).name +\\n\\t\\t\\\" because there was none.\\\"\\n\\t);\\n}\\n\\n// If there are no Hacknet Nodes, we can't do anything, so the script \\n// ends.\\nwhile (hacknet.numNodes() > 0) {\\n\\t// If there is not enough money, we wait for it instead of ending \\n\\t// the loop.\\n\\twhile (getServerMoneyAvailable(\\\"home\\\") >= reserveMoney) {\\n\\t\\tfor (i = 0; i < hacknet.numNodes(); i++) {\\n\\t\\t\\twhile (\\n\\t\\t\\t\\thacknet.getLevelUpgradeCost(i, n) < Infinity &&\\n\\t\\t\\t\\thacknet.upgradeLevel(i, n)\\n\\t\\t\\t) {\\n\\t\\t\\t\\tprint(\\n\\t\\t\\t\\t\\t\\\"Upgraded \\\" +\\n\\t\\t\\t\\t\\thacknet.getNodeStats(i).name +\\n\\t\\t\\t\\t\\t\\\" to level \\\" +\\n\\t\\t\\t\\t\\thacknet.getNodeStats(i).level\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t\\twhile (\\n\\t\\t\\t\\thacknet.getRamUpgradeCost(i, n) < Infinity &&\\n\\t\\t\\t\\thacknet.upgradeRam(i, n)\\n\\t\\t\\t) {\\n\\t\\t\\t\\tprint(\\n\\t\\t\\t\\t\\t\\\"Upgraded \\\" +\\n\\t\\t\\t\\t\\thacknet.getNodeStats(i).name +\\n\\t\\t\\t\\t\\t\\\" RAM to \\\" +\\n\\t\\t\\t\\t\\thacknet.getNodeStats(i).ram\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t\\twhile (\\n\\t\\t\\t\\thacknet.getCoreUpgradeCost(i, n) < Infinity &&\\n\\t\\t\\t\\thacknet.upgradeCore(i, n)\\n\\t\\t\\t) {\\n\\t\\t\\t\\tprint(\\n\\t\\t\\t\\t\\t\\\"Upgraded \\\" +\\n\\t\\t\\t\\t\\thacknet.getNodeStats(i).name +\\n\\t\\t\\t\\t\\t\\\" core to \\\" +\\n\\t\\t\\t\\t\\thacknet.getNodeStats(i).core\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t} // END for (i = 0; i < hacknet.numNodes(); i++)\\n\\t\\t// Buy next Hacknet Node if the last one is already fully \\n\\t\\t// upgraded. If for some reason the last Hacknet Node is fully \\n\\t\\t// upgraded and the others don't, the loop above will still \\n\\t\\t// attempt to upgrade them all.\\n\\t\\tif (\\n\\t\\t\\thacknet.getLevelUpgradeCost(\\n\\t\\t\\t\\t(hacknet.numNodes() - 1), n) === Infinity &&\\n\\t\\t\\thacknet.getRamUpgradeCost(\\n\\t\\t\\t\\t(hacknet.numNodes() - 1), n) === Infinity &&\\n\\t\\t\\thacknet.getCoreUpgradeCost(\\n\\t\\t\\t\\t(hacknet.numNodes() - 1), n) === Infinity\\n\\t\\t) {\\n\\t\\t\\thacknet.purchaseNode();\\n\\t\\t\\tprint(\\n\\t\\t\\t\\t\\\"Purchased \\\" +\\n\\t\\t\\t\\thacknet.getNodeStats((hacknet.numNodes() - 1)).name +\\n\\t\\t\\t\\t\\\" because the last one couldn't be upgraded further.\\\"\\n\\t\\t\\t);\\n\\t\\t} else if (\\n\\t\\t\\t// Or buy the next Hacknet Node if the next upgrade is more \\n\\t\\t\\t// expensive than buying a new Hacknet Node.\\n\\t\\t\\thacknet.getLevelUpgradeCost(\\n\\t\\t\\t\\t(hacknet.numNodes() - 1), n) >\\n\\t\\t\\thacknet.getPurchaseNodeCost() &&\\n\\t\\t\\thacknet.getRamUpgradeCost(\\n\\t\\t\\t\\t(hacknet.numNodes() - 1), n) >\\n\\t\\t\\thacknet.getPurchaseNodeCost() &&\\n\\t\\t\\thacknet.getCoreUpgradeCost(\\n\\t\\t\\t\\t(hacknet.numNodes() - 1), n) >\\n\\t\\t\\thacknet.getPurchaseNodeCost()\\n\\t\\t) {\\n\\t\\t\\thacknet.purchaseNode();\\n\\t\\t\\tprint(\\n\\t\\t\\t\\t\\\"Purchased \\\" +\\n\\t\\t\\t\\thacknet.getNodeStats((hacknet.numNodes() - 1)).name +\\n\\t\\t\\t\\t\\\" because it was cheaper than next upgrade.\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hacknet.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":96}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\n\\tfunction _readNodes(fPath) {\\n\\t\\tlet nodes = ns.read(fPath);\\n\\t\\tnodes = nodes.split(\\\",\\\");\\n\\t\\treturn nodes;\\n\\t}\\n\\n\\tasync function _scanAndWriteAllNodes() {\\n\\t\\tlet nodes = [];\\n\\t\\tlet newNodes = ['home'];\\n\\t\\tlet newNodes2 = [];\\n\\t\\tlet repeat = true;\\n\\n\\t\\twhile (repeat) {\\n\\t\\t\\tnewNodes2 = [];\\n\\t\\t\\trepeat = false;\\n\\n\\t\\t\\tlet i, j;\\n\\t\\t\\tfor (i = 0; i < newNodes.length; i++) {\\n\\t\\t\\t\\tlet connected = ns.scan(newNodes[i]);\\n\\n\\t\\t\\t\\tfor (j = 0; j < connected.length; j++) {\\n\\t\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\t\\t!nodes.includes(connected[j]) &&\\n\\t\\t\\t\\t\\t\\t!newNodes.includes(connected[j]) &&\\n\\t\\t\\t\\t\\t\\t!newNodes2.includes(connected[j])\\n\\t\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\t\\tnewNodes2.push(connected[j]);\\n\\t\\t\\t\\t\\t\\trepeat = true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tnodes = nodes.concat(newNodes);\\n\\t\\t\\tnewNodes = newNodes2;\\n\\t\\t}\\n\\n\\t\\tawait ns.write('nodes.txt', nodes, 'w');\\n\\t}\\n\\n\\tfunction _nukeAvailableNodes() {\\n\\t\\tlet nodes = _readNodes('nodes.txt');\\n\\t\\tlet level = ns.getHackingLevel();\\n\\n\\t\\tlet Programs = [\\n\\t\\t\\tns.fileExists(\\\"BruteSSH.exe\\\"),\\n\\t\\t\\tns.fileExists(\\\"FTPCrack.exe\\\"),\\n\\t\\t\\tns.fileExists(\\\"relaySMTP.exe\\\"),\\n\\t\\t\\tns.fileExists(\\\"HTTPWorm.exe\\\"),\\n\\t\\t\\tns.fileExists(\\\"SQLInject.exe\\\")\\n\\t\\t];\\n\\n\\t\\tlet availPrograms = Programs[0] + Programs[1] + Programs[2] + Programs[3] + Programs[4];\\n\\n\\t\\tfor (let i = 0; i < nodes.length; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\t!ns.hasRootAccess(nodes[i]) &&\\n\\t\\t\\t\\tns.getServerRequiredHackingLevel(nodes[i]) <= level &&\\n\\t\\t\\t\\tns.getServerNumPortsRequired(nodes[i]) <= availPrograms\\n\\t\\t\\t) {\\n\\t\\t\\t\\tif (Programs[0]) { ns.brutessh(nodes[i]) };\\n\\t\\t\\t\\tif (Programs[1]) { ns.ftpcrack(nodes[i]) };\\n\\t\\t\\t\\tif (Programs[2]) { ns.relaysmtp(nodes[i]) };\\n\\t\\t\\t\\tif (Programs[3]) { ns.httpworm(nodes[i]) };\\n\\t\\t\\t\\tif (Programs[4]) { ns.sqlinject(nodes[i]) };\\n\\t\\t\\t\\tns.nuke(nodes[i]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tasync function _scanAndWriteRootedNodes() {\\n\\t\\tlet nodes = _readNodes('nodes.txt');\\n\\t\\tlet rooted = [];\\n\\n\\t\\tfor (let i = 0; i < nodes.length; i++) {\\n\\t\\t\\tif (ns.hasRootAccess(nodes[i])) {\\n\\t\\t\\t\\trooted.push(nodes[i]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tns.tprint(rooted.length);\\n\\t\\tawait ns.write('rooted.txt', rooted, 'w');\\n\\t}\\n\\n\\t//read the nodes\\n\\tawait _scanAndWriteAllNodes()\\n\\t_nukeAvailableNodes();\\n\\tawait _scanAndWriteRootedNodes();\\n\\n\\t//load nodes\\n\\tlet attackNodes = _readNodes('rooted.txt');\\n\\tlet additionalServers = ns.getPurchasedServers();\\n\\n\\tif (additionalServers.length) {\\n\\t\\tattackNodes = attackNodes.concat(additionalServers);\\n\\t}\\n\\n\\t//spin up attack servers\\n\\tfor (let i = 0; i < attackNodes.length; i++) {\\n\\t\\tns.exec(\\\"main_hack.js\\\", \\\"home\\\", 1, attackNodes[i])\\n\\t}\\n}\",\"filename\":\"setup_hacks.js\",\"url\":\"blob:file:///460f2c9a-43de-443b-9499-de1c96655583\",\"module\":{},\"dependencies\":[{\"filename\":\"setup_hacks.js\",\"url\":\"blob:file:///460f2c9a-43de-443b-9499-de1c96655583\"}],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":189}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet server = ns.args[0];\\n\\n\\tlet maxRam = ns.getServerMaxRam('home');\\n\\tlet usedRam = ns.getServerUsedRam('home');\\n\\tlet scriptRam = ns.getScriptRam('basic_hack.js');\\n\\tlet threads = Math.floor((maxRam - usedRam) / scriptRam);\\n\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t}\\n\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t}\\n\\n\\tns.nuke(server);\\n\\tns.run('basic_hack.js', threads, server);\\n}\",\"filename\":\"home_hack.js\",\"url\":\"blob:file:///e4d5c7e1-2a3e-4351-a242-0862f6f2a700\",\"module\":\"\",\"dependencies\":[{\"filename\":\"home_hack.js\",\"url\":\"blob:file:///e4d5c7e1-2a3e-4351-a242-0862f6f2a700\"}],\"ramUsage\":3.05,\"server\":\"home\",\"moduleSequenceNumber\":98}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":99}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":100}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":101}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\n\\tlet attackServer = ns.args ? ns.args[0] : \\\"pserv-0\\\";\\n\\n\\tfunction _readNodes(fPath) {\\n\\t\\tlet nodes = ns.read(fPath);\\n\\t\\tnodes = nodes.split(\\\",\\\");\\n\\t\\treturn nodes;\\n\\t}\\n\\n\\tfunction _findAttackableNodes() {\\n\\t\\tlet rooted = _readNodes('rooted.txt');\\n\\t\\tlet targetNodes = [];\\n\\n\\t\\t//check which are valid for attacking\\n\\t\\tfor (let i = 0; i < rooted.length; i++) {\\n\\t\\t\\tif (rooted[i] !== \\\"home\\\" && ns.getServerMaxMoney(rooted[i])) {\\n\\t\\t\\t\\ttargetNodes.push(rooted[i]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn targetNodes;\\n\\t}\\n\\n\\t//prep attackServer\\n\\tlet files = [\\\"weaken.script\\\", \\\"grow.script\\\", \\\"hack.script\\\", \\\"daemon.js\\\"];\\n\\tawait ns.scp(files, \\\"home\\\", attackServer);\\n\\n\\t//load nodes\\n\\tlet targetNodes = _findAttackableNodes()\\n\\tlet usedThreads = 8;\\n\\n\\tlet utilThreads = (ns.getServerMaxRam(attackServer) / ns.getScriptRam('daemon.js')) / targetNodes.length;\\n\\tutilThreads = Math.max(Math.floor(utilThreads), Math.floor(ns.getServerMaxRam(attackServer) * 0.4));\\n\\n\\tns.tprint(attackServer)\\n\\tns.tprint(utilThreads)\\n\\n\\t//start daemons\\n\\tfor (let i = 0; i < targetNodes.length; i++) {\\n\\t\\tif (utilThreads >= usedThreads) {\\n\\t\\t\\tusedThreads += 8;\\n\\n\\t\\t\\tlet target = targetNodes[i];\\n\\n\\t\\t\\tif (attackServer == 'home') {\\n\\t\\t\\t\\tns.kill(\\\"daemon.js\\\", attackServer, target, attackServer);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.killall(attackServer);\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.exec(\\\"daemon.js\\\", attackServer, 1, target, attackServer, utilThreads);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"main_hack.js\",\"url\":\"blob:file:///fd1c27e2-fa27-4b1a-9d16-3eb7a25f7920\",\"module\":\"\",\"dependencies\":[{\"filename\":\"main_hack.js\",\"url\":\"blob:file:///fd1c27e2-fa27-4b1a-9d16-3eb7a25f7920\"}],\"ramUsage\":4.75,\"server\":\"home\",\"moduleSequenceNumber\":4124}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tlet bbFortAmt = 0.002;\\n\\tlet bbWeakAmt = 0.05;\\n\\tlet fundPct = 0.9;\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (\\n\\t\\t\\tns.isRunning(\\\"weaken.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"grow.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"hack.script\\\", attackServer, target)\\n\\t\\t) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor(fundPct / _getBaseHackPct());\\n\\t\\t\\tlet growT = Math.ceil(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.ceil(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.ceil(hackT * 1.65 + growT * 1.55 + weakenT + 1.55);\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///3cae52be-1219-44ba-9c13-268e13cb8250\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///3cae52be-1219-44ba-9c13-268e13cb8250\"}],\"ramUsage\":7.75,\"server\":\"home\",\"moduleSequenceNumber\":211}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"nodes.txt\",\"text\":\"home,n00dles,foodnstuff,sigma-cosmetics,joesguns,hong-fang-tea,harakiri-sushi,iron-gym,darkweb,zer0,nectar-net,max-hardware,CSEC,neo-net,silver-helix,phantasy,omega-net,avmnite-02h,the-hub,johnson-ortho,comptek,netlink,crush-fitness,rothman-uni,summit-uni,syscore,catalyst,I.I.I.I,zb-institute,alpha-ent,rho-construction,lexo-corp,millenium-fitness,aevum-police,global-pharm,aerocorp,snap-fitness,galactic-cyber,omnia,unitalife,deltaone,defcomm,univ-energy,icarus,solaris,zeus-med,zb-def,nova-med,infocomm,taiyang-digital,applied-energetics,run4theh111z,titan-labs,microdyne,stormtech,helios,vitalife,fulcrumtech,omnitek,kuai-gong,.,4sigma,blade,clarkinc,powerhouse-fitness,b-and-a,nwo,ecorp,The-Cave,megacorp,fulcrumassets\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"rooted.txt\",\"text\":\"home,n00dles,foodnstuff,sigma-cosmetics,joesguns,hong-fang-tea,harakiri-sushi,iron-gym,zer0,nectar-net,max-hardware,CSEC,neo-net,silver-helix,phantasy,omega-net,avmnite-02h,crush-fitness\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-383113.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"200215554168\",97],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-212249-Netburners.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[68,142,102,119,16,114,1,163,26,188,118,45,138]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"40.5.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":34414596716,\"moneyMax\":860364917900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1074,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"1.3.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":46611875955,\"moneyMax\":1165296898875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1315,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"64.1.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":24563776598,\"moneyMax\":614094414950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1095,\"serverGrowth\":77}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-926790-Sector-12.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1727234237\",\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"84.5.6.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":39608962465,\"moneyMax\":990224061625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":927,\"serverGrowth\":84}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"46.4.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":26638713012,\"moneyMax\":665967825300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1114,\"serverGrowth\":65}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-452983-FoodNStuff.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0],[0,0,0,1,0,1,0,0],[0,1,0,0,1,0,0,0],[0,1,0,0,0,1,0,0],[0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"64.3.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":16048729378,\"moneyMax\":401218234450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1246,\"serverGrowth\":68}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"54.7.5.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"blade\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":13554185182,\"moneyMax\":338854629550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1065,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"33.7.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":18394484584,\"moneyMax\":459862114600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1051,\"serverGrowth\":92}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"46.8.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":25853682501,\"moneyMax\":646342062525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1274,\"serverGrowth\":94}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"22.2.6.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1762801831,\"moneyMax\":44070045775,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1066,\"serverGrowth\":86}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"99.2.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1120,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"41.5.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1019442965,\"moneyMax\":25486074125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":921,\"serverGrowth\":75}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-704637.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0],[0,0,0,1],[0,0,0,0],[0,0,1,0],[0,0,0,0],[1,0,1,0],[0,1,0,0],[0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-405387.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[36,39,3],[15,18,2],[12,3,48],[3,31,25],[48,11,16]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"19.7.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":809238833,\"moneyMax\":20230970825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1039,\"serverGrowth\":68}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"11.6.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":754499888,\"moneyMax\":18862497200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":912,\"serverGrowth\":63}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"85.0.4.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":749459437,\"moneyMax\":18736485925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":820,\"serverGrowth\":74}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"79.3.8.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":747833229,\"moneyMax\":18695830725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":875,\"serverGrowth\":62}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"15.7.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":985796692,\"moneyMax\":24644917300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":909,\"serverGrowth\":89}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"35.7.2.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1140581181,\"moneyMax\":28514529525,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":872,\"serverGrowth\":80}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"29.4.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":752735431,\"moneyMax\":18818385775,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":802,\"serverGrowth\":70}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-850598-FoodNStuff.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[14,31,5,32,13,41,30,20,7,13,13,3],[38,6,6,45,10,18,15,36,34,47,13,15],[34,46,28,46,22,48,9,34,12,45,11,14],[14,48,32,46,13,49,43,35,20,37,5,45],[27,48,28,17,47,22,4,3,14,20,19,20],[40,45,50,15,44,31,32,27,11,32,44,49],[23,21,21,27,3,3,19,31,2,20,28,19],[4,45,29,38,1,36,19,23,45,31,46,12],[45,6,32,35,1,11,14,22,14,6,43,22]],\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"65.8.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":524678302,\"moneyMax\":13116957550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":847,\"serverGrowth\":72}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"77.0.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":866324677,\"moneyMax\":21658116925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":888,\"serverGrowth\":72}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-380324-Aevum.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[13,25,6,11,36,26,29,31,10,34,48,22,32],[12,19,8,23,46,40,41,43,21,18,18,13,10],[24,4,38,37,8,16,32,14,33,41,50,19,47],[21,5,47,24,41,20,46,5,16,24,27,9,9],[22,2,20,32,8,2,7,2,47,4,35,32,15],[27,21,29,28,11,36,8,8,7,39,31,19,15],[36,22,3,44,33,25,49,27,28,27,2,22,3],[39,47,45,41,46,7,28,11,11,4,13,23,47],[42,41,29,34,21,37,31,23,49,11,15,28,40],[36,15,4,48,38,44,20,42,18,33,1,44,8],[31,30,37,21,10,8,18,2,20,23,9,13,26],[15,12,19,44,6,32,33,31,11,37,39,2,16],[1,21,35,4,3,12,38,21,17,12,28,44,11]],\"reward\":{\"name\":\"Aevum\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"8.4.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":842140319,\"moneyMax\":21053507975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":834,\"serverGrowth\":83}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"24.9.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1199309780,\"moneyMax\":29982744500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":899,\"serverGrowth\":60}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"59.8.9.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":922142805,\"moneyMax\":23053570125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":878,\"serverGrowth\":68}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"33.0.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":1024940558,\"moneyMax\":25623513950,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":818,\"serverGrowth\":68}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"20.2.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"stormtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":873742449,\"moneyMax\":21843561225,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":794,\"serverGrowth\":71}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"62.2.4.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":795363384,\"moneyMax\":19884084600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":753,\"serverGrowth\":76}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"9.9.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1481974710,\"moneyMax\":37049367750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":830,\"serverGrowth\":53}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"71.1.9.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1709178515,\"moneyMax\":42729462875,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":843,\"serverGrowth\":83}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-690178.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[10,[34,186,173,125,140,76,15,4,167,73,20,41,101,82,10,134,186,46,192,183,131,197,103,79,152,190,121,6,109,87]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"45.7.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":1237500263,\"moneyMax\":30937506575,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":776,\"serverGrowth\":76}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-401923.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(())((\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-646811.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[10,16],[3,9],[23,32],[20,29],[11,13]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-325276-Sector-12.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()a()()(a)a\",\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"15.5.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1323896875,\"moneyMax\":33097421875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":813,\"serverGrowth\":72}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"44.2.4.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"icarus\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":1011903903,\"moneyMax\":25297597575,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":803,\"serverGrowth\":73}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"7.1.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":772955160,\"moneyMax\":19323879000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":701,\"serverGrowth\":58}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"88.5.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":554865292,\"moneyMax\":13871632300,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":519,\"serverGrowth\":48}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"96.3.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":613573937,\"moneyMax\":15339348425,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":556,\"serverGrowth\":58}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-627524.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"7464\",-75],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"50.6.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":399920042,\"moneyMax\":9998001050,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":414,\"serverGrowth\":37}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"34.3.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":240320058,\"moneyMax\":6008001450,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":407,\"serverGrowth\":45}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-237499.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":979831862,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"88.0.3.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1082048967,\"moneyMax\":27051224175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":759,\"serverGrowth\":79}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-700598.cct\",\"type\":\"Total Ways to Sum\",\"data\":60,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-85177.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[10,[197,182,41,23,67,194,85,151,7,81,34]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"0.5.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":318250268,\"moneyMax\":7956256700,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":460,\"serverGrowth\":55}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-442566.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[12,17],[20,26],[21,22],[7,16],[6,15],[25,27],[5,7],[11,19],[22,32]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"68.5.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":475121811,\"moneyMax\":11878045275,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":557,\"serverGrowth\":66}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"90.3.5.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":539366718,\"moneyMax\":13484167950,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":407,\"serverGrowth\":52}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"2.3.0.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":37,\"minDifficulty\":12,\"moneyAvailable\":163723514,\"moneyMax\":4093087850,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":286,\"serverGrowth\":52}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"15.3.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":240040981,\"moneyMax\":6001024525,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":309,\"serverGrowth\":61}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"69.0.2.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":391,\"serverGrowth\":66}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"19.3.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":74997798,\"moneyMax\":1874944950,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":279,\"serverGrowth\":51}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-900452-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[84,11,128,197,131,85,32,152,31,31,137,45,26,52,59,24,1,173,200]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"47.7.2.8\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\n  await ns.hack(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":104}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\n  await ns.grow(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":105}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\n  await ns.weaken(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":106}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\ttarget = target || 'foodnstuff';\\n\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.45;\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(target);\\n\\t}\\n\\t\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(target);\\n\\t}\\n\\n\\tns.nuke(target);\\n\\n\\tlet moneyThreshOverride = 0;\\n\\tlet securityThreshOverride = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (!securityThreshOverride && ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tsecurityThreshOverride = 4;\\n\\t\\t} else if (!moneyThreshOverride && ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tlet percentGrowth = await ns.grow(target);\\n\\t\\t\\tif (percentGrowth < 1) {\\n\\t\\t\\t\\tmoneyThreshOverride = 10;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t\\tif (securityThreshOverride) {\\n\\t\\t\\tsecurityThreshOverride--\\n\\t\\t}\\n\\n\\t\\tif (moneyThreshOverride) {\\n\\t\\t\\tmoneyThreshOverride--\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///d3481318-a13e-4275-90b6-15d1b460b1eb\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///d3481318-a13e-4275-90b6-15d1b460b1eb\"}],\"ramUsage\":2.65,\"server\":\"n00dles\",\"moduleSequenceNumber\":107}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":108}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":109}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":110}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tlet bbFortAmt = 0.002;\\n\\tlet bbWeakAmt = 0.05;\\n\\tlet fundPct = 0.9;\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (\\n\\t\\t\\tns.isRunning(\\\"weaken.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"grow.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"hack.script\\\", attackServer, target)\\n\\t\\t) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor(fundPct / _getBaseHackPct());\\n\\t\\t\\tlet growT = Math.ceil(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.ceil(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.ceil(hackT * 1.65 + growT * 1.55 + weakenT + 1.55);\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":7.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":111}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-134107-CyberSec.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[10,17],[4,12],[8,11],[19,28]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"97.8.4.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":112}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":113}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":114}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\ttarget = target || 'foodnstuff';\\n\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.45;\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(target);\\n\\t}\\n\\t\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(target);\\n\\t}\\n\\n\\tns.nuke(target);\\n\\n\\tlet moneyThreshOverride = 0;\\n\\tlet securityThreshOverride = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (!securityThreshOverride && ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tsecurityThreshOverride = 4;\\n\\t\\t} else if (!moneyThreshOverride && ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tlet percentGrowth = await ns.grow(target);\\n\\t\\t\\tif (percentGrowth < 1) {\\n\\t\\t\\t\\tmoneyThreshOverride = 10;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t\\tif (securityThreshOverride) {\\n\\t\\t\\tsecurityThreshOverride--\\n\\t\\t}\\n\\n\\t\\tif (moneyThreshOverride) {\\n\\t\\t\\tmoneyThreshOverride--\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///0cb6f9f1-f3d5-4959-ac75-b0265669fd00\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///0cb6f9f1-f3d5-4959-ac75-b0265669fd00\"}],\"ramUsage\":2.65,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":115}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tlet bbFortAmt = 0.002;\\n\\tlet bbWeakAmt = 0.05;\\n\\tlet fundPct = 0.9;\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (\\n\\t\\t\\tns.isRunning(\\\"weaken.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"grow.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"hack.script\\\", attackServer, target)\\n\\t\\t) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor(fundPct / _getBaseHackPct());\\n\\t\\t\\tlet growT = Math.ceil(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.ceil(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.ceil(hackT * 1.65 + growT * 1.55 + weakenT + 1.55);\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///97191f39-b14c-4dfc-817d-cb2ffb415b1e\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///97191f39-b14c-4dfc-817d-cb2ffb415b1e\"}],\"ramUsage\":7.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":116}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":50000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"52.4.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\ttarget = target || 'foodnstuff';\\n\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.45;\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(target);\\n\\t}\\n\\t\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(target);\\n\\t}\\n\\n\\tns.nuke(target);\\n\\n\\tlet moneyThreshOverride = 0;\\n\\tlet securityThreshOverride = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (!securityThreshOverride && ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tsecurityThreshOverride = 4;\\n\\t\\t} else if (!moneyThreshOverride && ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tlet percentGrowth = await ns.grow(target);\\n\\t\\t\\tif (percentGrowth < 1) {\\n\\t\\t\\t\\tmoneyThreshOverride = 10;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t\\tif (securityThreshOverride) {\\n\\t\\t\\tsecurityThreshOverride--\\n\\t\\t}\\n\\n\\t\\tif (moneyThreshOverride) {\\n\\t\\t\\tmoneyThreshOverride--\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///592c23a7-5b3b-4028-a54f-a4ba7c146dc2\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///592c23a7-5b3b-4028-a54f-a4ba7c146dc2\"}],\"ramUsage\":2.65,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":117}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":118}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":119}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":120}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tlet bbFortAmt = 0.002;\\n\\tlet bbWeakAmt = 0.05;\\n\\tlet fundPct = 0.9;\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (\\n\\t\\t\\tns.isRunning(\\\"weaken.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"grow.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"hack.script\\\", attackServer, target)\\n\\t\\t) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor(fundPct / _getBaseHackPct());\\n\\t\\t\\tlet growT = Math.ceil(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.ceil(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.ceil(hackT * 1.65 + growT * 1.55 + weakenT + 1.55);\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///e293f977-ed32-4d46-8fa5-e048a8be3c18\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///e293f977-ed32-4d46-8fa5-e048a8be3c18\"}],\"ramUsage\":7.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":121}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":57500000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"70.3.9.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\ttarget = target || 'foodnstuff';\\n\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.45;\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(target);\\n\\t}\\n\\t\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(target);\\n\\t}\\n\\n\\tns.nuke(target);\\n\\n\\tlet moneyThreshOverride = 0;\\n\\tlet securityThreshOverride = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (!securityThreshOverride && ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tsecurityThreshOverride = 4;\\n\\t\\t} else if (!moneyThreshOverride && ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tlet percentGrowth = await ns.grow(target);\\n\\t\\t\\tif (percentGrowth < 1) {\\n\\t\\t\\t\\tmoneyThreshOverride = 10;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t\\tif (securityThreshOverride) {\\n\\t\\t\\tsecurityThreshOverride--\\n\\t\\t}\\n\\n\\t\\tif (moneyThreshOverride) {\\n\\t\\t\\tmoneyThreshOverride--\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///d376866e-ea5e-4cd4-ba81-d40a627687bc\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///d376866e-ea5e-4cd4-ba81-d40a627687bc\"}],\"ramUsage\":2.65,\"server\":\"joesguns\",\"moduleSequenceNumber\":122}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":123}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":124}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":125}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tlet bbFortAmt = 0.002;\\n\\tlet bbWeakAmt = 0.05;\\n\\tlet fundPct = 0.9;\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (\\n\\t\\t\\tns.isRunning(\\\"weaken.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"grow.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"hack.script\\\", attackServer, target)\\n\\t\\t) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor(fundPct / _getBaseHackPct());\\n\\t\\t\\tlet growT = Math.ceil(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.ceil(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.ceil(hackT * 1.65 + growT * 1.55 + weakenT + 1.55);\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///e51a7baa-38dd-41b9-a194-6a431c3562d3\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///e51a7baa-38dd-41b9-a194-6a431c3562d3\"}],\"ramUsage\":7.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":126}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":62500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-616219.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[14,11],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"71.3.2.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":7.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"zer0\",12],\"dataMap\":{},\"filename\":\"daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":277.452,\"onlineMoneyMade\":0,\"onlineRunningTime\":41018.40999999629,\"pid\":94,\"ramUsage\":7.75,\"server\":\"zer0\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\ttarget = target || 'foodnstuff';\\n\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.45;\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(target);\\n\\t}\\n\\t\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(target);\\n\\t}\\n\\n\\tns.nuke(target);\\n\\n\\tlet moneyThreshOverride = 0;\\n\\tlet securityThreshOverride = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (!securityThreshOverride && ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tsecurityThreshOverride = 4;\\n\\t\\t} else if (!moneyThreshOverride && ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tlet percentGrowth = await ns.grow(target);\\n\\t\\t\\tif (percentGrowth < 1) {\\n\\t\\t\\t\\tmoneyThreshOverride = 10;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t\\tif (securityThreshOverride) {\\n\\t\\t\\tsecurityThreshOverride--\\n\\t\\t}\\n\\n\\t\\tif (moneyThreshOverride) {\\n\\t\\t\\tmoneyThreshOverride--\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///34b9e585-76f2-4f70-9f52-8379f26da5c6\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///34b9e585-76f2-4f70-9f52-8379f26da5c6\"}],\"ramUsage\":2.65,\"server\":\"zer0\",\"moduleSequenceNumber\":127}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":128}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":129}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":130}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tlet bbFortAmt = 0.002;\\n\\tlet bbWeakAmt = 0.05;\\n\\tlet fundPct = 0.9;\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (\\n\\t\\t\\tns.isRunning(\\\"weaken.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"grow.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"hack.script\\\", attackServer, target)\\n\\t\\t) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor(fundPct / _getBaseHackPct());\\n\\t\\t\\tlet growT = Math.ceil(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.ceil(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.ceil(hackT * 1.65 + growT * 1.55 + weakenT + 1.55);\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///079c442b-0b06-4be5-a335-bbc3b82966c1\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///079c442b-0b06-4be5-a335-bbc3b82966c1\"}],\"ramUsage\":7.75,\"server\":\"zer0\",\"moduleSequenceNumber\":725}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"neo-net\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":187500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"98.0.3.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\ttarget = target || 'foodnstuff';\\n\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.45;\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(target);\\n\\t}\\n\\t\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(target);\\n\\t}\\n\\n\\tns.nuke(target);\\n\\n\\tlet moneyThreshOverride = 0;\\n\\tlet securityThreshOverride = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (!securityThreshOverride && ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tsecurityThreshOverride = 4;\\n\\t\\t} else if (!moneyThreshOverride && ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tlet percentGrowth = await ns.grow(target);\\n\\t\\t\\tif (percentGrowth < 1) {\\n\\t\\t\\t\\tmoneyThreshOverride = 10;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t\\tif (securityThreshOverride) {\\n\\t\\t\\tsecurityThreshOverride--\\n\\t\\t}\\n\\n\\t\\tif (moneyThreshOverride) {\\n\\t\\t\\tmoneyThreshOverride--\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///cc5ebc84-0a94-48f8-8e59-9e6cf31038b4\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///cc5ebc84-0a94-48f8-8e59-9e6cf31038b4\"}],\"ramUsage\":2.65,\"server\":\"nectar-net\",\"moduleSequenceNumber\":132}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":133}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":134}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":135}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tlet bbFortAmt = 0.002;\\n\\tlet bbWeakAmt = 0.05;\\n\\tlet fundPct = 0.9;\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (\\n\\t\\t\\tns.isRunning(\\\"weaken.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"grow.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"hack.script\\\", attackServer, target)\\n\\t\\t) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor(fundPct / _getBaseHackPct());\\n\\t\\t\\tlet growT = Math.ceil(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.ceil(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.ceil(hackT * 1.65 + growT * 1.55 + weakenT + 1.55);\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///f952ac23-7144-439e-bf3e-86dd15a92fa0\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///f952ac23-7144-439e-bf3e-86dd15a92fa0\"}],\"ramUsage\":7.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":136}}],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":68750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"41.6.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":7.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"neo-net\",12],\"dataMap\":{},\"filename\":\"daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":277.452,\"onlineMoneyMade\":0,\"onlineRunningTime\":41018.40999999629,\"pid\":96,\"ramUsage\":7.75,\"server\":\"neo-net\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\ttarget = target || 'foodnstuff';\\n\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.45;\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(target);\\n\\t}\\n\\t\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(target);\\n\\t}\\n\\n\\tns.nuke(target);\\n\\n\\tlet moneyThreshOverride = 0;\\n\\tlet securityThreshOverride = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (!securityThreshOverride && ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tsecurityThreshOverride = 4;\\n\\t\\t} else if (!moneyThreshOverride && ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tlet percentGrowth = await ns.grow(target);\\n\\t\\t\\tif (percentGrowth < 1) {\\n\\t\\t\\t\\tmoneyThreshOverride = 10;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t\\tif (securityThreshOverride) {\\n\\t\\t\\tsecurityThreshOverride--\\n\\t\\t}\\n\\n\\t\\tif (moneyThreshOverride) {\\n\\t\\t\\tmoneyThreshOverride--\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///6d0106f3-e8ac-4f3c-83d9-62b5ee417a2a\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///6d0106f3-e8ac-4f3c-83d9-62b5ee417a2a\"}],\"ramUsage\":2.65,\"server\":\"neo-net\",\"moduleSequenceNumber\":137}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":138}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":139}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":140}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tlet bbFortAmt = 0.002;\\n\\tlet bbWeakAmt = 0.05;\\n\\tlet fundPct = 0.9;\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (\\n\\t\\t\\tns.isRunning(\\\"weaken.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"grow.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"hack.script\\\", attackServer, target)\\n\\t\\t) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor(fundPct / _getBaseHackPct());\\n\\t\\t\\tlet growT = Math.ceil(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.ceil(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.ceil(hackT * 1.65 + growT * 1.55 + weakenT + 1.55);\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///09cb36ce-8cd3-4801-b859-08e52e767e31\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///09cb36ce-8cd3-4801-b859-08e52e767e31\"}],\"ramUsage\":7.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":727}}],\"serversOnNetwork\":[\"zer0\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":125000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"78.5.4.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":7.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"silver-helix\",25],\"dataMap\":{},\"filename\":\"daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41018.40999999629,\"pid\":99,\"ramUsage\":7.75,\"server\":\"silver-helix\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\ttarget = target || 'foodnstuff';\\n\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.45;\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(target);\\n\\t}\\n\\t\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(target);\\n\\t}\\n\\n\\tns.nuke(target);\\n\\n\\tlet moneyThreshOverride = 0;\\n\\tlet securityThreshOverride = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (!securityThreshOverride && ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tsecurityThreshOverride = 4;\\n\\t\\t} else if (!moneyThreshOverride && ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tlet percentGrowth = await ns.grow(target);\\n\\t\\t\\tif (percentGrowth < 1) {\\n\\t\\t\\t\\tmoneyThreshOverride = 10;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t\\tif (securityThreshOverride) {\\n\\t\\t\\tsecurityThreshOverride--\\n\\t\\t}\\n\\n\\t\\tif (moneyThreshOverride) {\\n\\t\\t\\tmoneyThreshOverride--\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///a6596fb9-3b58-4c75-bd23-3c650a918204\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///a6596fb9-3b58-4c75-bd23-3c650a918204\"}],\"ramUsage\":2.65,\"server\":\"silver-helix\",\"moduleSequenceNumber\":142}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":143}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":144}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":145}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tlet bbFortAmt = 0.002;\\n\\tlet bbWeakAmt = 0.05;\\n\\tlet fundPct = 0.9;\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (\\n\\t\\t\\tns.isRunning(\\\"weaken.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"grow.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"hack.script\\\", attackServer, target)\\n\\t\\t) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor(fundPct / _getBaseHackPct());\\n\\t\\t\\tlet growT = Math.ceil(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.ceil(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.ceil(hackT * 1.65 + growT * 1.55 + weakenT + 1.55);\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///4fea425b-9016-4672-a030-f45d9309d8b2\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///4fea425b-9016-4672-a030-f45d9309d8b2\"}],\"ramUsage\":7.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":730}}],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":1102337514.4981275,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"61.7.8.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\ttarget = target || 'foodnstuff';\\n\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.45;\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(target);\\n\\t}\\n\\t\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(target);\\n\\t}\\n\\n\\tns.nuke(target);\\n\\n\\tlet moneyThreshOverride = 0;\\n\\tlet securityThreshOverride = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (!securityThreshOverride && ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tsecurityThreshOverride = 4;\\n\\t\\t} else if (!moneyThreshOverride && ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tlet percentGrowth = await ns.grow(target);\\n\\t\\t\\tif (percentGrowth < 1) {\\n\\t\\t\\t\\tmoneyThreshOverride = 10;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t\\tif (securityThreshOverride) {\\n\\t\\t\\tsecurityThreshOverride--\\n\\t\\t}\\n\\n\\t\\tif (moneyThreshOverride) {\\n\\t\\t\\tmoneyThreshOverride--\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///b3eed8bf-229a-40a1-8314-a48506ed3fc3\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///b3eed8bf-229a-40a1-8314-a48506ed3fc3\"}],\"ramUsage\":2.65,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":147}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":148}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":149}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":150}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tlet bbFortAmt = 0.002;\\n\\tlet bbWeakAmt = 0.05;\\n\\tlet fundPct = 0.9;\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (\\n\\t\\t\\tns.isRunning(\\\"weaken.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"grow.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"hack.script\\\", attackServer, target)\\n\\t\\t) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor(fundPct / _getBaseHackPct());\\n\\t\\t\\tlet growT = Math.ceil(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.ceil(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.ceil(hackT * 1.65 + growT * 1.55 + weakenT + 1.55);\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///9fbe8b6d-0624-46d7-b65d-1c0b8a096917\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///9fbe8b6d-0624-46d7-b65d-1c0b8a096917\"}],\"ramUsage\":7.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":151}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":75000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"41.5.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\ttarget = target || 'foodnstuff';\\n\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.45;\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(target);\\n\\t}\\n\\t\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(target);\\n\\t}\\n\\n\\tns.nuke(target);\\n\\n\\tlet moneyThreshOverride = 0;\\n\\tlet securityThreshOverride = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (!securityThreshOverride && ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tsecurityThreshOverride = 4;\\n\\t\\t} else if (!moneyThreshOverride && ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tlet percentGrowth = await ns.grow(target);\\n\\t\\t\\tif (percentGrowth < 1) {\\n\\t\\t\\t\\tmoneyThreshOverride = 10;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t\\tif (securityThreshOverride) {\\n\\t\\t\\tsecurityThreshOverride--\\n\\t\\t}\\n\\n\\t\\tif (moneyThreshOverride) {\\n\\t\\t\\tmoneyThreshOverride--\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///3b95af3f-70fa-4aa0-a424-9cf02310a7c0\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///3b95af3f-70fa-4aa0-a424-9cf02310a7c0\"}],\"ramUsage\":2.65,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":152}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":153}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":154}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":155}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tlet bbFortAmt = 0.002;\\n\\tlet bbWeakAmt = 0.05;\\n\\tlet fundPct = 0.9;\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (\\n\\t\\t\\tns.isRunning(\\\"weaken.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"grow.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"hack.script\\\", attackServer, target)\\n\\t\\t) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor(fundPct / _getBaseHackPct());\\n\\t\\t\\tlet growT = Math.ceil(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.ceil(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.ceil(hackT * 1.65 + growT * 1.55 + weakenT + 1.55);\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///7833ff8e-93e0-47bc-a66d-de1521f19650\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///7833ff8e-93e0-47bc-a66d-de1521f19650\"}],\"ramUsage\":7.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":156}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\",\"max-hardware\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":100000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"24.6.1.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":7.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"phantasy\",12],\"dataMap\":{},\"filename\":\"daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":277.452,\"onlineMoneyMade\":0,\"onlineRunningTime\":41018.40999999629,\"pid\":100,\"ramUsage\":7.75,\"server\":\"phantasy\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\ttarget = target || 'foodnstuff';\\n\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.45;\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(target);\\n\\t}\\n\\t\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(target);\\n\\t}\\n\\n\\tns.nuke(target);\\n\\n\\tlet moneyThreshOverride = 0;\\n\\tlet securityThreshOverride = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (!securityThreshOverride && ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tsecurityThreshOverride = 4;\\n\\t\\t} else if (!moneyThreshOverride && ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tlet percentGrowth = await ns.grow(target);\\n\\t\\t\\tif (percentGrowth < 1) {\\n\\t\\t\\t\\tmoneyThreshOverride = 10;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t\\tif (securityThreshOverride) {\\n\\t\\t\\tsecurityThreshOverride--\\n\\t\\t}\\n\\n\\t\\tif (moneyThreshOverride) {\\n\\t\\t\\tmoneyThreshOverride--\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///b12a9ba7-4f93-4c35-85d7-3529440a6a8b\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///b12a9ba7-4f93-4c35-85d7-3529440a6a8b\"}],\"ramUsage\":2.65,\"server\":\"phantasy\",\"moduleSequenceNumber\":157}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":158}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":159}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":160}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tlet bbFortAmt = 0.002;\\n\\tlet bbWeakAmt = 0.05;\\n\\tlet fundPct = 0.9;\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (\\n\\t\\t\\tns.isRunning(\\\"weaken.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"grow.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"hack.script\\\", attackServer, target)\\n\\t\\t) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor(fundPct / _getBaseHackPct());\\n\\t\\t\\tlet growT = Math.ceil(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.ceil(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.ceil(hackT * 1.65 + growT * 1.55 + weakenT + 1.55);\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///cfff7b21-4a2d-4e41-b7a5-11c3f9d246a8\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///cfff7b21-4a2d-4e41-b7a5-11c3f9d246a8\"}],\"ramUsage\":7.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":731}}],\"serversOnNetwork\":[\"zer0\",\"the-hub\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":600000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-968083.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[41,19,28,26,15,19,36,36,38,36,42,39,46],[27,9,14,44,40,24,12,14,42,10,5,33,50],[5,7,25,22,34,44,36,25,5,7,6,26,34],[38,46,43,34,48,39,37,24,27,30,21,17,49],[23,18,34,26,31,34,50,16,12,42,3,28,9],[28,25,32,32,40,10,5,48,28,2,48,28,27],[39,26,32,37,48,27,27,17,15,43,40,38,14],[25,13,29,15,16,46,19,20,43,15,6,21,29],[47,36,2,46,31,21,37,9,9,43,35,23,44]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"6.1.6.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":7.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"max-hardware\",12],\"dataMap\":{},\"filename\":\"daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":277.452,\"onlineMoneyMade\":0,\"onlineRunningTime\":41018.40999999629,\"pid\":95,\"ramUsage\":7.75,\"server\":\"max-hardware\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\ttarget = target || 'foodnstuff';\\n\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.45;\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(target);\\n\\t}\\n\\t\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(target);\\n\\t}\\n\\n\\tns.nuke(target);\\n\\n\\tlet moneyThreshOverride = 0;\\n\\tlet securityThreshOverride = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (!securityThreshOverride && ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tsecurityThreshOverride = 4;\\n\\t\\t} else if (!moneyThreshOverride && ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tlet percentGrowth = await ns.grow(target);\\n\\t\\t\\tif (percentGrowth < 1) {\\n\\t\\t\\t\\tmoneyThreshOverride = 10;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t\\tif (securityThreshOverride) {\\n\\t\\t\\tsecurityThreshOverride--\\n\\t\\t}\\n\\n\\t\\tif (moneyThreshOverride) {\\n\\t\\t\\tmoneyThreshOverride--\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///4ca5585c-dfba-4fc5-8608-eb038e0f165a\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///4ca5585c-dfba-4fc5-8608-eb038e0f165a\"}],\"ramUsage\":2.65,\"server\":\"max-hardware\",\"moduleSequenceNumber\":162}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":163}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":164}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":165}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tlet bbFortAmt = 0.002;\\n\\tlet bbWeakAmt = 0.05;\\n\\tlet fundPct = 0.9;\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (\\n\\t\\t\\tns.isRunning(\\\"weaken.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"grow.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"hack.script\\\", attackServer, target)\\n\\t\\t) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor(fundPct / _getBaseHackPct());\\n\\t\\t\\tlet growT = Math.ceil(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.ceil(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.ceil(hackT * 1.65 + growT * 1.55 + weakenT + 1.55);\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///4ec010f4-4318-4230-887c-68c8e0aa1702\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///4ec010f4-4318-4230-887c-68c8e0aa1702\"}],\"ramUsage\":7.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":726}}],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":250000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-227577-Joe'sGuns.cct\",\"type\":\"Array Jumping Game\",\"data\":[5,2,2,4,3,0,6],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-784834.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[7,1],[3,3,6],[7,8,6,5],[8,2,1,4,3],[5,6,3,4,7,8],[1,4,7,8,8,3,9],[1,7,1,7,1,2,7,7]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"30.6.3.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":7.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"omega-net\",12],\"dataMap\":{},\"filename\":\"daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":277.452,\"onlineMoneyMade\":0,\"onlineRunningTime\":41018.40999999629,\"pid\":101,\"ramUsage\":7.75,\"server\":\"omega-net\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\ttarget = target || 'foodnstuff';\\n\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.45;\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(target);\\n\\t}\\n\\t\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(target);\\n\\t}\\n\\n\\tns.nuke(target);\\n\\n\\tlet moneyThreshOverride = 0;\\n\\tlet securityThreshOverride = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (!securityThreshOverride && ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tsecurityThreshOverride = 4;\\n\\t\\t} else if (!moneyThreshOverride && ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tlet percentGrowth = await ns.grow(target);\\n\\t\\t\\tif (percentGrowth < 1) {\\n\\t\\t\\t\\tmoneyThreshOverride = 10;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t\\tif (securityThreshOverride) {\\n\\t\\t\\tsecurityThreshOverride--\\n\\t\\t}\\n\\n\\t\\tif (moneyThreshOverride) {\\n\\t\\t\\tmoneyThreshOverride--\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///c0caae13-097e-4c7d-88e0-af381731c7bb\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///c0caae13-097e-4c7d-88e0-af381731c7bb\"}],\"ramUsage\":2.65,\"server\":\"omega-net\",\"moduleSequenceNumber\":167}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":168}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":169}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":170}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tlet bbFortAmt = 0.002;\\n\\tlet bbWeakAmt = 0.05;\\n\\tlet fundPct = 0.9;\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (\\n\\t\\t\\tns.isRunning(\\\"weaken.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"grow.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"hack.script\\\", attackServer, target)\\n\\t\\t) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor(fundPct / _getBaseHackPct());\\n\\t\\t\\tlet growT = Math.ceil(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.ceil(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.ceil(hackT * 1.65 + growT * 1.55 + weakenT + 1.55);\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///725b5484-f584-4b56-890d-20e4a25b1a44\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///725b5484-f584-4b56-890d-20e4a25b1a44\"}],\"ramUsage\":7.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":732}}],\"serversOnNetwork\":[\"CSEC\",\"comptek\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":32,\"hackDifficulty\":11,\"minDifficulty\":11,\"moneyAvailable\":1745926300,\"moneyMax\":1745926300,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":187,\"serverGrowth\":38}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"62.6.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":172}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":173}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":174}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tlet bbFortAmt = 0.002;\\n\\tlet bbWeakAmt = 0.05;\\n\\tlet fundPct = 0.9;\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (\\n\\t\\t\\tns.isRunning(\\\"weaken.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"grow.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"hack.script\\\", attackServer, target)\\n\\t\\t) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor(fundPct / _getBaseHackPct());\\n\\t\\t\\tlet growT = Math.ceil(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.ceil(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.ceil(hackT * 1.65 + growT * 1.55 + weakenT + 1.55);\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":7.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":175}}],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":14,\"minDifficulty\":14,\"moneyAvailable\":684180484.6159396,\"moneyMax\":1199651300,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":258,\"serverGrowth\":30}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"91.8.0.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":7.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"iron-gym\",12],\"dataMap\":{},\"filename\":\"daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":277.452,\"onlineMoneyMade\":0,\"onlineRunningTime\":41018.40999999629,\"pid\":93,\"ramUsage\":7.75,\"server\":\"iron-gym\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\ttarget = target || 'foodnstuff';\\n\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.45;\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(target);\\n\\t}\\n\\t\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(target);\\n\\t}\\n\\n\\tns.nuke(target);\\n\\n\\tlet moneyThreshOverride = 0;\\n\\tlet securityThreshOverride = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (!securityThreshOverride && ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tsecurityThreshOverride = 4;\\n\\t\\t} else if (!moneyThreshOverride && ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tlet percentGrowth = await ns.grow(target);\\n\\t\\t\\tif (percentGrowth < 1) {\\n\\t\\t\\t\\tmoneyThreshOverride = 10;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t\\tif (securityThreshOverride) {\\n\\t\\t\\tsecurityThreshOverride--\\n\\t\\t}\\n\\n\\t\\tif (moneyThreshOverride) {\\n\\t\\t\\tmoneyThreshOverride--\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///4dd84cbc-dae1-458d-a9f0-02eee2c83e38\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///4dd84cbc-dae1-458d-a9f0-02eee2c83e38\"}],\"ramUsage\":2.65,\"server\":\"iron-gym\",\"moduleSequenceNumber\":176}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":177}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":178}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":179}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tlet bbFortAmt = 0.002;\\n\\tlet bbWeakAmt = 0.05;\\n\\tlet fundPct = 0.9;\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (\\n\\t\\t\\tns.isRunning(\\\"weaken.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"grow.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"hack.script\\\", attackServer, target)\\n\\t\\t) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor(fundPct / _getBaseHackPct());\\n\\t\\t\\tlet growT = Math.ceil(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.ceil(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.ceil(hackT * 1.65 + growT * 1.55 + weakenT + 1.55);\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///cf99ba3d-665b-4118-b12b-0b5cfcbd4b25\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///cf99ba3d-665b-4118-b12b-0b5cfcbd4b25\"}],\"ramUsage\":7.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":724}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":500000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"23.7.8.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"aerocorp\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":500,\"serverGrowth\":29}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-318426-CyberSec.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"2064846113\",\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"82.6.3.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":976,\"serverGrowth\":59}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-269632.cct\",\"type\":\"Total Ways to Sum\",\"data\":20,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"9.6.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":771,\"serverGrowth\":41}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"65.6.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":536,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"43.4.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":354,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"1.5.8.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":7.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"avmnite-02h\",51],\"dataMap\":{},\"filename\":\"daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41018.40999999629,\"pid\":107,\"ramUsage\":7.75,\"server\":\"avmnite-02h\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":181}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":182}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":183}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tlet bbFortAmt = 0.002;\\n\\tlet bbWeakAmt = 0.05;\\n\\tlet fundPct = 0.9;\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (\\n\\t\\t\\tns.isRunning(\\\"weaken.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"grow.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"hack.script\\\", attackServer, target)\\n\\t\\t) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor(fundPct / _getBaseHackPct());\\n\\t\\t\\tlet growT = Math.ceil(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.ceil(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.ceil(hackT * 1.65 + growT * 1.55 + weakenT + 1.55);\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///d4718596-5d0d-41e9-913d-3b4ef7f8d052\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///d4718596-5d0d-41e9-913d-3b4ef7f8d052\"}],\"ramUsage\":7.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":738}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":207,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"51.9.6.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":507,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-916633.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":707146275,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-729180-NovaMedical.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":242003398,\"reward\":{\"name\":\"Nova Medical\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"61.5.8.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":185}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":186}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":187}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tlet bbFortAmt = 0.002;\\n\\tlet bbWeakAmt = 0.05;\\n\\tlet fundPct = 0.9;\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (\\n\\t\\t\\tns.isRunning(\\\"weaken.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"grow.script\\\", attackServer, target) || \\n\\t\\t\\tns.isRunning(\\\"hack.script\\\", attackServer, target)\\n\\t\\t) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor(fundPct / _getBaseHackPct());\\n\\t\\t\\tlet growT = Math.ceil(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.ceil(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.ceil(hackT * 1.65 + growT * 1.55 + weakenT + 1.55);\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///5aa97c14-ccad-4ba2-b2b8-b00e0c0df9ed\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///5aa97c14-ccad-4ba2-b2b8-b00e0c0df9ed\"}],\"ramUsage\":7.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":188}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":1.002,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":60,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"74.2.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"15.3.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"71.3.2.7\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":20977.04040944012,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":58.116003653336385,\"favor\":7,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":4555.571422974397,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":17321.797891147882}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":20.5391,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":21448.967758118208}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":1.0412,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":16547.245941217545}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":3271.7306289739468}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":63018.877960594014}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{\"c\":\"clear\",\"ch\":\"connect home\"}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":200,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"}}","VersionSave":"6","AllGangsSave":"","LastExportBonus":"1639848512422","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}
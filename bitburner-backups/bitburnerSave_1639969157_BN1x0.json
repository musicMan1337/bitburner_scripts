{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":293,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":67,\"intelligence\":0,\"hacking_chance_mult\":1.103560552605,\"hacking_speed_mult\":1.1152330702214106,\"hacking_money_mult\":1.0510100501,\"hacking_grow_mult\":1.0510100501,\"hacking_exp\":849940.4378230679,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":3292.267394189699,\"intelligence_exp\":0,\"hacking_mult\":1.2398502808517178,\"strength_mult\":1.0510100501,\"defense_mult\":1.0510100501,\"dexterity_mult\":1.103560552605,\"agility_mult\":1.103560552605,\"charisma_mult\":1.0510100501,\"hacking_exp_mult\":1.15611105511,\"strength_exp_mult\":1.15611105511,\"defense_exp_mult\":1.15611105511,\"dexterity_exp_mult\":1.15611105511,\"agility_exp_mult\":1.15611105511,\"charisma_exp_mult\":1.15611105511,\"company_rep_mult\":1.0510100501,\"faction_rep_mult\":1.0510100501,\"money\":113001212.18164253,\"city\":\"Volhaven\",\"location\":\"Icarus Microsystems\",\"jobs\":{\"Icarus Microsystems\":\"Software Consultant\"},\"companyName\":\"Icarus Microsystems\",\"currentServer\":\"home\",\"purchasedServers\":[\"proxy-0\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":11496.737779554123,\"onlineTimeSeconds\":41109.79999992966,\"ram\":64,\"totalMoneyGenerated\":415972731.8682755,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":13412.860742813144,\"onlineTimeSeconds\":40817.99999993524,\"ram\":64,\"totalMoneyGenerated\":360466596.34383136,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":12,\"level\":200,\"moneyGainRatePerSecond\":10858.03012513445,\"onlineTimeSeconds\":40776.199999936034,\"ram\":64,\"totalMoneyGenerated\":256713967.54928783,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":12,\"level\":200,\"moneyGainRatePerSecond\":10858.03012513445,\"onlineTimeSeconds\":40673.99999993799,\"ram\":64,\"totalMoneyGenerated\":228994398.2322964,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":10219.322470714775,\"onlineTimeSeconds\":40552.5999999403,\"ram\":64,\"totalMoneyGenerated\":213563042.94088,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":12,\"level\":200,\"moneyGainRatePerSecond\":10858.03012513445,\"onlineTimeSeconds\":35980.60000002656,\"ram\":64,\"totalMoneyGenerated\":149580177.42163798,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":10219.322470714775,\"onlineTimeSeconds\":35888.60000002664,\"ram\":64,\"totalMoneyGenerated\":143632193.8297786,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":10219.322470714775,\"onlineTimeSeconds\":35796.20000002673,\"ram\":64,\"totalMoneyGenerated\":143210653.47884676,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":10219.322470714775,\"onlineTimeSeconds\":35402.20000002672,\"ram\":64,\"totalMoneyGenerated\":143772486.0331615,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":12,\"level\":200,\"moneyGainRatePerSecond\":10858.03012513445,\"onlineTimeSeconds\":34536.00000002653,\"ram\":64,\"totalMoneyGenerated\":149019810.96109107,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":10219.322470714775,\"onlineTimeSeconds\":33796.400000038426,\"ram\":64,\"totalMoneyGenerated\":140286527.70454526,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":10219.322470714775,\"onlineTimeSeconds\":16900.200000020654,\"ram\":64,\"totalMoneyGenerated\":133929036.59497242,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":12,\"level\":200,\"moneyGainRatePerSecond\":10858.03012513445,\"onlineTimeSeconds\":14904.000000013608,\"ram\":64,\"totalMoneyGenerated\":136336552.35032192,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":12,\"level\":200,\"moneyGainRatePerSecond\":10858.03012513445,\"onlineTimeSeconds\":14232.600000011165,\"ram\":64,\"totalMoneyGenerated\":134754958.46419248,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":10219.322470714775,\"onlineTimeSeconds\":12757.400000005799,\"ram\":64,\"totalMoneyGenerated\":122481485.35111088,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":12,\"level\":200,\"moneyGainRatePerSecond\":10858.03012513445,\"onlineTimeSeconds\":11282.400000001036,\"ram\":64,\"totalMoneyGenerated\":115659765.1799388,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":10219.322470714775,\"onlineTimeSeconds\":9926.40000000227,\"ram\":64,\"totalMoneyGenerated\":98224507.02985337,\"name\":\"hacknet-node-16\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Netburners\",\"Sector-12\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":6,\"name\":\"NeuroFlux Governor\"},{\"level\":7,\"name\":\"NeuroFlux Governor\"},{\"level\":8,\"name\":\"NeuroFlux Governor\"},{\"level\":9,\"name\":\"NeuroFlux Governor\"},{\"level\":10,\"name\":\"NeuroFlux Governor\"},{\"level\":11,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":5,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.0510100501,\"crime_success_mult\":1.0510100501,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":50,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":28800000,\"work_money_mult\":1.0510100501,\"hacknet_node_money_mult\":1.46248048471415,\"hacknet_node_purchase_cost_mult\":0.7275073881734999,\"hacknet_node_ram_cost_mult\":0.9509900498999999,\"hacknet_node_core_cost_mult\":0.9509900498999999,\"hacknet_node_level_cost_mult\":0.8083415424149999,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1639969156841,\"totalPlaytime\":433256400,\"playtimeSinceLastAug\":41172800,\"playtimeSinceLastBitnode\":433256400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":194332086.5213583,\"hacknet\":3086598891.3626046,\"hacknet_expenses\":-1919272352.286227,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":113000212.1816423,\"work\":8226615.738180897,\"servers\":-880000,\"other\":-3900000,\"augmentations\":-1252105029.1150718}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-9911000,\"class\":-73920,\"codingcontract\":0,\"corporation\":0,\"crime\":1248360,\"gang\":0,\"hacking\":4224155174.7067747,\"hacknet\":28161516931.919575,\"hacknet_expenses\":-11023885549.074318,\"hospitalization\":-1879790.2560754083,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":822435899.6531668,\"work\":27814789.50816293,\"servers\":-4648394276.312332,\"other\":-66500000,\"augmentations\":-15841654818.533201}},\"scriptProdSinceLastAug\":193727928,\"exploits\":[],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"95.5.4.6\",\"isConnectedTo\":true,\"maxRam\":2048,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe-1.76%-INC\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\ttarget = target || 'foodnstuff';\\n\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.45;\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(target);\\n\\t}\\n\\t\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(target);\\n\\t}\\n\\n\\tns.nuke(target);\\n\\n\\tlet moneyThreshOverride = 0;\\n\\tlet securityThreshOverride = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (!securityThreshOverride && ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tsecurityThreshOverride = 4;\\n\\t\\t} else if (!moneyThreshOverride && ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tlet percentGrowth = await ns.grow(target);\\n\\t\\t\\tif (percentGrowth < 1) {\\n\\t\\t\\t\\tmoneyThreshOverride = 10;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tmoneyThreshOverride = 4;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t\\tif (securityThreshOverride) {\\n\\t\\t\\tsecurityThreshOverride--\\n\\t\\t}\\n\\n\\t\\tif (moneyThreshOverride) {\\n\\t\\t\\tmoneyThreshOverride--\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///a7cf0364-c8b1-4d05-a53e-1ee1dd627301\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///a7cf0364-c8b1-4d05-a53e-1ee1dd627301\"}],\"ramUsage\":2.65,\"server\":\"home\",\"moduleSequenceNumber\":78}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\n\\thacknet-auto.script for Bitburner v0.47.2\\n\\tWinners don't use copyright\\n    \\n\\tLatest version of this script should be at\\n\\t\\thttps://github.com/iuriguilherme/netscripts.d\\n\\tBitburner should be at https://github.com/danielyxie/bitburner\\n    \\n\\tThis script requires 5.70 GB of RAM to run for 1 thread(s)\\n    \\n\\tThis script will buy a Hacknet Node, fully upgrade it and then buy \\n\\tthe next one in an infinite loop. If the cost of the next upgrade \\n\\tis higher than buying a new Hacknet Node, then a new one will be \\n\\tbought before the last one is upgraded. There is an option to set \\n\\tthe budget limit.\\n*/\\n\\n// We will not buy anything if there's less money than this ammount\\nreserveMoney = 1000;\\n// Number of times to upgrade (shouldn't have to change this)\\nn = 1;\\n\\ndisableLog(\\\"getServerMoneyAvailable\\\");\\n\\n// Buy first HacknetNode if there are none\\nif (\\n\\thacknet.numNodes() === 0 &&\\n\\tgetServerMoneyAvailable(\\\"home\\\") >= reserveMoney\\n) {\\n\\thacknet.purchaseNode();\\n\\tprint(\\n\\t\\t\\\"Purchased \\\" +\\n\\t\\thacknet.getNodeStats((hacknet.numNodes() - 1)).name +\\n\\t\\t\\\" because there was none.\\\"\\n\\t);\\n}\\n\\n// If there are no Hacknet Nodes, we can't do anything, so the script \\n// ends.\\nwhile (hacknet.numNodes() > 0) {\\n\\t// If there is not enough money, we wait for it instead of ending \\n\\t// the loop.\\n\\twhile (getServerMoneyAvailable(\\\"home\\\") >= reserveMoney) {\\n\\t\\tfor (i = 0; i < hacknet.numNodes(); i++) {\\n\\t\\t\\twhile (\\n\\t\\t\\t\\thacknet.getLevelUpgradeCost(i, n) < Infinity &&\\n\\t\\t\\t\\thacknet.upgradeLevel(i, n)\\n\\t\\t\\t) {\\n\\t\\t\\t\\tprint(\\n\\t\\t\\t\\t\\t\\\"Upgraded \\\" +\\n\\t\\t\\t\\t\\thacknet.getNodeStats(i).name +\\n\\t\\t\\t\\t\\t\\\" to level \\\" +\\n\\t\\t\\t\\t\\thacknet.getNodeStats(i).level\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t\\twhile (\\n\\t\\t\\t\\thacknet.getRamUpgradeCost(i, n) < Infinity &&\\n\\t\\t\\t\\thacknet.upgradeRam(i, n)\\n\\t\\t\\t) {\\n\\t\\t\\t\\tprint(\\n\\t\\t\\t\\t\\t\\\"Upgraded \\\" +\\n\\t\\t\\t\\t\\thacknet.getNodeStats(i).name +\\n\\t\\t\\t\\t\\t\\\" RAM to \\\" +\\n\\t\\t\\t\\t\\thacknet.getNodeStats(i).ram\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t\\twhile (\\n\\t\\t\\t\\thacknet.getCoreUpgradeCost(i, n) < Infinity &&\\n\\t\\t\\t\\thacknet.upgradeCore(i, n)\\n\\t\\t\\t) {\\n\\t\\t\\t\\tprint(\\n\\t\\t\\t\\t\\t\\\"Upgraded \\\" +\\n\\t\\t\\t\\t\\thacknet.getNodeStats(i).name +\\n\\t\\t\\t\\t\\t\\\" core to \\\" +\\n\\t\\t\\t\\t\\thacknet.getNodeStats(i).core\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t} // END for (i = 0; i < hacknet.numNodes(); i++)\\n\\t\\t// Buy next Hacknet Node if the last one is already fully \\n\\t\\t// upgraded. If for some reason the last Hacknet Node is fully \\n\\t\\t// upgraded and the others don't, the loop above will still \\n\\t\\t// attempt to upgrade them all.\\n\\t\\tif (\\n\\t\\t\\thacknet.getLevelUpgradeCost(\\n\\t\\t\\t\\t(hacknet.numNodes() - 1), n) === Infinity &&\\n\\t\\t\\thacknet.getRamUpgradeCost(\\n\\t\\t\\t\\t(hacknet.numNodes() - 1), n) === Infinity &&\\n\\t\\t\\thacknet.getCoreUpgradeCost(\\n\\t\\t\\t\\t(hacknet.numNodes() - 1), n) === Infinity\\n\\t\\t) {\\n\\t\\t\\thacknet.purchaseNode();\\n\\t\\t\\tprint(\\n\\t\\t\\t\\t\\\"Purchased \\\" +\\n\\t\\t\\t\\thacknet.getNodeStats((hacknet.numNodes() - 1)).name +\\n\\t\\t\\t\\t\\\" because the last one couldn't be upgraded further.\\\"\\n\\t\\t\\t);\\n\\t\\t} else if (\\n\\t\\t\\t// Or buy the next Hacknet Node if the next upgrade is more \\n\\t\\t\\t// expensive than buying a new Hacknet Node.\\n\\t\\t\\thacknet.getLevelUpgradeCost(\\n\\t\\t\\t\\t(hacknet.numNodes() - 1), n) >\\n\\t\\t\\thacknet.getPurchaseNodeCost() &&\\n\\t\\t\\thacknet.getRamUpgradeCost(\\n\\t\\t\\t\\t(hacknet.numNodes() - 1), n) >\\n\\t\\t\\thacknet.getPurchaseNodeCost() &&\\n\\t\\t\\thacknet.getCoreUpgradeCost(\\n\\t\\t\\t\\t(hacknet.numNodes() - 1), n) >\\n\\t\\t\\thacknet.getPurchaseNodeCost()\\n\\t\\t) {\\n\\t\\t\\thacknet.purchaseNode();\\n\\t\\t\\tprint(\\n\\t\\t\\t\\t\\\"Purchased \\\" +\\n\\t\\t\\t\\thacknet.getNodeStats((hacknet.numNodes() - 1)).name +\\n\\t\\t\\t\\t\\\" because it was cheaper than next upgrade.\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hacknet.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":79}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\tlet purchased = ns.getPurchasedServers();\\n\\tlet host = purchased[0] || 'home';\\n\\n\\tfunction __readNodes__(fPath) {\\n\\t\\tlet nodes = ns.read(fPath);\\n\\t\\tnodes = nodes.split(',');\\n\\t\\treturn nodes;\\n\\t}\\n\\n\\tasync function __scanAndWriteAllNodes__() {\\n\\t\\tlet nodes = [];\\n\\t\\tlet newNodes = ['home'];\\n\\t\\tlet newNodes2 = [];\\n\\t\\tlet repeat = true;\\n\\n\\t\\twhile (repeat) {\\n\\t\\t\\tnewNodes2 = [];\\n\\t\\t\\trepeat = false;\\n\\n\\t\\t\\tlet i, j;\\n\\t\\t\\tfor (i = 0; i < newNodes.length; i++) {\\n\\t\\t\\t\\tlet connected = ns.scan(newNodes[i]);\\n\\n\\t\\t\\t\\tfor (j = 0; j < connected.length; j++) {\\n\\t\\t\\t\\t\\tlet node = connected[j];\\n\\t\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\t\\t!nodes.includes(node) &&\\n\\t\\t\\t\\t\\t\\t!newNodes.includes(node) &&\\n\\t\\t\\t\\t\\t\\t!newNodes2.includes(node) &&\\n\\t\\t\\t\\t\\t\\t!host !== node\\n\\t\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\t\\tnewNodes2.push(node);\\n\\t\\t\\t\\t\\t\\trepeat = true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tnodes = nodes.concat(newNodes);\\n\\t\\t\\tnewNodes = newNodes2;\\n\\t\\t}\\n\\n\\t\\tnodes = nodes.concat(purchased)\\n\\t\\tawait ns.write('nodes.txt', nodes, 'w');\\n\\t}\\n\\n\\tfunction __nukeAvailableNodes__() {\\n\\t\\tlet nodes = __readNodes__('nodes.txt');\\n\\t\\tlet myHackLevel = ns.getHackingLevel();\\n\\n\\t\\tlet Programs = [\\n\\t\\t\\tns.fileExists('BruteSSH.exe'),\\n\\t\\t\\tns.fileExists('FTPCrack.exe'),\\n\\t\\t\\tns.fileExists('relaySMTP.exe'),\\n\\t\\t\\tns.fileExists('HTTPWorm.exe'),\\n\\t\\t\\tns.fileExists('SQLInject.exe')\\n\\t\\t];\\n\\n\\t\\tlet availPrograms = Programs.reduce((num, bool) => num + bool, 0);\\n\\n\\t\\tnodes.forEach((node) => {\\n\\t\\t\\tif (\\n\\t\\t\\t\\t!ns.hasRootAccess(node) &&\\n\\t\\t\\t\\tns.getServerNumPortsRequired(node) <= availPrograms &&\\n\\t\\t\\t\\tns.getServerRequiredHackingLevel(node) <= myHackLevel\\n\\t\\t\\t) {\\n\\t\\t\\t\\tPrograms.forEach((exists, i) => {\\n\\t\\t\\t\\t\\tif (exists) {\\n\\t\\t\\t\\t\\t\\tswitch (i) {\\n\\t\\t\\t\\t\\t\\t\\tcase 0:\\n\\t\\t\\t\\t\\t\\t\\t\\tns.brutessh(node);\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t\\tcase 1:\\n\\t\\t\\t\\t\\t\\t\\t\\tns.ftpcrack(node);\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t\\tcase 2:\\n\\t\\t\\t\\t\\t\\t\\t\\tns.relaysmtp(node);\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t\\tcase 3:\\n\\t\\t\\t\\t\\t\\t\\t\\tns.httpworm(node);\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t\\tcase 4:\\n\\t\\t\\t\\t\\t\\t\\t\\tns.sqlinject(node);\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\tns.nuke(node);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\n\\tasync function __scanAndWriteRootedNodes__() {\\n\\t\\tlet nodes = __readNodes__('nodes.txt');\\n\\t\\tlet rooted = nodes.reduce((arr, node) => {\\n\\t\\t\\t//don't hack ourselves\\n\\t\\t\\tif (ns.hasRootAccess(node) && node !== host) {\\n\\t\\t\\t\\tarr.push(node);\\n\\t\\t\\t}\\n\\t\\t\\treturn arr;\\n\\t\\t}, []);\\n\\n\\t\\tns.tprint(rooted.length);\\n\\t\\tawait ns.write('rooted.txt', rooted, 'w');\\n\\t}\\n\\n\\t//read the nodes\\n\\tawait __scanAndWriteAllNodes__();\\n\\t__nukeAvailableNodes__();\\n\\tawait __scanAndWriteRootedNodes__();\\n\\n\\t//load nodes\\n\\tlet attackNodes = __readNodes__('rooted.txt');\\n\\tif (purchased.length) {\\n\\t\\tattackNodes = attackNodes.concat(purchased);\\n\\t}\\n\\n\\tlet files = ['weaken.script', 'grow.script', 'hack.script', 'daemon.js'];\\n\\tawait ns.scp(files, 'home', host);\\n\\n\\t//spin up attack servers\\n\\tattackNodes.forEach((attacker) => {\\n\\t\\tns.tprint(attacker)\\n\\t\\tns.exec('main__hack__.js', host, 1, host, attacker);\\n\\t});\\n}\",\"filename\":\"setup_hacks.js\",\"url\":\"blob:file:///d070d657-c1d1-48aa-961c-7fa5cf818016\",\"module\":{},\"dependencies\":[{\"filename\":\"setup_hacks.js\",\"url\":\"blob:file:///d070d657-c1d1-48aa-961c-7fa5cf818016\"}],\"ramUsage\":6.65,\"server\":\"home\",\"moduleSequenceNumber\":1965}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet server = ns.args[0];\\n\\n\\tlet maxRam = ns.getServerMaxRam('home');\\n\\tlet usedRam = ns.getServerUsedRam('home');\\n\\tlet scriptRam = ns.getScriptRam('basic_hack.js');\\n\\tlet threads = Math.floor((maxRam - usedRam) / scriptRam);\\n\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t}\\n\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t}\\n\\n\\tns.nuke(server);\\n\\tns.run('basic_hack.js', threads, server);\\n}\",\"filename\":\"home_hack.js\",\"url\":\"blob:file:///e4d5c7e1-2a3e-4351-a242-0862f6f2a700\",\"module\":\"\",\"dependencies\":[{\"filename\":\"home_hack.js\",\"url\":\"blob:file:///e4d5c7e1-2a3e-4351-a242-0862f6f2a700\"}],\"ramUsage\":3.05,\"server\":\"home\",\"moduleSequenceNumber\":81}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":82}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":83}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":84}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\tlet [hostName, attackServer] = ns.args;\\n\\n\\tns.tprint(attackServer)\\n\\n\\tfunction _readNodes(fPath) {\\n\\t\\tlet nodes = ns.read(fPath);\\n\\t\\tnodes = nodes.split(',');\\n\\t\\treturn nodes;\\n\\t}\\n\\n\\tfunction _findAttackableNodes() {\\n\\t\\tlet rooted = _readNodes('rooted.txt');\\n\\t\\tlet targetNodes = [];\\n\\n\\t\\t//check which are valid for attacking\\n\\t\\tfor (let i = 0; i < rooted.length; i++) {\\n\\t\\t\\tif (rooted[i] !== 'home' && ns.getServerMaxMoney(rooted[i])) {\\n\\t\\t\\t\\ttargetNodes.push(rooted[i]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn targetNodes;\\n\\t}\\n\\n\\t//prep attackServer\\n\\tlet files = ['weaken.script', 'grow.script', 'hack.script', 'daemon.js'];\\n\\tawait ns.scp(files, 'home', attackServer);\\n\\n\\t//load nodes\\n\\tlet targetNodes = _findAttackableNodes();\\n\\n\\t//calc ram and threads per daemon\\n\\tlet serverRam = ns.getServerMaxRam(attackServer);\\n\\tlet daemonRam = ns.getScriptRam('daemon.js');\\n\\tlet minRamPerDaemon =\\n\\t\\tns.getScriptRam('weaken.script') +\\n\\t\\tns.getScriptRam('grow.script') +\\n\\t\\tns.getScriptRam('hack.script');\\n\\n\\tlet leftoverRam = serverRam - daemonRam * targetNodes.length;\\n\\tlet ramPerDaemon = leftoverRam / targetNodes.length;\\n\\n\\tns.tprint(attackServer);\\n\\twhile (ramPerDaemon < minRamPerDaemon) {\\n\\t\\tns.tprint(`re-calc threads: ${ramPerDaemon}`);\\n\\n\\t\\ttargetNodes.pop();\\n\\t\\tif (!targetNodes.length) {\\n\\t\\t\\tns.tprint(`'${attackServer}' - insufficient RAM: exiting`);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tleftoverRam = serverRam - daemonRam * targetNodes.length;\\n\\t\\tramPerDaemon = leftoverRam / targetNodes.length;\\n\\t}\\n\\tns.tprint(`ram/daemon: ${ramPerDaemon}`);\\n\\n\\t//start daemons\\n\\ttargetNodes.forEach((target) => {\\n\\t\\tif (attackServer !== hostName) {\\n\\t\\t\\tns.killall(attackServer);\\n\\t\\t}\\n\\n\\t\\tns.exec(\\n\\t\\t\\t'daemon.js',\\n\\t\\t\\tattackServer,\\n\\t\\t\\t1,\\n\\t\\t\\ttarget,\\n\\t\\t\\tattackServer,\\n\\t\\t\\tramPerDaemon\\n\\t\\t);\\n\\t});\\n\\n\\tns.tprint('daemon count: ' + targetNodes.length);\\n}\",\"filename\":\"main_hack.js\",\"url\":\"blob:file:///eb2fd2e6-d4bc-4ea2-b785-755af1f7d12b\",\"module\":\"\",\"dependencies\":[{\"filename\":\"main_hack.js\",\"url\":\"blob:file:///eb2fd2e6-d4bc-4ea2-b785-755af1f7d12b\"}],\"ramUsage\":4.25,\"server\":\"home\",\"moduleSequenceNumber\":1717}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\t// ns.enableLog()\\n\\n\\tlet [target, host, daemonRam] = ns.args;\\n\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet maxMoney = ns.getServerMaxMoney(target);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = Math.floor(daemonRam / weakenRam);\\n\\t\\twhile (!__ramCheck__(host, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT--;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\twhile (weakenTR + growTR < daemonRam) {\\n\\t\\t\\tgrowT++;\\n\\t\\t\\tweakened += 0.004;\\n\\t\\t\\tweakenT = Math.floor(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\n\\t\\tlet hackMoneyPct = ns.hackAnalyze(target);\\n\\t\\tlet growPerT = ns.growthAnalyze(target, hackMoneyPct);\\n\\t\\twhile (weakenTR + growTR + hackTR < daemonRam) {\\n\\t\\t\\thackT++;\\n\\t\\t\\tweakened += 0.002;\\n\\t\\t\\tweakenT = Math.floor(weakened / 0.05);\\n\\t\\t\\tgrowT = Math.floor(hackT * growPerT);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', host, target)) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(target);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT) {\\n\\t\\t\\tns.exec('weaken.script', host, weakenT, target);\\n\\t\\t}\\n\\n\\t\\tif (growT) {\\n\\t\\t\\tns.exec('grow.script', host, growT, target);\\n\\t\\t}\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\tns.exec('hack.script', host, hackT, target);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///a5d6e31e-051d-44a8-911e-cd3ddad2ea1f\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///a5d6e31e-051d-44a8-911e-cd3ddad2ea1f\"}],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":86}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"proxy-0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"nodes.txt\",\"text\":\"home,n00dles,foodnstuff,sigma-cosmetics,joesguns,hong-fang-tea,harakiri-sushi,iron-gym,darkweb,proxy-0,zer0,nectar-net,max-hardware,CSEC,silver-helix,neo-net,phantasy,omega-net,the-hub,comptek,netlink,johnson-ortho,crush-fitness,avmnite-02h,rothman-uni,summit-uni,zb-institute,syscore,I.I.I.I,catalyst,rho-construction,lexo-corp,alpha-ent,aevum-police,millenium-fitness,aerocorp,global-pharm,galactic-cyber,snap-fitness,unitalife,omnia,deltaone,defcomm,univ-energy,solaris,zeus-med,icarus,nova-med,taiyang-digital,infocomm,zb-def,applied-energetics,run4theh111z,titan-labs,microdyne,vitalife,helios,stormtech,fulcrumtech,omnitek,.,kuai-gong,4sigma,blade,nwo,clarkinc,b-and-a,powerhouse-fitness,megacorp,fulcrumassets,ecorp,The-Cave,proxy-0\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"rooted.txt\",\"text\":\"home,n00dles,foodnstuff,sigma-cosmetics,joesguns,hong-fang-tea,harakiri-sushi,iron-gym,zer0,nectar-net,max-hardware,CSEC,silver-helix,neo-net,phantasy,omega-net,johnson-ortho,crush-fitness,avmnite-02h\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"63.1.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":38826492618,\"moneyMax\":970662315450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1217,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"55.5.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":59450972613,\"moneyMax\":1486274315325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1141,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"6.1.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":21162945201,\"moneyMax\":529073630025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1113,\"serverGrowth\":80}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"97.1.2.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":11297414065,\"moneyMax\":282435351625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1166,\"serverGrowth\":60}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"48.5.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":32209550876,\"moneyMax\":805238771900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1036,\"serverGrowth\":79}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"43.9.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":19415234193,\"moneyMax\":485380854825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1072,\"serverGrowth\":59}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"41.4.8.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"blade\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":16338187299,\"moneyMax\":408454682475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":984,\"serverGrowth\":97}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-710421-Netburners.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"20034230110\",\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"81.7.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":17641317089,\"moneyMax\":441032927225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1023,\"serverGrowth\":87}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"73.8.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":21097720485,\"moneyMax\":527443012125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1122,\"serverGrowth\":99}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"62.2.7.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":1733192041,\"moneyMax\":43329801025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1148,\"serverGrowth\":94}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"47.7.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1498,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"71.3.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1070624621,\"moneyMax\":26765615525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":924,\"serverGrowth\":80}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-491294-IcarusMicrosystems.cct\",\"type\":\"Total Ways to Sum\",\"data\":11,\"reward\":{\"name\":\"Icarus Microsystems\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"8.0.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":829648651,\"moneyMax\":20741216275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":887,\"serverGrowth\":59}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"96.8.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":808401517,\"moneyMax\":20210037925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":877,\"serverGrowth\":64}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"89.7.6.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":553447734,\"moneyMax\":13836193350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":808,\"serverGrowth\":71}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"49.0.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":791165960,\"moneyMax\":19779149000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":861,\"serverGrowth\":60}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"97.8.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":945809776,\"moneyMax\":23645244400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":914,\"serverGrowth\":89}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"89.1.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1171143350,\"moneyMax\":29278583750,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":832,\"serverGrowth\":82}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"61.3.4.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":782670342,\"moneyMax\":19566758550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":862,\"serverGrowth\":77}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"73.9.3.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":663743452,\"moneyMax\":16593586300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":815,\"serverGrowth\":83}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"80.6.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":808852075,\"moneyMax\":20221301875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":909,\"serverGrowth\":70}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"2.9.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":831496157,\"moneyMax\":20787403925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":828,\"serverGrowth\":78}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-456947.cct\",\"type\":\"Total Ways to Sum\",\"data\":53,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"20.9.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1035311266,\"moneyMax\":25882781650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":891,\"serverGrowth\":61}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"27.3.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":931161436,\"moneyMax\":23279035900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":868,\"serverGrowth\":69}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"86.7.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":903589763,\"moneyMax\":22589744075,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":815,\"serverGrowth\":73}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"36.4.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":804352805,\"moneyMax\":20108820125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":778,\"serverGrowth\":74}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"77.9.7.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":839332730,\"moneyMax\":20983318250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":777,\"serverGrowth\":73}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"49.8.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1411136296,\"moneyMax\":35278407400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":874,\"serverGrowth\":58}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"31.8.4.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1641054794,\"moneyMax\":41026369850,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":835,\"serverGrowth\":82}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"87.6.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1145079893,\"moneyMax\":28626997325,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":844,\"serverGrowth\":67}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"41.7.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1491819132,\"moneyMax\":37295478300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":840,\"serverGrowth\":74}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"36.3.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":1082923697,\"moneyMax\":27073092425,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":824,\"serverGrowth\":71}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-934616.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[12,19],[8,12],[5,10],[6,11],[24,30],[22,23],[13,23],[9,19],[11,16],[17,18],[10,13],[21,22],[21,26],[23,33],[13,17],[1,9],[16,24],[20,23],[12,16],[3,9]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"98.0.0.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":755380747,\"moneyMax\":18884518675,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":655,\"serverGrowth\":58}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-78243.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-6,-9,7,7,-6,-8,-1,5,6,9,-10,-4,-10,5,0,-5],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"72.9.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":596891039,\"moneyMax\":14922275975,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":496,\"serverGrowth\":41}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-628324.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"))(()a))a)))a()(\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"86.0.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":692808374,\"moneyMax\":17320209350,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":551,\"serverGrowth\":55}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"79.4.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":285583960,\"moneyMax\":7139599000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":423,\"serverGrowth\":40}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"81.9.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":232017116,\"moneyMax\":5800427900,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":424,\"serverGrowth\":40}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-224751.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[5,[142,29,189,145,100,147,120,10,131,56,19,11,63,172]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"98.8.7.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":805916887,\"moneyMax\":20147922175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":732,\"serverGrowth\":78}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"97.5.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":242530446,\"moneyMax\":6063261150,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":474,\"serverGrowth\":51}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"84.6.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":559260457,\"moneyMax\":13981511425,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":628,\"serverGrowth\":68}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"54.2.3.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":398304341,\"moneyMax\":9957608525,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":446,\"serverGrowth\":44}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"71.8.5.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":160629889,\"moneyMax\":4015747225,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":305,\"serverGrowth\":49}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"37.8.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":222087295,\"moneyMax\":5552182375,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":394,\"serverGrowth\":64}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"70.8.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":382,\"serverGrowth\":63}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-553301-Sector-12.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-4,10,0,5,7,3,8],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"94.2.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":78529865,\"moneyMax\":1963246625,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":289,\"serverGrowth\":41}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"42.2.9.6\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":87}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":88}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":89}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\tns.print(\\\"Free RAM: \\\" + free + \\\" - Amt: \\\" + amt);\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tlet hackRam = 1.7;\\n\\tlet growRam = 1.75;\\n\\tlet weakenRam = 1.75;\\n\\tlet fundPct = 0.9;\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning(\\\"weaken.script\\\", attackServer, target)) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor((fundPct / _getBaseHackPct()) - growRam);\\n\\t\\t\\tlet growT = Math.floor(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.floor(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.floor(utilThreads * 1.08 * 1.55);\\n\\n\\t\\t\\tlet maxGrowT = Math.floor((totalRam * 0.08) - growRam);\\n\\t\\t\\tmaxGrowT = maxGrowT < 1 ? 1 : maxGrowT;\\n\\t\\t\\t\\n\\t\\t\\tlet maxWeakenT = Math.floor((totalRam * 0.55) - weakenRam);\\n\\t\\t\\tmaxWeakenT = maxWeakenT < 1 ? 1 : maxWeakenT;\\n\\n\\t\\t\\tlet maxHackT = Math.floor(totalRam - maxGrowT - maxWeakenT - hackRam);\\n\\t\\t\\tmaxHackT = maxHackT < 1 ? 1 : maxHackT;\\n\\n\\t\\t\\tif (hackT > maxHackT) {\\n\\t\\t\\t\\thackT = maxHackT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (weakenT > maxWeakenT) {\\n\\t\\t\\t\\tweakenT = maxWeakenT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (growT > maxGrowT) {\\n\\t\\t\\t\\tgrowT = maxGrowT;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\t\\t\\t// ns.print(\\\"totalRam: \\\" + totalRam)\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":7.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":90}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.4140000000000001,\"minDifficulty\":1,\"moneyAvailable\":179698,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"31.0.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":91}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":92}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":93}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\tns.print(\\\"Free RAM: \\\" + free + \\\" - Amt: \\\" + amt);\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tlet hackRam = 1.7;\\n\\tlet growRam = 1.75;\\n\\tlet weakenRam = 1.75;\\n\\tlet fundPct = 0.9;\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning(\\\"weaken.script\\\", attackServer, target)) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor((fundPct / _getBaseHackPct()) - growRam);\\n\\t\\t\\tlet growT = Math.floor(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.floor(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.floor(utilThreads * 1.08 * 1.55);\\n\\n\\t\\t\\tlet maxGrowT = Math.floor((totalRam * 0.08) - growRam);\\n\\t\\t\\tmaxGrowT = maxGrowT < 1 ? 1 : maxGrowT;\\n\\t\\t\\t\\n\\t\\t\\tlet maxWeakenT = Math.floor((totalRam * 0.55) - weakenRam);\\n\\t\\t\\tmaxWeakenT = maxWeakenT < 1 ? 1 : maxWeakenT;\\n\\n\\t\\t\\tlet maxHackT = Math.floor(totalRam - maxGrowT - maxWeakenT - hackRam);\\n\\t\\t\\tmaxHackT = maxHackT < 1 ? 1 : maxHackT;\\n\\n\\t\\t\\tif (hackT > maxHackT) {\\n\\t\\t\\t\\thackT = maxHackT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (weakenT > maxWeakenT) {\\n\\t\\t\\t\\tweakenT = maxWeakenT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (growT > maxGrowT) {\\n\\t\\t\\t\\tgrowT = maxGrowT;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\t\\t\\t// ns.print(\\\"totalRam: \\\" + totalRam)\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///fbaf2e3a-7060-4b42-aa5c-bb9096844314\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///fbaf2e3a-7060-4b42-aa5c-bb9096844314\"}],\"ramUsage\":7.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":94}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":47557450.04522478,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-304834.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"14015945240\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"25.7.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":95}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":96}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":97}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\tns.print(\\\"Free RAM: \\\" + free + \\\" - Amt: \\\" + amt);\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tlet hackRam = 1.7;\\n\\tlet growRam = 1.75;\\n\\tlet weakenRam = 1.75;\\n\\tlet fundPct = 0.9;\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning(\\\"weaken.script\\\", attackServer, target)) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor((fundPct / _getBaseHackPct()) - growRam);\\n\\t\\t\\tlet growT = Math.floor(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.floor(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.floor(utilThreads * 1.08 * 1.55);\\n\\n\\t\\t\\tlet maxGrowT = Math.floor((totalRam * 0.08) - growRam);\\n\\t\\t\\tmaxGrowT = maxGrowT < 1 ? 1 : maxGrowT;\\n\\t\\t\\t\\n\\t\\t\\tlet maxWeakenT = Math.floor((totalRam * 0.55) - weakenRam);\\n\\t\\t\\tmaxWeakenT = maxWeakenT < 1 ? 1 : maxWeakenT;\\n\\n\\t\\t\\tlet maxHackT = Math.floor(totalRam - maxGrowT - maxWeakenT - hackRam);\\n\\t\\t\\tmaxHackT = maxHackT < 1 ? 1 : maxHackT;\\n\\n\\t\\t\\tif (hackT > maxHackT) {\\n\\t\\t\\t\\thackT = maxHackT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (weakenT > maxWeakenT) {\\n\\t\\t\\t\\tweakenT = maxWeakenT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (growT > maxGrowT) {\\n\\t\\t\\t\\tgrowT = maxGrowT;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\t\\t\\t// ns.print(\\\"totalRam: \\\" + totalRam)\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///40cd1ea2-ef54-49b9-91f5-0db8d9e28e2b\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///40cd1ea2-ef54-49b9-91f5-0db8d9e28e2b\"}],\"ramUsage\":7.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":98}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":57500000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"9.2.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":99}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":100}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":101}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\tns.print(\\\"Free RAM: \\\" + free + \\\" - Amt: \\\" + amt);\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tlet hackRam = 1.7;\\n\\tlet growRam = 1.75;\\n\\tlet weakenRam = 1.75;\\n\\tlet fundPct = 0.9;\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning(\\\"weaken.script\\\", attackServer, target)) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor((fundPct / _getBaseHackPct()) - growRam);\\n\\t\\t\\tlet growT = Math.floor(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.floor(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.floor(utilThreads * 1.08 * 1.55);\\n\\n\\t\\t\\tlet maxGrowT = Math.floor((totalRam * 0.08) - growRam);\\n\\t\\t\\tmaxGrowT = maxGrowT < 1 ? 1 : maxGrowT;\\n\\t\\t\\t\\n\\t\\t\\tlet maxWeakenT = Math.floor((totalRam * 0.55) - weakenRam);\\n\\t\\t\\tmaxWeakenT = maxWeakenT < 1 ? 1 : maxWeakenT;\\n\\n\\t\\t\\tlet maxHackT = Math.floor(totalRam - maxGrowT - maxWeakenT - hackRam);\\n\\t\\t\\tmaxHackT = maxHackT < 1 ? 1 : maxHackT;\\n\\n\\t\\t\\tif (hackT > maxHackT) {\\n\\t\\t\\t\\thackT = maxHackT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (weakenT > maxWeakenT) {\\n\\t\\t\\t\\tweakenT = maxWeakenT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (growT > maxGrowT) {\\n\\t\\t\\t\\tgrowT = maxGrowT;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\t\\t\\t// ns.print(\\\"totalRam: \\\" + totalRam)\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///1bbc4124-de48-481e-b3b2-85aee836fd16\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///1bbc4124-de48-481e-b3b2-85aee836fd16\"}],\"ramUsage\":7.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":102}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":62500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"0.6.6.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":103}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":104}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":105}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\tns.print(\\\"Free RAM: \\\" + free + \\\" - Amt: \\\" + amt);\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tlet hackRam = 1.7;\\n\\tlet growRam = 1.75;\\n\\tlet weakenRam = 1.75;\\n\\tlet fundPct = 0.9;\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning(\\\"weaken.script\\\", attackServer, target)) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor((fundPct / _getBaseHackPct()) - growRam);\\n\\t\\t\\tlet growT = Math.floor(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.floor(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.floor(utilThreads * 1.08 * 1.55);\\n\\n\\t\\t\\tlet maxGrowT = Math.floor((totalRam * 0.08) - growRam);\\n\\t\\t\\tmaxGrowT = maxGrowT < 1 ? 1 : maxGrowT;\\n\\t\\t\\t\\n\\t\\t\\tlet maxWeakenT = Math.floor((totalRam * 0.55) - weakenRam);\\n\\t\\t\\tmaxWeakenT = maxWeakenT < 1 ? 1 : maxWeakenT;\\n\\n\\t\\t\\tlet maxHackT = Math.floor(totalRam - maxGrowT - maxWeakenT - hackRam);\\n\\t\\t\\tmaxHackT = maxHackT < 1 ? 1 : maxHackT;\\n\\n\\t\\t\\tif (hackT > maxHackT) {\\n\\t\\t\\t\\thackT = maxHackT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (weakenT > maxWeakenT) {\\n\\t\\t\\t\\tweakenT = maxWeakenT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (growT > maxGrowT) {\\n\\t\\t\\t\\tgrowT = maxGrowT;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\t\\t\\t// ns.print(\\\"totalRam: \\\" + totalRam)\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///d9b38223-ed88-4af4-975d-e4918279be2d\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///d9b38223-ed88-4af4-975d-e4918279be2d\"}],\"ramUsage\":7.75,\"server\":\"zer0\",\"moduleSequenceNumber\":106}}],\"serversOnNetwork\":[\"foodnstuff\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-136450-Netburners.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[10,[56,125,75]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"43.8.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":107}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":108}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":109}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\tns.print(\\\"Free RAM: \\\" + free + \\\" - Amt: \\\" + amt);\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tlet hackRam = 1.7;\\n\\tlet growRam = 1.75;\\n\\tlet weakenRam = 1.75;\\n\\tlet fundPct = 0.9;\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning(\\\"weaken.script\\\", attackServer, target)) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor((fundPct / _getBaseHackPct()) - growRam);\\n\\t\\t\\tlet growT = Math.floor(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.floor(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.floor(utilThreads * 1.08 * 1.55);\\n\\n\\t\\t\\tlet maxGrowT = Math.floor((totalRam * 0.08) - growRam);\\n\\t\\t\\tmaxGrowT = maxGrowT < 1 ? 1 : maxGrowT;\\n\\t\\t\\t\\n\\t\\t\\tlet maxWeakenT = Math.floor((totalRam * 0.55) - weakenRam);\\n\\t\\t\\tmaxWeakenT = maxWeakenT < 1 ? 1 : maxWeakenT;\\n\\n\\t\\t\\tlet maxHackT = Math.floor(totalRam - maxGrowT - maxWeakenT - hackRam);\\n\\t\\t\\tmaxHackT = maxHackT < 1 ? 1 : maxHackT;\\n\\n\\t\\t\\tif (hackT > maxHackT) {\\n\\t\\t\\t\\thackT = maxHackT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (weakenT > maxWeakenT) {\\n\\t\\t\\t\\tweakenT = maxWeakenT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (growT > maxGrowT) {\\n\\t\\t\\t\\tgrowT = maxGrowT;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\t\\t\\t// ns.print(\\\"totalRam: \\\" + totalRam)\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///9e700287-f9db-4db9-930e-e10d936b7e6f\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///9e700287-f9db-4db9-930e-e10d936b7e6f\"}],\"ramUsage\":7.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":110}}],\"serversOnNetwork\":[\"joesguns\",\"neo-net\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":68750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"35.2.7.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":111}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":112}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":113}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\tns.print(\\\"Free RAM: \\\" + free + \\\" - Amt: \\\" + amt);\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tlet hackRam = 1.7;\\n\\tlet growRam = 1.75;\\n\\tlet weakenRam = 1.75;\\n\\tlet fundPct = 0.9;\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning(\\\"weaken.script\\\", attackServer, target)) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor((fundPct / _getBaseHackPct()) - growRam);\\n\\t\\t\\tlet growT = Math.floor(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.floor(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.floor(utilThreads * 1.08 * 1.55);\\n\\n\\t\\t\\tlet maxGrowT = Math.floor((totalRam * 0.08) - growRam);\\n\\t\\t\\tmaxGrowT = maxGrowT < 1 ? 1 : maxGrowT;\\n\\t\\t\\t\\n\\t\\t\\tlet maxWeakenT = Math.floor((totalRam * 0.55) - weakenRam);\\n\\t\\t\\tmaxWeakenT = maxWeakenT < 1 ? 1 : maxWeakenT;\\n\\n\\t\\t\\tlet maxHackT = Math.floor(totalRam - maxGrowT - maxWeakenT - hackRam);\\n\\t\\t\\tmaxHackT = maxHackT < 1 ? 1 : maxHackT;\\n\\n\\t\\t\\tif (hackT > maxHackT) {\\n\\t\\t\\t\\thackT = maxHackT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (weakenT > maxWeakenT) {\\n\\t\\t\\t\\tweakenT = maxWeakenT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (growT > maxGrowT) {\\n\\t\\t\\t\\tgrowT = maxGrowT;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\t\\t\\t// ns.print(\\\"totalRam: \\\" + totalRam)\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///978f9d5d-9e9f-4d42-b46d-eaf8a0ad725e\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///978f9d5d-9e9f-4d42-b46d-eaf8a0ad725e\"}],\"ramUsage\":7.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":114}}],\"serversOnNetwork\":[\"nectar-net\",\"comptek\",\"netlink\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"32.2.6.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":115}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":116}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":117}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\tns.print(\\\"Free RAM: \\\" + free + \\\" - Amt: \\\" + amt);\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tlet hackRam = 1.7;\\n\\tlet growRam = 1.75;\\n\\tlet weakenRam = 1.75;\\n\\tlet fundPct = 0.9;\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning(\\\"weaken.script\\\", attackServer, target)) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor((fundPct / _getBaseHackPct()) - growRam);\\n\\t\\t\\tlet growT = Math.floor(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.floor(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.floor(utilThreads * 1.08 * 1.55);\\n\\n\\t\\t\\tlet maxGrowT = Math.floor((totalRam * 0.08) - growRam);\\n\\t\\t\\tmaxGrowT = maxGrowT < 1 ? 1 : maxGrowT;\\n\\t\\t\\t\\n\\t\\t\\tlet maxWeakenT = Math.floor((totalRam * 0.55) - weakenRam);\\n\\t\\t\\tmaxWeakenT = maxWeakenT < 1 ? 1 : maxWeakenT;\\n\\n\\t\\t\\tlet maxHackT = Math.floor(totalRam - maxGrowT - maxWeakenT - hackRam);\\n\\t\\t\\tmaxHackT = maxHackT < 1 ? 1 : maxHackT;\\n\\n\\t\\t\\tif (hackT > maxHackT) {\\n\\t\\t\\t\\thackT = maxHackT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (weakenT > maxWeakenT) {\\n\\t\\t\\t\\tweakenT = maxWeakenT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (growT > maxGrowT) {\\n\\t\\t\\t\\tgrowT = maxGrowT;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\t\\t\\t// ns.print(\\\"totalRam: \\\" + totalRam)\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///2f54b31a-189e-4156-b745-4e3fea28b0bd\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///2f54b31a-189e-4156-b745-4e3fea28b0bd\"}],\"ramUsage\":7.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":118}}],\"serversOnNetwork\":[\"zer0\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"0.6.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":119}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":120}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":121}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\tns.print(\\\"Free RAM: \\\" + free + \\\" - Amt: \\\" + amt);\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tlet hackRam = 1.7;\\n\\tlet growRam = 1.75;\\n\\tlet weakenRam = 1.75;\\n\\tlet fundPct = 0.9;\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning(\\\"weaken.script\\\", attackServer, target)) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor((fundPct / _getBaseHackPct()) - growRam);\\n\\t\\t\\tlet growT = Math.floor(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.floor(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.floor(utilThreads * 1.08 * 1.55);\\n\\n\\t\\t\\tlet maxGrowT = Math.floor((totalRam * 0.08) - growRam);\\n\\t\\t\\tmaxGrowT = maxGrowT < 1 ? 1 : maxGrowT;\\n\\t\\t\\t\\n\\t\\t\\tlet maxWeakenT = Math.floor((totalRam * 0.55) - weakenRam);\\n\\t\\t\\tmaxWeakenT = maxWeakenT < 1 ? 1 : maxWeakenT;\\n\\n\\t\\t\\tlet maxHackT = Math.floor(totalRam - maxGrowT - maxWeakenT - hackRam);\\n\\t\\t\\tmaxHackT = maxHackT < 1 ? 1 : maxHackT;\\n\\n\\t\\t\\tif (hackT > maxHackT) {\\n\\t\\t\\t\\thackT = maxHackT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (weakenT > maxWeakenT) {\\n\\t\\t\\t\\tweakenT = maxWeakenT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (growT > maxGrowT) {\\n\\t\\t\\t\\tgrowT = maxGrowT;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\t\\t\\t// ns.print(\\\"totalRam: \\\" + totalRam)\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///7a26f005-98c0-4578-8af2-c9d2b0cd1805\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///7a26f005-98c0-4578-8af2-c9d2b0cd1805\"}],\"ramUsage\":7.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":122}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":75000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"15.3.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":123}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":124}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":125}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\tns.print(\\\"Free RAM: \\\" + free + \\\" - Amt: \\\" + amt);\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tlet hackRam = 1.7;\\n\\tlet growRam = 1.75;\\n\\tlet weakenRam = 1.75;\\n\\tlet fundPct = 0.9;\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning(\\\"weaken.script\\\", attackServer, target)) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor((fundPct / _getBaseHackPct()) - growRam);\\n\\t\\t\\tlet growT = Math.floor(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.floor(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.floor(utilThreads * 1.08 * 1.55);\\n\\n\\t\\t\\tlet maxGrowT = Math.floor((totalRam * 0.08) - growRam);\\n\\t\\t\\tmaxGrowT = maxGrowT < 1 ? 1 : maxGrowT;\\n\\t\\t\\t\\n\\t\\t\\tlet maxWeakenT = Math.floor((totalRam * 0.55) - weakenRam);\\n\\t\\t\\tmaxWeakenT = maxWeakenT < 1 ? 1 : maxWeakenT;\\n\\n\\t\\t\\tlet maxHackT = Math.floor(totalRam - maxGrowT - maxWeakenT - hackRam);\\n\\t\\t\\tmaxHackT = maxHackT < 1 ? 1 : maxHackT;\\n\\n\\t\\t\\tif (hackT > maxHackT) {\\n\\t\\t\\t\\thackT = maxHackT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (weakenT > maxWeakenT) {\\n\\t\\t\\t\\tweakenT = maxWeakenT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (growT > maxGrowT) {\\n\\t\\t\\t\\tgrowT = maxGrowT;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\t\\t\\t// ns.print(\\\"totalRam: \\\" + totalRam)\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///8194da8a-bbe5-4428-b91e-16d1ac344147\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///8194da8a-bbe5-4428-b91e-16d1ac344147\"}],\"ramUsage\":7.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":126}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":100000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"83.4.4.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":127}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":128}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":129}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\tns.print(\\\"Free RAM: \\\" + free + \\\" - Amt: \\\" + amt);\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tlet hackRam = 1.7;\\n\\tlet growRam = 1.75;\\n\\tlet weakenRam = 1.75;\\n\\tlet fundPct = 0.9;\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning(\\\"weaken.script\\\", attackServer, target)) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor((fundPct / _getBaseHackPct()) - growRam);\\n\\t\\t\\tlet growT = Math.floor(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.floor(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.floor(utilThreads * 1.08 * 1.55);\\n\\n\\t\\t\\tlet maxGrowT = Math.floor((totalRam * 0.08) - growRam);\\n\\t\\t\\tmaxGrowT = maxGrowT < 1 ? 1 : maxGrowT;\\n\\t\\t\\t\\n\\t\\t\\tlet maxWeakenT = Math.floor((totalRam * 0.55) - weakenRam);\\n\\t\\t\\tmaxWeakenT = maxWeakenT < 1 ? 1 : maxWeakenT;\\n\\n\\t\\t\\tlet maxHackT = Math.floor(totalRam - maxGrowT - maxWeakenT - hackRam);\\n\\t\\t\\tmaxHackT = maxHackT < 1 ? 1 : maxHackT;\\n\\n\\t\\t\\tif (hackT > maxHackT) {\\n\\t\\t\\t\\thackT = maxHackT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (weakenT > maxWeakenT) {\\n\\t\\t\\t\\tweakenT = maxWeakenT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (growT > maxGrowT) {\\n\\t\\t\\t\\tgrowT = maxGrowT;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\t\\t\\t// ns.print(\\\"totalRam: \\\" + totalRam)\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///7a09bc74-36b1-4891-ae2a-ff7ac30db654\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///7a09bc74-36b1-4891-ae2a-ff7ac30db654\"}],\"ramUsage\":7.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":130}}],\"serversOnNetwork\":[\"nectar-net\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"7.8.6.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":131}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":132}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":133}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\tns.print(\\\"Free RAM: \\\" + free + \\\" - Amt: \\\" + amt);\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tlet hackRam = 1.7;\\n\\tlet growRam = 1.75;\\n\\tlet weakenRam = 1.75;\\n\\tlet fundPct = 0.9;\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning(\\\"weaken.script\\\", attackServer, target)) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor((fundPct / _getBaseHackPct()) - growRam);\\n\\t\\t\\tlet growT = Math.floor(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.floor(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.floor(utilThreads * 1.08 * 1.55);\\n\\n\\t\\t\\tlet maxGrowT = Math.floor((totalRam * 0.08) - growRam);\\n\\t\\t\\tmaxGrowT = maxGrowT < 1 ? 1 : maxGrowT;\\n\\t\\t\\t\\n\\t\\t\\tlet maxWeakenT = Math.floor((totalRam * 0.55) - weakenRam);\\n\\t\\t\\tmaxWeakenT = maxWeakenT < 1 ? 1 : maxWeakenT;\\n\\n\\t\\t\\tlet maxHackT = Math.floor(totalRam - maxGrowT - maxWeakenT - hackRam);\\n\\t\\t\\tmaxHackT = maxHackT < 1 ? 1 : maxHackT;\\n\\n\\t\\t\\tif (hackT > maxHackT) {\\n\\t\\t\\t\\thackT = maxHackT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (weakenT > maxWeakenT) {\\n\\t\\t\\t\\tweakenT = maxWeakenT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (growT > maxGrowT) {\\n\\t\\t\\t\\tgrowT = maxGrowT;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\t\\t\\t// ns.print(\\\"totalRam: \\\" + totalRam)\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///c1e281d0-1698-40bb-996f-9b6466e7099b\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///c1e281d0-1698-40bb-996f-9b6466e7099b\"}],\"ramUsage\":7.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":134}}],\"serversOnNetwork\":[\"iron-gym\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"7.0.1.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":135}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":136}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":137}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\tns.print(\\\"Free RAM: \\\" + free + \\\" - Amt: \\\" + amt);\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tlet hackRam = 1.7;\\n\\tlet growRam = 1.75;\\n\\tlet weakenRam = 1.75;\\n\\tlet fundPct = 0.9;\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning(\\\"weaken.script\\\", attackServer, target)) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor((fundPct / _getBaseHackPct()) - growRam);\\n\\t\\t\\tlet growT = Math.floor(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.floor(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.floor(utilThreads * 1.08 * 1.55);\\n\\n\\t\\t\\tlet maxGrowT = Math.floor((totalRam * 0.08) - growRam);\\n\\t\\t\\tmaxGrowT = maxGrowT < 1 ? 1 : maxGrowT;\\n\\t\\t\\t\\n\\t\\t\\tlet maxWeakenT = Math.floor((totalRam * 0.55) - weakenRam);\\n\\t\\t\\tmaxWeakenT = maxWeakenT < 1 ? 1 : maxWeakenT;\\n\\n\\t\\t\\tlet maxHackT = Math.floor(totalRam - maxGrowT - maxWeakenT - hackRam);\\n\\t\\t\\tmaxHackT = maxHackT < 1 ? 1 : maxHackT;\\n\\n\\t\\t\\tif (hackT > maxHackT) {\\n\\t\\t\\t\\thackT = maxHackT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (weakenT > maxWeakenT) {\\n\\t\\t\\t\\tweakenT = maxWeakenT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (growT > maxGrowT) {\\n\\t\\t\\t\\tgrowT = maxGrowT;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\t\\t\\t// ns.print(\\\"totalRam: \\\" + totalRam)\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///633b978b-aa56-4f4a-868b-53149942db0e\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///633b978b-aa56-4f4a-868b-53149942db0e\"}],\"ramUsage\":7.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":138}}],\"serversOnNetwork\":[\"max-hardware\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":29,\"hackDifficulty\":29,\"minDifficulty\":10,\"moneyAvailable\":68635674,\"moneyMax\":1715891850,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":199,\"serverGrowth\":33}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"43.3.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":139}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":140}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":141}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\tns.print(\\\"Free RAM: \\\" + free + \\\" - Amt: \\\" + amt);\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tlet hackRam = 1.7;\\n\\tlet growRam = 1.75;\\n\\tlet weakenRam = 1.75;\\n\\tlet fundPct = 0.9;\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning(\\\"weaken.script\\\", attackServer, target)) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor((fundPct / _getBaseHackPct()) - growRam);\\n\\t\\t\\tlet growT = Math.floor(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.floor(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.floor(utilThreads * 1.08 * 1.55);\\n\\n\\t\\t\\tlet maxGrowT = Math.floor((totalRam * 0.08) - growRam);\\n\\t\\t\\tmaxGrowT = maxGrowT < 1 ? 1 : maxGrowT;\\n\\t\\t\\t\\n\\t\\t\\tlet maxWeakenT = Math.floor((totalRam * 0.55) - weakenRam);\\n\\t\\t\\tmaxWeakenT = maxWeakenT < 1 ? 1 : maxWeakenT;\\n\\n\\t\\t\\tlet maxHackT = Math.floor(totalRam - maxGrowT - maxWeakenT - hackRam);\\n\\t\\t\\tmaxHackT = maxHackT < 1 ? 1 : maxHackT;\\n\\n\\t\\t\\tif (hackT > maxHackT) {\\n\\t\\t\\t\\thackT = maxHackT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (weakenT > maxWeakenT) {\\n\\t\\t\\t\\tweakenT = maxWeakenT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (growT > maxGrowT) {\\n\\t\\t\\t\\tgrowT = maxGrowT;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\t\\t\\t// ns.print(\\\"totalRam: \\\" + totalRam)\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":7.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":142}}],\"serversOnNetwork\":[\"phantasy\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":59609935,\"moneyMax\":1490248375,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":274,\"serverGrowth\":28}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"90.3.5.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":143}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":144}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":145}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\tns.print(\\\"Free RAM: \\\" + free + \\\" - Amt: \\\" + amt);\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tlet hackRam = 1.7;\\n\\tlet growRam = 1.75;\\n\\tlet weakenRam = 1.75;\\n\\tlet fundPct = 0.9;\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning(\\\"weaken.script\\\", attackServer, target)) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor((fundPct / _getBaseHackPct()) - growRam);\\n\\t\\t\\tlet growT = Math.floor(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.floor(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.floor(utilThreads * 1.08 * 1.55);\\n\\n\\t\\t\\tlet maxGrowT = Math.floor((totalRam * 0.08) - growRam);\\n\\t\\t\\tmaxGrowT = maxGrowT < 1 ? 1 : maxGrowT;\\n\\t\\t\\t\\n\\t\\t\\tlet maxWeakenT = Math.floor((totalRam * 0.55) - weakenRam);\\n\\t\\t\\tmaxWeakenT = maxWeakenT < 1 ? 1 : maxWeakenT;\\n\\n\\t\\t\\tlet maxHackT = Math.floor(totalRam - maxGrowT - maxWeakenT - hackRam);\\n\\t\\t\\tmaxHackT = maxHackT < 1 ? 1 : maxHackT;\\n\\n\\t\\t\\tif (hackT > maxHackT) {\\n\\t\\t\\t\\thackT = maxHackT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (weakenT > maxWeakenT) {\\n\\t\\t\\t\\tweakenT = maxWeakenT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (growT > maxGrowT) {\\n\\t\\t\\t\\tgrowT = maxGrowT;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\t\\t\\t// ns.print(\\\"totalRam: \\\" + totalRam)\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///d29e188c-14fc-48d1-9983-d49d1c13dda9\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///d29e188c-14fc-48d1-9983-d49d1c13dda9\"}],\"ramUsage\":7.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":146}}],\"serversOnNetwork\":[\"home\",\"max-hardware\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"48.1.5.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\",\"galactic-cyber\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":479,\"serverGrowth\":44}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"59.6.7.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"ecorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1033,\"serverGrowth\":53}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"89.9.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":743,\"serverGrowth\":43}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"12.4.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":541,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"77.6.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":362,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"20.8.8.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":147}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":148}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":149}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\tns.print(\\\"Free RAM: \\\" + free + \\\" - Amt: \\\" + amt);\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tlet hackRam = 1.7;\\n\\tlet growRam = 1.75;\\n\\tlet weakenRam = 1.75;\\n\\tlet fundPct = 0.9;\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning(\\\"weaken.script\\\", attackServer, target)) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor((fundPct / _getBaseHackPct()) - growRam);\\n\\t\\t\\tlet growT = Math.floor(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.floor(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.floor(utilThreads * 1.08 * 1.55);\\n\\n\\t\\t\\tlet maxGrowT = Math.floor((totalRam * 0.08) - growRam);\\n\\t\\t\\tmaxGrowT = maxGrowT < 1 ? 1 : maxGrowT;\\n\\t\\t\\t\\n\\t\\t\\tlet maxWeakenT = Math.floor((totalRam * 0.55) - weakenRam);\\n\\t\\t\\tmaxWeakenT = maxWeakenT < 1 ? 1 : maxWeakenT;\\n\\n\\t\\t\\tlet maxHackT = Math.floor(totalRam - maxGrowT - maxWeakenT - hackRam);\\n\\t\\t\\tmaxHackT = maxHackT < 1 ? 1 : maxHackT;\\n\\n\\t\\t\\tif (hackT > maxHackT) {\\n\\t\\t\\t\\thackT = maxHackT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (weakenT > maxWeakenT) {\\n\\t\\t\\t\\tweakenT = maxWeakenT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (growT > maxGrowT) {\\n\\t\\t\\t\\tgrowT = maxGrowT;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\t\\t\\t// ns.print(\\\"totalRam: \\\" + totalRam)\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///e1276370-5c12-4ca5-9cdd-acb54d07760b\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///e1276370-5c12-4ca5-9cdd-acb54d07760b\"}],\"ramUsage\":7.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":150}}],\"serversOnNetwork\":[\"omega-net\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":207,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"25.9.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":518,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-794003.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0],[1,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"25.3.8.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":151}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":152}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":153}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMaxMoney\\\");\\n\\tns.disableLog(\\\"getServerMaxRam\\\");\\n\\tns.disableLog(\\\"getServerUsedRam\\\");\\n\\tns.disableLog(\\\"getServerMinSecurityLevel\\\");\\n\\tns.disableLog(\\\"getServerSecurityLevel\\\");\\n\\tns.disableLog(\\\"getHackingMultipliers\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n\\tns.disableLog(\\\"getServerGrowth\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tlet target = ns.args[0];\\n\\tlet attackServer = ns.args[1];\\n\\tlet utilThreads = ns.args[2];\\n\\n\\tlet myMults = ns.getHackingMultipliers();\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tfunction _getBaseHackPct() {\\n\\t\\tlet myHackSkill = ns.getHackingLevel();\\n\\t\\tlet reqHackSkill = ns.getServerRequiredHackingLevel(target);\\n\\n\\t\\tlet hackPct = (100 - minSecurity) / 100;\\n\\t\\thackPct *= (1 + myHackSkill - reqHackSkill) / myHackSkill;\\n\\t\\thackPct *= myMults.money;\\n\\t\\thackPct /= 240;\\n\\n\\t\\t//total is hackPct*threads\\n\\t\\treturn hackPct;\\n\\t}\\n\\n\\tfunction _getBaseGrowPct() {\\n\\t\\tlet serverGrowth = ns.getServerGrowth(target)\\n\\t\\tlet bbBaseGrowth = 1.03;\\n\\t\\tlet bbMaxGrowth = 1.0035;\\n\\t\\tlet growRate = Math.min((1 + ((bbBaseGrowth - 1) / minSecurity)), bbMaxGrowth);\\n\\n\\t\\tlet growPct = serverGrowth / 100;\\n\\t\\tgrowPct *= myMults.growth;\\n\\t\\tgrowPct = Math.pow(growRate, growPct);\\n\\n\\t\\t//total is growPct^threads\\n\\t\\treturn growPct;\\n\\t}\\n\\n\\tfunction _ramCheck(host, amt) {\\n\\t\\tlet max = ns.getServerMaxRam(host);\\n\\t\\tlet used = ns.getServerUsedRam(host)\\n\\t\\tlet free = max - used;\\n\\t\\tns.print(\\\"Free RAM: \\\" + free + \\\" - Amt: \\\" + amt);\\n\\t\\treturn (free > amt);\\n\\t}\\n\\n\\tfunction _nodeStatus(target) {\\n\\t\\t//invalid target\\n\\t\\tif (target == \\\"home\\\" || ns.getServerMaxMoney(target) === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (ns.getServerMoneyAvailable(target) !== ns.getServerMaxMoney(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//else ready to go nuts\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tlet hackRam = 1.7;\\n\\tlet growRam = 1.75;\\n\\tlet weakenRam = 1.75;\\n\\tlet fundPct = 0.9;\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning(\\\"weaken.script\\\", attackServer, target)) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet status = _nodeStatus(target);\\n\\t\\tif (status === 0) {\\n\\t\\t\\t//weaken\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 1) {\\n\\t\\t\\t//grow\\n\\t\\t\\tif (_ramCheck(attackServer, utilThreads * 1.08 * 1.55)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, Math.ceil(utilThreads * 0.08), target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, utilThreads, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (status === 2) {\\n\\t\\t\\t//hack\\n\\t\\t\\tlet hackT = Math.floor((fundPct / _getBaseHackPct()) - growRam);\\n\\t\\t\\tlet growT = Math.floor(Math.log(1 / (1 - fundPct)) / Math.log(_getBaseGrowPct()))\\n\\t\\t\\tlet weakenT = Math.floor(((hackT * 0.002) + (growT * 0.004)) / 0.05);\\n\\t\\t\\tlet totalRam = Math.floor(utilThreads * 1.08 * 1.55);\\n\\n\\t\\t\\tlet maxGrowT = Math.floor((totalRam * 0.08) - growRam);\\n\\t\\t\\tmaxGrowT = maxGrowT < 1 ? 1 : maxGrowT;\\n\\t\\t\\t\\n\\t\\t\\tlet maxWeakenT = Math.floor((totalRam * 0.55) - weakenRam);\\n\\t\\t\\tmaxWeakenT = maxWeakenT < 1 ? 1 : maxWeakenT;\\n\\n\\t\\t\\tlet maxHackT = Math.floor(totalRam - maxGrowT - maxWeakenT - hackRam);\\n\\t\\t\\tmaxHackT = maxHackT < 1 ? 1 : maxHackT;\\n\\n\\t\\t\\tif (hackT > maxHackT) {\\n\\t\\t\\t\\thackT = maxHackT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (weakenT > maxWeakenT) {\\n\\t\\t\\t\\tweakenT = maxWeakenT;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (growT > maxGrowT) {\\n\\t\\t\\t\\tgrowT = maxGrowT;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\t\\t\\t// ns.print(\\\"totalRam: \\\" + totalRam)\\n\\t\\t\\t\\n\\t\\t\\tif (_ramCheck(attackServer, totalRam)) {\\n\\t\\t\\t\\tns.exec(\\\"weaken.script\\\", attackServer, weakenT, target);\\n\\t\\t\\t\\tns.exec(\\\"grow.script\\\", attackServer, growT, target);\\n\\t\\t\\t\\tns.exec(\\\"hack.script\\\", attackServer, hackT, target);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":7.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":154}}],\"serversOnNetwork\":[\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":60,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"8.0.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"79.7.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"58.2.0.3\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"proxy-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"proxy-0\",\"httpPortOpen\":false,\"ip\":\"86.0.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"proxy-0\",\"moduleSequenceNumber\":160}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"proxy-0\",\"moduleSequenceNumber\":161}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"proxy-0\",\"moduleSequenceNumber\":162}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\t// ns.enableLog()\\n\\n\\tlet [target, host, daemonRam] = ns.args;\\n\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet maxMoney = ns.getServerMaxMoney(target);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(target);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = Math.floor(daemonRam / weakenRam);\\n\\t\\twhile (!__ramCheck__(host, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT--;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\twhile (weakenTR + growTR < daemonRam) {\\n\\t\\t\\tgrowT++;\\n\\t\\t\\tweakened += 0.004;\\n\\t\\t\\tweakenT = Math.floor(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\n\\t\\tlet hackMoneyPct = ns.hackAnalyze(target);\\n\\t\\tlet growPerT = ns.growthAnalyze(target, hackMoneyPct);\\n\\t\\twhile (weakenTR + growTR + hackTR < daemonRam) {\\n\\t\\t\\thackT++;\\n\\t\\t\\tweakened += 0.002;\\n\\t\\t\\tweakenT = Math.floor(weakened / 0.05);\\n\\t\\t\\tgrowT = Math.floor(hackT * growPerT);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', host, target)) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(target);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT) {\\n\\t\\t\\tns.exec('weaken.script', host, weakenT, target);\\n\\t\\t}\\n\\n\\t\\tif (growT) {\\n\\t\\t\\tns.exec('grow.script', host, growT, target);\\n\\t\\t}\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\tns.exec('hack.script', host, hackT, target);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"proxy-0\",\"moduleSequenceNumber\":163}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":13021.516114573475,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":30,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":7,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":8,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":26.5847,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":43.3588,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":16200.398936556836}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":26.2811,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":42319.24500421704}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":6.2122,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":63.8476,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{\"c\":\"clear\",\"ch\":\"connect home\"}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":200,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"}}","VersionSave":"6","AllGangsSave":"","LastExportBonus":"1639848512422","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}
{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":1102,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":2,\"agility\":1,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1.6669721635961205,\"hacking_speed_mult\":1.6586468114308597,\"hacking_money_mult\":2.785443216364959,\"hacking_grow_mult\":1.6681298457090423,\"hacking_exp\":395966097.43021,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":2.5442304307021844,\"strength_mult\":1.5346794580523189,\"defense_mult\":1.334503876567234,\"dexterity_mult\":2.1270657288605137,\"agility_mult\":1.4012290703955954,\"charisma_mult\":1.6014046518806806,\"hacking_exp_mult\":3.3589381201823407,\"strength_exp_mult\":1.6881474038575508,\"defense_exp_mult\":1.6881474038575508,\"dexterity_exp_mult\":1.6881474038575508,\"agility_exp_mult\":1.6881474038575508,\"charisma_exp_mult\":1.6881474038575508,\"company_rep_mult\":1.334503876567234,\"faction_rep_mult\":1.334503876567234,\"money\":2367682787710.5303,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-524288gb-0\",\"pserv-524288gb-1\",\"pserv-524288gb-2\",\"pserv-524288gb-3\",\"pserv-524288gb-4\",\"pserv-524288gb-5\",\"pserv-524288gb-6\",\"pserv-524288gb-7\",\"pserv-524288gb-8\",\"pserv-524288gb-9\",\"pserv-524288gb-10\",\"pserv-524288gb-11\",\"pserv-524288gb-12\",\"pserv-524288gb-13\",\"pserv-524288gb-14\",\"pserv-524288gb-15\",\"pserv-524288gb-16\",\"pserv-524288gb-17\",\"pserv-524288gb-18\",\"pserv-524288gb-19\",\"pserv-524288gb-20\",\"pserv-524288gb-21\",\"pserv-524288gb-22\",\"pserv-524288gb-23\",\"pserv-524288gb-24\"],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"NiteSec\",\"CyberSec\",\"The Black Hand\",\"BitRunners\"],\"factionInvitations\":[\"Sector-12\"],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":29,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.334503876567234,\"crime_success_mult\":1.334503876567234,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"BitRunners\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.5038407180273511,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":1.5083315610021455,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":18138.165080830273,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":53605.54797691829,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":50,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":8943600,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.334503876567234,\"hacknet_node_money_mult\":3.3657438864409923,\"hacknet_node_purchase_cost_mult\":0.5715866521636711,\"hacknet_node_ram_cost_mult\":0.7471720943315961,\"hacknet_node_core_cost_mult\":0.7471720943315961,\"hacknet_node_level_cost_mult\":0.6350962801818567,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1640312026222,\"totalPlaytime\":776120200,\"playtimeSinceLastAug\":108576200,\"playtimeSinceLastBitnode\":776120200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":1759199819758.6208,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":1696547667951.91,\"total\":2367681787710.5303,\"work\":0,\"servers\":-1082752000000,\"other\":-5313700000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-9911000,\"class\":-73920,\"codingcontract\":0,\"corporation\":0,\"crime\":1248360,\"gang\":0,\"hacking\":3833506324680.4546,\"hacknet\":98442486628.35947,\"hacknet_expenses\":-27569807757.747864,\"hospitalization\":-1879790.2560754083,\"infiltration\":0,\"sleeves\":0,\"stock\":3919583252984.3936,\"total\":3633507200725.837,\"work\":27814789.50816293,\"servers\":-2280066310676.052,\"other\":-11007600000,\"augmentations\":-1899398343570.589}},\"scriptProdSinceLastAug\":3768275549695.718,\"exploits\":[],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":3,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"95.5.4.6\",\"isConnectedTo\":true,\"maxRam\":8192,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"ServerProfiler.exe\",\"DeepscanV1.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\",\"SQLInject.exe\",\"Formulas.exe\"],\"ramUsed\":8180.749999999995,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"stocks_V2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":361366861793.17725,\"onlineRunningTime\":8290.209999995428,\"pid\":2,\"ramUsage\":19.2,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":197997.16837368454,\"onlineMoneyMade\":1965653743,\"onlineRunningTime\":7670.809999995763,\"pid\":9176,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5780.275997029622,\"onlineMoneyMade\":0,\"onlineRunningTime\":7670.809999995763,\"pid\":9177,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6512.177966935093,\"onlineMoneyMade\":426909202,\"onlineRunningTime\":7670.809999995763,\"pid\":9178,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":114832.89794165282,\"onlineMoneyMade\":12547375345,\"onlineRunningTime\":7670.809999995763,\"pid\":9179,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":185747.20635891485,\"onlineMoneyMade\":3726995212,\"onlineRunningTime\":7670.809999995763,\"pid\":9180,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":62588.40890015449,\"onlineMoneyMade\":4410430960,\"onlineRunningTime\":7670.809999995763,\"pid\":9181,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5776.639651539653,\"onlineMoneyMade\":0,\"onlineRunningTime\":7670.809999995763,\"pid\":9182,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":107511.7593661385,\"onlineMoneyMade\":1277309264,\"onlineRunningTime\":7670.809999995763,\"pid\":9183,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21377.817730759318,\"onlineMoneyMade\":405610535,\"onlineRunningTime\":7670.809999995763,\"pid\":9184,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19566.635526115097,\"onlineMoneyMade\":480378842,\"onlineRunningTime\":7670.809999995763,\"pid\":9185,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":189139.04308473592,\"onlineMoneyMade\":320482070,\"onlineRunningTime\":7670.809999995763,\"pid\":9186,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":125909.3125623187,\"onlineMoneyMade\":453696107,\"onlineRunningTime\":7670.809999995763,\"pid\":9187,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76530.83548808757,\"onlineMoneyMade\":513815134,\"onlineRunningTime\":7670.809999995763,\"pid\":9188,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":295292.89428858995,\"onlineMoneyMade\":1378808013,\"onlineRunningTime\":7670.809999995763,\"pid\":9189,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":27479.87092025094,\"onlineMoneyMade\":308892793,\"onlineRunningTime\":7670.809999995763,\"pid\":9190,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":139986.8437719459,\"onlineMoneyMade\":335689436,\"onlineRunningTime\":7670.809999995763,\"pid\":9191,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8929.381602964264,\"onlineMoneyMade\":188097986,\"onlineRunningTime\":7670.809999995763,\"pid\":9192,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":97672.40994812376,\"onlineMoneyMade\":148290310,\"onlineRunningTime\":7670.809999995763,\"pid\":9193,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":120989.68131491222,\"onlineMoneyMade\":118079508,\"onlineRunningTime\":7670.809999995763,\"pid\":9194,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":106191.4579455175,\"onlineMoneyMade\":42338894,\"onlineRunningTime\":7670.809999995763,\"pid\":9195,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":193181.899397327,\"onlineMoneyMade\":745115818,\"onlineRunningTime\":7670.809999995763,\"pid\":9196,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":169370.65875628273,\"onlineMoneyMade\":988339049,\"onlineRunningTime\":7670.809999995763,\"pid\":9197,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":172472.21792027281,\"onlineMoneyMade\":724269782,\"onlineRunningTime\":7670.809999995763,\"pid\":9198,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":75494.06006226668,\"onlineMoneyMade\":330602180,\"onlineRunningTime\":7670.809999995763,\"pid\":9199,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16442.22913047175,\"onlineMoneyMade\":476904497,\"onlineRunningTime\":7670.809999995763,\"pid\":9200,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":62075.33990490722,\"onlineMoneyMade\":275436192,\"onlineRunningTime\":7670.809999995763,\"pid\":9201,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":150708.5848514146,\"onlineMoneyMade\":489416183,\"onlineRunningTime\":7670.809999995763,\"pid\":9202,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11899.60748486033,\"onlineMoneyMade\":65909829,\"onlineRunningTime\":7670.809999995763,\"pid\":9203,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":167056.03109028042,\"onlineMoneyMade\":72388243,\"onlineRunningTime\":7670.809999995763,\"pid\":9204,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":140087.364833962,\"onlineMoneyMade\":244764681,\"onlineRunningTime\":7670.809999995763,\"pid\":9205,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":87499.96337419993,\"onlineMoneyMade\":1808297143,\"onlineRunningTime\":7670.809999995763,\"pid\":9206,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16006.826960955954,\"onlineMoneyMade\":58341325,\"onlineRunningTime\":7670.809999995763,\"pid\":9207,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":184243.43243819164,\"onlineMoneyMade\":600614388,\"onlineRunningTime\":7670.809999995763,\"pid\":9208,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":186896.43726092103,\"onlineMoneyMade\":2960332031,\"onlineRunningTime\":7670.809999995763,\"pid\":9209,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":36838.696633193475,\"onlineMoneyMade\":70891556,\"onlineRunningTime\":7670.809999995763,\"pid\":9210,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12865.360173808853,\"onlineMoneyMade\":37824611,\"onlineRunningTime\":7670.809999995763,\"pid\":9211,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":186686.87676382097,\"onlineMoneyMade\":1111193468,\"onlineRunningTime\":7670.809999995763,\"pid\":9212,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":411192.3268907191,\"onlineMoneyMade\":1187425319,\"onlineRunningTime\":7670.809999995763,\"pid\":9213,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":23967.822002779263,\"onlineMoneyMade\":61687849,\"onlineRunningTime\":7670.809999995763,\"pid\":9214,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":335369.3475592754,\"onlineMoneyMade\":1006179158,\"onlineRunningTime\":7670.809999995763,\"pid\":9215,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":60179.37460904678,\"onlineMoneyMade\":630873283,\"onlineRunningTime\":7670.809999995763,\"pid\":9216,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":230939.4946186324,\"onlineMoneyMade\":1019640889,\"onlineRunningTime\":7670.809999995763,\"pid\":9217,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":328951.6451623419,\"onlineMoneyMade\":1451424749,\"onlineRunningTime\":7670.809999995763,\"pid\":9218,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":263932.0553813002,\"onlineMoneyMade\":579473346,\"onlineRunningTime\":7670.809999995763,\"pid\":9219,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4676.6998732848715,\"onlineMoneyMade\":25768870,\"onlineRunningTime\":7670.809999995763,\"pid\":9220,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19624.694596090812,\"onlineMoneyMade\":135338160,\"onlineRunningTime\":7670.809999995763,\"pid\":9221,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":478917.14569261146,\"onlineMoneyMade\":1429788028,\"onlineRunningTime\":7670.809999995763,\"pid\":9222,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":402386.91354389215,\"onlineMoneyMade\":1030580679,\"onlineRunningTime\":7670.809999995763,\"pid\":9223,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":263118.64832043427,\"onlineMoneyMade\":622174694,\"onlineRunningTime\":7670.809999995763,\"pid\":9224,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":336888.7749946375,\"onlineMoneyMade\":644011246,\"onlineRunningTime\":7670.809999995763,\"pid\":9225,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":198133.6283148113,\"onlineMoneyMade\":300505923,\"onlineRunningTime\":7670.809999995763,\"pid\":9226,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":112035.15067203673,\"onlineMoneyMade\":70080891,\"onlineRunningTime\":7670.809999995763,\"pid\":9227,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":154848.91373093406,\"onlineMoneyMade\":183947352,\"onlineRunningTime\":7670.809999995763,\"pid\":9228,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":283104.6822399417,\"onlineMoneyMade\":537489402,\"onlineRunningTime\":7670.809999995763,\"pid\":9229,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":102778.95789293486,\"onlineMoneyMade\":133821102,\"onlineRunningTime\":7670.809999995763,\"pid\":9230,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26448.223449597637,\"onlineMoneyMade\":4783781,\"onlineRunningTime\":7670.809999995763,\"pid\":9231,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":151573.35525310092,\"onlineMoneyMade\":170027831,\"onlineRunningTime\":7670.809999995763,\"pid\":9232,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":160465.5890182735,\"onlineMoneyMade\":177240005,\"onlineRunningTime\":7670.809999995763,\"pid\":9233,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"home\",133,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18775.987527915862,\"onlineMoneyMade\":13511904,\"onlineRunningTime\":7670.809999995763,\"pid\":9234,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":645.8100000000114,\"pid\":91023,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":645.8100000000114,\"pid\":91024,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":645.8100000000114,\"pid\":91025,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":15}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.210000000000086,\"pid\":91107,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":76}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.210000000000086,\"pid\":91108,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":937}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.210000000000086,\"pid\":91109,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.210000000000086,\"pid\":91110,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.210000000000086,\"pid\":91111,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.210000000000086,\"pid\":91112,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":32}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.210000000000086,\"pid\":91113,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":392}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.210000000000086,\"pid\":91114,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":5}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.210000000000086,\"pid\":91115,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.210000000000086,\"pid\":91116,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":42}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.210000000000086,\"pid\":91117,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":514}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.210000000000086,\"pid\":91118,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000008,\"pid\":91119,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":47}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000008,\"pid\":91120,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":579}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000008,\"pid\":91121,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000008,\"pid\":91122,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":42}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000008,\"pid\":91123,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":517}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000008,\"pid\":91124,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000008,\"pid\":91125,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":67}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000008,\"pid\":91126,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":829}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000008,\"pid\":91127,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":4}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000008,\"pid\":91128,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":26}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000008,\"pid\":91129,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000008,\"pid\":91130,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":24}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000008,\"pid\":91131,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000008,\"pid\":91132,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":22}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000008,\"pid\":91133,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000008,\"pid\":91134,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":20}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000008,\"pid\":91135,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000008,\"pid\":91136,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":18}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000008,\"pid\":91137,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000008,\"pid\":91138,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000008,\"pid\":91139,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000008,\"pid\":91140,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":15}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000008,\"pid\":91141,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000008,\"pid\":91142,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000008,\"pid\":91143,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000008,\"pid\":91144,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000008,\"pid\":91145,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000008,\"pid\":91146,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000008,\"pid\":91147,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000008,\"pid\":91148,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000008,\"pid\":91149,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000008,\"pid\":91150,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000008,\"pid\":91151,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000008,\"pid\":91152,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000008,\"pid\":91153,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000008,\"pid\":91154,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":8}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000008,\"pid\":91155,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000008,\"pid\":91156,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000008,\"pid\":91157,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000008,\"pid\":91158,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000008,\"pid\":91159,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000008,\"pid\":91160,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000008,\"pid\":91161,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000008,\"pid\":91162,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000008,\"pid\":91163,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000008,\"pid\":91164,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000008,\"pid\":91165,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000008,\"pid\":91166,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000008,\"pid\":91167,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000008,\"pid\":91168,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":4}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000008,\"pid\":91169,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000008,\"pid\":91170,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":4}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000008,\"pid\":91171,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000008,\"pid\":91172,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000008,\"pid\":91173,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000008,\"pid\":91174,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000008,\"pid\":91175,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000008,\"pid\":91176,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000008,\"pid\":91177,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000008,\"pid\":91178,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000008,\"pid\":91179,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000008,\"pid\":91180,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000008,\"pid\":91181,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000008,\"pid\":91182,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000008,\"pid\":91183,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000008,\"pid\":91184,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000008,\"pid\":91185,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000008,\"pid\":91186,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000008,\"pid\":91187,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000008,\"pid\":91188,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.61000000000008,\"pid\":91189,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.410000000000075,\"pid\":91190,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.410000000000075,\"pid\":91192,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.410000000000075,\"pid\":91194,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.410000000000075,\"pid\":91196,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.40999999999995,\"pid\":91981,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.40999999999995,\"pid\":91982,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.40999999999995,\"pid\":91984,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"pid\":92165,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"pid\":92166,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"pid\":92167,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"pid\":92168,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\ttarget = target || 'foodnstuff';\\n\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.45;\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(target);\\n\\t}\\n\\t\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(target);\\n\\t}\\n\\n\\tns.nuke(target);\\n\\n\\tlet moneyThreshOverride = 0;\\n\\tlet securityThreshOverride = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (!securityThreshOverride && ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tsecurityThreshOverride = 4;\\n\\t\\t} else if (!moneyThreshOverride && ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tlet percentGrowth = await ns.grow(target);\\n\\t\\t\\tif (percentGrowth < 1) {\\n\\t\\t\\t\\tmoneyThreshOverride = 10;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tmoneyThreshOverride = 4;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t\\tif (securityThreshOverride) {\\n\\t\\t\\tsecurityThreshOverride--\\n\\t\\t}\\n\\n\\t\\tif (moneyThreshOverride) {\\n\\t\\t\\tmoneyThreshOverride--\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///a7cf0364-c8b1-4d05-a53e-1ee1dd627301\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///a7cf0364-c8b1-4d05-a53e-1ee1dd627301\"}],\"ramUsage\":2.65,\"server\":\"home\",\"moduleSequenceNumber\":328}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let pserv = false;\\n    let targetLimit = 0;\\n    if (ns.args.length) {\\n        [pserv, targetLimit] = ns.args;\\n    }\\n\\n    let purchased = ns.getPurchasedServers();\\n\\n    function __readNodes__(fPath) {\\n        let nodes = ns.read(fPath);\\n        nodes = nodes.split(',');\\n        return nodes;\\n    }\\n\\n    async function __scanAndWriteAllNodes__() {\\n        let nodes = [];\\n        let newNodes = ['home'];\\n        let newNodes2 = [];\\n        let repeat = true;\\n\\n        while (repeat) {\\n            newNodes2 = [];\\n            repeat = false;\\n\\n            let i, j;\\n            for (i = 0; i < newNodes.length; i++) {\\n                let connected = ns.scan(newNodes[i]);\\n\\n                for (j = 0; j < connected.length; j++) {\\n                    let node = connected[j];\\n                    if (!nodes.includes(node) && !newNodes.includes(node) && !newNodes2.includes(node)) {\\n                        newNodes2.push(node);\\n                        repeat = true;\\n                    }\\n                }\\n            }\\n\\n            nodes = nodes.concat(newNodes);\\n            newNodes = newNodes2;\\n        }\\n\\n        nodes = nodes.concat(purchased);\\n        await ns.write('nodes.txt', nodes, 'w');\\n    }\\n\\n    function __nukeAvailableNodes__() {\\n        let nodes = __readNodes__('nodes.txt');\\n        let myHackLevel = ns.getHackingLevel();\\n\\n        let Programs = [\\n            ns.fileExists('BruteSSH.exe'),\\n            ns.fileExists('FTPCrack.exe'),\\n            ns.fileExists('relaySMTP.exe'),\\n            ns.fileExists('HTTPWorm.exe'),\\n            ns.fileExists('SQLInject.exe')\\n        ];\\n\\n        let availPrograms = Programs.reduce((num, bool) => num + bool, 0);\\n\\n        nodes.forEach((node) => {\\n            if (\\n                !ns.hasRootAccess(node) &&\\n                ns.getServerNumPortsRequired(node) <= availPrograms &&\\n                ns.getServerRequiredHackingLevel(node) <= myHackLevel\\n            ) {\\n                Programs.forEach((exists, i) => {\\n                    if (exists) {\\n                        switch (i) {\\n                            case 0:\\n                                ns.brutessh(node);\\n                                break;\\n                            case 1:\\n                                ns.ftpcrack(node);\\n                                break;\\n                            case 2:\\n                                ns.relaysmtp(node);\\n                                break;\\n                            case 3:\\n                                ns.httpworm(node);\\n                                break;\\n                            case 4:\\n                                ns.sqlinject(node);\\n                                break;\\n                        }\\n                    }\\n                });\\n                ns.nuke(node);\\n            }\\n        });\\n    }\\n\\n    async function __scanAndWriteRootedNodes__() {\\n        let nodes = __readNodes__('nodes.txt');\\n        let rooted = nodes.reduce((arr, node) => {\\n            //don't hack ourselves\\n            if (ns.hasRootAccess(node) && node !== 'home' && !purchased.includes(node)) {\\n                let maxMoney = ns.getServerMaxMoney(node);\\n\\n                arr.push(`${maxMoney} ${node}`);\\n            }\\n            return arr;\\n        }, []);\\n\\n        //lowest max money at the front, filter invalid servers, remove money from name\\n        rooted.sort((a, b) => +b.split(' ')[0] - +a.split(' ')[0]);\\n        rooted = rooted.filter((node) => +node.split(' ')[0] > 0);\\n        await ns.write('money_rooted.txt', rooted, 'w');\\n\\n        rooted = rooted.map((node) => node.split(' ')[1]);\\n\\n        if (targetLimit && targetLimit != 'All') {\\n            rooted = rooted.slice(rooted.length - targetLimit);\\n        }\\n\\n        ns.tprint(`hackable nodes: ${rooted.length}`);\\n        await ns.write('rooted.txt', rooted, 'w');\\n    }\\n\\n    //read the nodes\\n    await __scanAndWriteAllNodes__();\\n    __nukeAvailableNodes__();\\n    await __scanAndWriteRootedNodes__();\\n\\n    //load nodes\\n    let attackNodes = [];\\n    if (pserv) {\\n        attackNodes = purchased;\\n    } else {\\n        attackNodes = __readNodes__('rooted.txt');\\n        if (purchased.length) {\\n            attackNodes = attackNodes.concat(purchased);\\n        }\\n    }\\n    attackNodes.unshift('home');\\n\\n    // spin up attack servers\\n    attackNodes.forEach((attacker) => {\\n        ns.exec('main_hack.js', 'home', 1, attacker, pserv || false, targetLimit || '');\\n    });\\n}\",\"filename\":\"setup_hacks.js\",\"url\":\"blob:file:///7c386931-3727-4096-accc-c1c1de80c248\",\"module\":{},\"dependencies\":[{\"filename\":\"setup_hacks.js\",\"url\":\"blob:file:///7c386931-3727-4096-accc-c1c1de80c248\"}],\"ramUsage\":6.15,\"server\":\"home\",\"moduleSequenceNumber\":6198}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet server = ns.args[0];\\n\\n\\tlet maxRam = ns.getServerMaxRam('home');\\n\\tlet usedRam = ns.getServerUsedRam('home');\\n\\tlet scriptRam = ns.getScriptRam('basic_hack.js');\\n\\tlet threads = Math.floor((maxRam - usedRam) / scriptRam);\\n\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t}\\n\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t}\\n\\n\\tns.nuke(server);\\n\\tns.run('basic_hack.js', threads, server);\\n}\",\"filename\":\"home_hack.js\",\"url\":\"blob:file:///e4d5c7e1-2a3e-4351-a242-0862f6f2a700\",\"module\":\"\",\"dependencies\":[{\"filename\":\"home_hack.js\",\"url\":\"blob:file:///e4d5c7e1-2a3e-4351-a242-0862f6f2a700\"}],\"ramUsage\":3.05,\"server\":\"home\",\"moduleSequenceNumber\":330}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":331}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":332}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":333}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [ATTACK_SERVER, pserv, limit] = ns.args;\\n\\n    ns.tprint(ATTACK_SERVER);\\n\\n    function __readNodes__(fPath) {\\n        let nodes = ns.read(fPath);\\n        nodes = nodes.split(',');\\n        return nodes;\\n    }\\n\\n    function __findAttackableNodes__() {\\n        let rooted = __readNodes__('rooted.txt');\\n        let targetNodes = [];\\n\\n        //check which are valid for attacking\\n        for (let i = 0; i < rooted.length; i++) {\\n            if (ns.getServerMaxMoney(rooted[i])) {\\n                targetNodes.push(rooted[i]);\\n            }\\n        }\\n\\n        if (pserv && limit && ATTACK_SERVER.split('-')[0] === 'pserv') {\\n            let pservNum = +ATTACK_SERVER.split('-')[2];\\n            let multiplier = Math.floor(targetNodes.length / 5);\\n\\n            if (pservNum < 5) {\\n                targetNodes = targetNodes.slice(0, multiplier);\\n            } else if (pservNum < 10) {\\n                targetNodes = targetNodes.slice(multiplier, multiplier * 2);\\n            } else if (pservNum < 15) {\\n                targetNodes = targetNodes.slice(multiplier * 2, multiplier * 3);\\n            } else if (pservNum < 20) {\\n                targetNodes = targetNodes.slice(multiplier * 3, multiplier * 4);\\n            } else {\\n                targetNodes = targetNodes.slice(multiplier * 4, -1);\\n            }\\n        }\\n\\n        return targetNodes;\\n    }\\n\\n    //prep attackServer\\n    let files = ['weaken.script', 'grow.script', 'hack.script', 'daemon.js', 'daemon_fml.js'];\\n    await ns.scp(files, 'home', ATTACK_SERVER);\\n\\n    //load nodes\\n    let targetNodes = __findAttackableNodes__();\\n\\n    //calc ram and threads per daemon\\n    let serverRam = ns.getServerMaxRam(ATTACK_SERVER);\\n    let daemonRam = ns.getScriptRam('daemon.js');\\n    let minRamPerDaemon =\\n        ns.getScriptRam('weaken.script') + ns.getScriptRam('grow.script') + ns.getScriptRam('hack.script');\\n\\n    let leftoverRam = serverRam - daemonRam * targetNodes.length;\\n    let ramPerDaemon = leftoverRam / targetNodes.length;\\n\\n    while (ramPerDaemon < minRamPerDaemon) {\\n        targetNodes.pop();\\n        if (!targetNodes.length) {\\n            ns.tprint(`'${ATTACK_SERVER}' - insufficient RAM: exiting`);\\n            return;\\n        }\\n\\n        if (targetNodes.length === 2) {\\n            targetNodes = ['joesguns'];\\n        }\\n\\n        leftoverRam = serverRam - daemonRam * targetNodes.length;\\n        ramPerDaemon = leftoverRam / targetNodes.length;\\n    }\\n\\n    ns.scriptKill('daemon.js', ATTACK_SERVER);\\n    ns.scriptKill('daemon_fml.js', ATTACK_SERVER);\\n\\n    //start daemons\\n    let daemonCount = 0;\\n    let daemonFile = ns.fileExists('Formulas.exe') ? 'daemon_fml.js' : 'daemon.js';\\n    targetNodes.forEach((target) => {\\n        let success = ns.exec(\\n            daemonFile,\\n            ATTACK_SERVER,\\n            1,\\n            target,\\n            ATTACK_SERVER,\\n            Math.floor(ramPerDaemon),\\n            limit || false\\n        );\\n        daemonCount += success ? 1 : 0;\\n    });\\n\\n    ns.tprint(`attack server: ${ATTACK_SERVER}`);\\n    ns.tprint(`ram/daemon: ${Math.floor(ramPerDaemon)}`);\\n    ns.tprint(`daemon count: ${daemonCount}`);\\n}\",\"filename\":\"main_hack.js\",\"url\":\"blob:file:///0fad1f83-d0c5-4b22-b439-a0fe2cf5ef1e\",\"module\":{},\"dependencies\":[{\"filename\":\"main_hack.js\",\"url\":\"blob:file:///0fad1f83-d0c5-4b22-b439-a0fe2cf5ef1e\"}],\"ramUsage\":4.85,\"server\":\"home\",\"moduleSequenceNumber\":1339}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///2dd5bd8b-9217-489b-9de5-ea90e989cb60\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///2dd5bd8b-9217-489b-9de5-ea90e989cb60\"}],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":335}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    let size = 64;\\n    let silent = false;\\n    if (ns.args.length > 0) {\\n        [size, silent] = ns.args;\\n    }\\n\\n    if (isNaN(size)) {\\n        size = 64;\\n        silent = true;\\n    }\\n\\n    let files = ['weaken.script', 'grow.script', 'hack.script', 'daemon.js'];\\n    let price = 55000 * size;\\n    let i = ns.getPurchasedServers().length;\\n    while (i < 25) {\\n        let newHostname = 'pserv-' + size + 'gb-' + i;\\n\\n        ns.print('attempt purchase: ' + newHostname);\\n\\n        if (ns.getServerMoneyAvailable('home') > price) {\\n            ns.purchaseServer(newHostname, size);\\n            ns.print('purchased ' + newHostname);\\n            ns.tprint('purchased ' + newHostname);\\n\\n            if (!silent) {\\n                //start scripts on new server\\n                await ns.scp(files, 'home', newHostname);\\n                ns.exec('main_hack.js', 'home', 1, newHostname);\\n            }\\n\\n            ++i;\\n        }\\n\\n        if (ns.getServerMoneyAvailable('home') < price) {\\n            await ns.sleep(10000);\\n        }\\n    }\\n\\n    //upgrade existing servers\\n    let servers = ns.getPurchasedServers();\\n\\n    i = 0;\\n    while (i < 25) {\\n        ns.print('================================================================================');\\n        let server = servers[i];\\n        let serverNumber = server.match(/(\\\\d+)$/)[0] * 1;\\n        let size = ns.getServerMaxRam(server);\\n\\n        let newSize = 0;\\n        if (ns.args.length > 0) {\\n            newSize = ns.args[0];\\n        }\\n\\n        if (isNaN(newSize)) {\\n            newSize = 0;\\n        }\\n\\n        if (!newSize) {\\n            newSize = 2 * size;\\n        }\\n\\n        ns.print(`looking at server: ${server} - current size: ${size} -> ${newSize}`);\\n\\n        let price = 55000 * newSize;\\n        if (size < newSize) {\\n            let newHostname = 'pserv-' + newSize + 'gb-' + serverNumber;\\n\\n            ns.print(`attempt upgrade: ${server} -> ${newHostname} for ${price}`);\\n\\n            if (ns.getServerMoneyAvailable('home') > price) {\\n                if (ns.getServerUsedRam(server) > 0) {\\n                    ns.killall(server);\\n\\n                    while (ns.getServerUsedRam(server) > 0) {\\n                        ns.print('waiting for scripts to be killed');\\n                    }\\n                }\\n\\n                ns.deleteServer(server);\\n                ns.purchaseServer(newHostname, newSize);\\n\\n                ns.print('purchased ' + newHostname);\\n                ns.tprint('purchased ' + newHostname);\\n\\n                if (!silent) {\\n                    //start scripts on new server\\n                    await ns.scp(files, 'home', newHostname);\\n                    ns.exec('main_hack.js', 'home', 1, newHostname);\\n                }\\n\\n                ++i;\\n            }\\n        }\\n\\n        if (size >= newSize) {\\n            i++;\\n        }\\n\\n        if (serverNumber == 24) {\\n            i = 26;\\n        }\\n\\n        if (ns.getServerMoneyAvailable('home') < price) {\\n            await ns.sleep(20000);\\n        }\\n    }\\n}\",\"filename\":\"refresh_servers.js\",\"url\":\"blob:file:///e9163710-6114-4eff-94e0-656f0e076f52\",\"module\":{},\"dependencies\":[{\"filename\":\"refresh_servers.js\",\"url\":\"blob:file:///e9163710-6114-4eff-94e0-656f0e076f52\"}],\"ramUsage\":10.95,\"server\":\"home\",\"moduleSequenceNumber\":1311}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// ns.disableLog('ALL')\\n\\t// ns.getServerMaxRam('home')\\n\\t// ns.enableLog('exec')\\n\\t// ns.enableLog('weaken')\\n\\t// ns.enableLog('grow')\\n\\t// ns.enableLog('hack')\\n\\t// ns.enableLog('getServerUsedRam')\\n\\t// ns.enableLog('getServerSecurityLevel')\\n\\t// ns.enableLog('getServerMoneyAvailable')\\n\\t// ns.enableLog('hackAnalyze')\\n\\t// ns.enableLog('growthAnalyze')\\n\\t// ns.getServerMaxRam('home')\\n\\n\\tns.tprint(ns.getServerMoneyAvailable('home'))\\n\\n\\t// while (true) {\\n\\t// \\tawait ns.sleep(100000)\\n\\t// }\\n}\",\"filename\":\"test.js\",\"url\":\"blob:file:///b9c939b9-b0f2-4e56-9daa-78354949a51e\",\"module\":\"\",\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///b9c939b9-b0f2-4e56-9daa-78354949a51e\"}],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":337}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getServerMoneyAvailable');\\n\\n    // We will not buy anything if there's less money than this ammount\\n    let reserveMoney = 1000;\\n    let hacknet = ns.hacknet;\\n\\n    // Buy first HacknetNode if there are none\\n    if (hacknet.numNodes() === 0 && ns.getServerMoneyAvailable('home') >= reserveMoney) {\\n        hacknet.purchaseNode();\\n        ns.print('Purchased ' + hacknet.getNodeStats(hacknet.numNodes() - 1).name + ' because there was none.');\\n    }\\n\\n    // If there are no Hacknet Nodes, we can't do anything, so the script ends\\n    let numUpgrades = 1;\\n    while (hacknet.numNodes() > 0) {\\n        // If there is not enough money, we wait for it instead of ending\\n        // the loop.\\n        while (ns.getServerMoneyAvailable('home') >= reserveMoney) {\\n            for (let i = 0; i < hacknet.numNodes(); i++) {\\n                while (\\n                    hacknet.getLevelUpgradeCost(i, numUpgrades) < ns.getServerMoneyAvailable('home') * 0.1 &&\\n                    hacknet.upgradeLevel(i, numUpgrades)\\n                ) {\\n                    ns.print('Upgraded ' + hacknet.getNodeStats(i).name + ' to level ' + hacknet.getNodeStats(i).level);\\n                }\\n\\n                while (\\n                    hacknet.getRamUpgradeCost(i, numUpgrades) < ns.getServerMoneyAvailable('home') * 0.1 &&\\n                    hacknet.upgradeRam(i, numUpgrades)\\n                ) {\\n                    ns.print('Upgraded ' + hacknet.getNodeStats(i).name + ' RAM to ' + hacknet.getNodeStats(i).ram);\\n                }\\n\\n                while (\\n                    hacknet.getCoreUpgradeCost(i, numUpgrades) < ns.getServerMoneyAvailable('home') * 0.1 &&\\n                    hacknet.upgradeCore(i, numUpgrades)\\n                ) {\\n                    ns.print('Upgraded ' + hacknet.getNodeStats(i).name + ' core to ' + hacknet.getNodeStats(i).core);\\n                }\\n            }\\n\\n            // Buy next Hacknet Node if the last one is already fully\\n            // upgraded. If for some reason the last Hacknet Node is fully\\n            // upgraded and the others don't, the loop above will still\\n            // attempt to upgrade them all.\\n            if (\\n                hacknet.getLevelUpgradeCost(hacknet.numNodes() - 1, numUpgrades) === Infinity &&\\n                hacknet.getRamUpgradeCost(hacknet.numNodes() - 1, numUpgrades) === Infinity &&\\n                hacknet.getCoreUpgradeCost(hacknet.numNodes() - 1, numUpgrades) === Infinity &&\\n                hacknet.getPurchaseNodeCost() < ns.getServerMoneyAvailable('home') * 0.1\\n            ) {\\n                hacknet.purchaseNode();\\n                ns.print(\\n                    `Purchased ${hacknet.getNodeStats(hacknet.numNodes() - 1).name\\n                    } because the last one couldn't be upgraded further.`\\n                );\\n            } else if (\\n                // Or buy the next Hacknet Node if the next upgrade is more\\n                // expensive than buying a new Hacknet Node.\\n                hacknet.getLevelUpgradeCost(hacknet.numNodes() - 1, numUpgrades) > hacknet.getPurchaseNodeCost() &&\\n                hacknet.getRamUpgradeCost(hacknet.numNodes() - 1, numUpgrades) > hacknet.getPurchaseNodeCost() &&\\n                hacknet.getCoreUpgradeCost(hacknet.numNodes() - 1, numUpgrades) > hacknet.getPurchaseNodeCost() &&\\n                hacknet.getPurchaseNodeCost() < ns.getServerMoneyAvailable('home') * 0.1\\n            ) {\\n                hacknet.purchaseNode();\\n                ns.print(\\n                    `Purchased ${hacknet.getNodeStats(hacknet.numNodes() - 1).name\\n                    } because it was cheaper than next upgrade.`\\n                );\\n            }\\n\\n            await ns.sleep(1000);\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"hacknet.js\",\"url\":\"blob:file:///db4a34e6-efe4-4edb-b714-0224309f686d\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacknet.js\",\"url\":\"blob:file:///db4a34e6-efe4-4edb-b714-0224309f686d\"}],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":338}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {{\\n *  sym: string;\\n *  shares: number;\\n *  price: number;\\n *  forecast: number;\\n * }[]} Stocks\\n *\\n * @typedef {{\\n *  [sym: string]: {\\n *      profit: string;\\n *      raw: number;\\n *  }\\n * }} Tracker\\n */\\n\\n/** @type {Stocks} */\\nlet stocks = [];\\n/** @type {Stocks} */\\nlet myStocks = [];\\nlet corpus = 0;\\n\\n/** @type {Tracker} */\\nlet profitTracker = {};\\n\\nlet COMMISSION = 100000; //Buy or sell commission\\nlet numCycles = 2; //Each cycle is ~ 5 seconds\\nlet fracL = 0.2; //Fraction of assets to keep as cash in hand\\nlet fracH = 0.2;\\n\\n/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    ns.tail();\\n\\n    let TIX = ns.stock;\\n    let syms = TIX.getSymbols();\\n    syms.forEach((sym) => (profitTracker[sym] = { profit: '$0.00', raw: 0 }));\\n\\n    function __refresh__() {\\n        let newCorpus = ns.getServerMoneyAvailable('home');\\n\\n        stocks = [];\\n        myStocks = [];\\n        syms.forEach((sym) => {\\n            let [shares] = TIX.getPosition(sym);\\n            let price = TIX.getPrice(sym);\\n            let forecast = TIX.getForecast(sym);\\n            newCorpus += price * shares;\\n\\n            if (shares) {\\n                myStocks.push({ sym, shares, price, forecast });\\n            } else {\\n                stocks.push({ sym, shares, price, forecast });\\n            }\\n        });\\n\\n        stocks.sort((a, b) => b.forecast - a.forecast);\\n        corpus = newCorpus;\\n    }\\n\\n    function __format__(profit) {\\n        return ns.nFormat(profit, '($0.00a)');\\n    }\\n\\n    function __buy__(stock, numShares) {\\n        //buy\\n        let pricePer = TIX.buy(stock.sym, numShares);\\n        let price = __format__(pricePer * numShares + COMMISSION);\\n\\n        //track\\n        profitTracker[stock.sym].raw = profitTracker[stock.sym].raw - pricePer * numShares;\\n        profitTracker[stock.sym].profit = __format__(profitTracker[stock.sym].raw);\\n\\n        //log\\n        ns.print(`Bought ${pricePer ? numShares : 0} shares of ${stock.sym} for ${price}`);\\n        ns.print(`Current profit for ${stock.sym}: ${profitTracker[stock.sym].profit}`);\\n    }\\n\\n    function __sell__(stock, numShares) {\\n        //buy\\n        let profitPer = TIX.sell(stock.sym, numShares);\\n        let profit = __format__(profitPer * numShares + COMMISSION);\\n\\n        //track\\n        profitTracker[stock.sym].raw = profitTracker[stock.sym].raw + profitPer * numShares;\\n        profitTracker[stock.sym].profit = __format__(profitTracker[stock.sym].raw);\\n\\n        //log\\n        ns.print(`Sold ${profitPer ? numShares : 0} shares of ${stock.sym} for ${profit}`);\\n        ns.print(`Current profit for ${stock.sym}: ${profitTracker[stock.sym].profit}`);\\n    }\\n\\n    while (true) {\\n        __refresh__();\\n\\n        //Sell underperforming shares\\n        myStocks.forEach((stock) => {\\n            if (stock.forecast < stocks[0].forecast) {\\n                __sell__(stock, stock.shares);\\n                corpus -= COMMISSION;\\n            }\\n        });\\n\\n        //Sell shares if not enough cash in hand\\n        myStocks.forEach((stock) => {\\n            if (ns.getServerMoneyAvailable('home') < fracL * corpus) {\\n                let cashNeeded = corpus * fracH - ns.getServerMoneyAvailable('home') + COMMISSION;\\n                let numShares = Math.floor(cashNeeded / stock.price);\\n\\n                __sell__(stock, numShares);\\n                corpus -= COMMISSION;\\n            }\\n        });\\n\\n        // Buy shares with cash remaining in hand\\n        let cashToSpend = ns.getServerMoneyAvailable('home') - fracH * corpus;\\n        let numShares = Math.floor((cashToSpend - COMMISSION) / stocks[0].price);\\n        let maxShares = TIX.getMaxShares(stocks[0].sym) - stocks[0].shares;\\n\\n        numShares = Math.min(numShares, maxShares);\\n\\n        ns.print('stocks[0].price: ' + stocks[0].price);\\n        ns.print('corpus: ' + corpus);\\n        ns.print('cashToSpend: ' + cashToSpend);\\n\\n        if (numShares * stocks[0].forecast * stocks[0].price * numCycles > COMMISSION) {\\n            __buy__(stocks[0], numShares);\\n        }\\n\\n        await ns.sleep(5 * 1000 * numCycles + 200);\\n    }\\n}\",\"filename\":\"stocks.js\",\"url\":\"blob:file:///845f2096-1668-4ebc-b1a1-b5b0e655b9cd\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stocks.js\",\"url\":\"blob:file:///845f2096-1668-4ebc-b1a1-b5b0e655b9cd\"}],\"ramUsage\":17.2,\"server\":\"home\",\"moduleSequenceNumber\":339}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\n\\t//get the TOR router\\n\\twhile (!ns.purchaseTor()) {\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n\\n\\t//buy programs in this order\\n\\tlet cheapProgramList = [\\n\\t\\t'BruteSSH.exe',\\n\\t\\t'FTPCrack.exe',\\n\\t\\t'AutoLink.exe',\\n\\t\\t'DeepscanV1.exe',\\n\\t\\t'ServerProfiler.exe',\\n\\t\\t'DeepscanV2.exe',\\n\\t];\\n\\tfor (let i = 0; i < cheapProgramList.length; i++) {\\n\\t\\tlet prg = cheapProgramList[i];\\n\\t\\twhile (!ns.purchaseProgram(prg)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\t}\\n\\n\\t//buy baseline 64g servers\\n\\twhile (ns.getServerMoneyAvailable('home') < 88000000) {\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n\\tns.run('refresh_servers.js', 1, 64);\\n\\n\\t//buy programs in this order\\n\\tlet priceyProgramList = ['DeepscanV2.exe', 'relaySMTP.exe', 'HTTPWorm.exe', 'SQLInject.exe'];\\n\\tfor (let i = 0; i < priceyProgramList.length; i++) {\\n\\t\\tlet prg = priceyProgramList[i];\\n\\t\\twhile (!ns.purchaseProgram(prg)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"buy_darkweb.js\",\"url\":\"blob:file:///2a3a7ebd-7bef-459a-9cc1-554a8d433205\",\"module\":\"\",\"dependencies\":[{\"filename\":\"buy_darkweb.js\",\"url\":\"blob:file:///2a3a7ebd-7bef-459a-9cc1-554a8d433205\"}],\"ramUsage\":6.7,\"server\":\"home\",\"moduleSequenceNumber\":340}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\tif (ns.isRunning('stocks.js', 'home')) {\\n\\t\\tns.kill('stocks.js', 'home');\\n\\t}\\n\\n\\tfunction __printProfits__(sym, shares, profit) {\\n\\t\\tlet symbols = ['', 'K', 'M', 'B', 'T', 'Qa', 'Qi', 'Sx', 'Sp', 'Oc'];\\n\\t\\tlet formatProfit;\\n\\n\\t\\tlet i;\\n\\t\\tif (profit >= 0) {\\n\\t\\t\\tfor (i = 0; profit >= 1000 && i < symbols.length; i++) {\\n\\t\\t\\t\\tprofit /= 1000;\\n\\t\\t\\t}\\n\\t\\t\\tformatProfit = `$${profit.toFixed(3)}${symbols[i]}`;\\n\\t\\t} else {\\n\\t\\t\\tfor (i = 0; profit <= -1000 && i < symbols.length; i++) {\\n\\t\\t\\t\\tprofit /= 1000;\\n\\t\\t\\t}\\n\\t\\t\\tformatProfit = `-$${profit.toFixed(3) * -1}${symbols[i]}`;\\n\\t\\t}\\n\\n\\t\\tns.tprint(`Sold ${shares} shares of ${sym} for ${formatProfit}${symbols[i]}`);\\n\\t}\\n\\n\\tlet TIX = ns.stock;\\n\\tlet syms = TIX.getSymbols();\\n\\n\\tsyms.forEach((sym) => {\\n\\t\\tlet [shares] = TIX.getPosition(sym);\\n\\t\\tlet profitPer = TIX.sell(sym, shares);\\n\\n\\t\\tif (profitPer) {\\n\\t\\t\\t__printProfits__(sym, shares, profitPer * shares);\\n\\t\\t}\\n\\t});\\n}\",\"filename\":\"sell_stocks.js\",\"url\":\"blob:file:///c8c82279-ff5d-48a2-bfb6-c1d6e9874d6a\",\"module\":\"\",\"dependencies\":[{\"filename\":\"sell_stocks.js\",\"url\":\"blob:file:///c8c82279-ff5d-48a2-bfb6-c1d6e9874d6a\"}],\"ramUsage\":8.7,\"server\":\"home\",\"moduleSequenceNumber\":341}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {{\\n *  sym: string;\\n *  shares: number;\\n *  price: number;\\n *  forecast: number;\\n * }[]} Stocks\\n *\\n * @typedef {{\\n *  [sym: string]: {\\n *      profit: string;\\n *      raw: number;\\n *  }\\n * }} Tracker\\n */\\n\\n/** @type {Stocks} */\\nlet stocks = [];\\n/** @type {Stocks} */\\nlet myStocks = [];\\nlet corpus = 0;\\n\\n/** @type {Tracker} */\\nlet profitTracker = {};\\n\\n/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    const TIX = ns.stock;\\n\\n    const KEEP = 0.2;\\n    const BUY_LIMIT = 0.58;\\n    const SELL_LIMIT = 0.5;\\n    const COMMISSION = 100000;\\n\\n    //init stocks\\n    let syms = TIX.getSymbols();\\n    syms.forEach((sym) => {\\n        stocks.push({ sym });\\n        profitTracker[sym] = { profit: '$0.00', raw: 0 };\\n    });\\n\\n    function __updateStockData__() {\\n        let corpus = ns.getServerMoneyAvailable('home');\\n        myStocks.length = 0;\\n\\n        stocks.forEach((stock) => {\\n            let sym = stock.sym;\\n            stock.price = TIX.getPrice(sym);\\n            stock.shares = TIX.getPosition(sym)[0];\\n            stock.forecast = TIX.getForecast(sym);\\n\\n            corpus += stock.price * stock.shares;\\n\\n            if (stock.shares) {\\n                myStocks.push(stock);\\n            }\\n        });\\n\\n        stocks.sort((a, b) => b.forecast - a.forecast);\\n        return corpus;\\n    }\\n\\n    function __format__(profit) {\\n        return ns.nFormat(profit, '-$0.00a');\\n    }\\n\\n    function __buy__(stock, numShares) {\\n        //buy\\n        let pricePer = TIX.buy(stock.sym, numShares);\\n        let price = __format__(pricePer * numShares + COMMISSION);\\n\\n        //track\\n        profitTracker[stock.sym].raw = profitTracker[stock.sym].raw - pricePer * numShares;\\n        profitTracker[stock.sym].profit = __format__(profitTracker[stock.sym].raw);\\n\\n        //log\\n        ns.print(`Bought ${pricePer ? numShares : 0} shares of ${stock.sym} for ${price}`);\\n        ns.print(`Current profit for ${stock.sym}: ${profitTracker[stock.sym].profit}`);\\n    }\\n\\n    function __sell__(stock, numShares) {\\n        //buy\\n        let profitPer = TIX.sell(stock.sym, numShares);\\n        let profit = __format__(profitPer * numShares + COMMISSION);\\n\\n        //track\\n        profitTracker[stock.sym].raw = profitTracker[stock.sym].raw + profitPer * numShares;\\n        profitTracker[stock.sym].profit = __format__(profitTracker[stock.sym].raw);\\n\\n        //log\\n        ns.print(`Sold ${profitPer ? numShares : 0} shares of ${stock.sym} for ${profit}`);\\n        ns.print(`Current profit for ${stock.sym}: ${profitTracker[stock.sym].profit}`);\\n    }\\n\\n    while (true) {\\n        corpus = __updateStockData__();\\n\\n        // Sell bad shares\\n        myStocks.forEach((stock) => {\\n            if (stock.forecast < SELL_LIMIT) {\\n                ns.print(`${stock.sym} no longer valuable - selling.`);\\n                __sell__(stock, stock.shares);\\n            }\\n        });\\n\\n        // Don't do this. Use getStockPurchaseCost for some proportion of corpus,\\n        // then reduce it by a certain % until it's buyable.\\n\\n        let stockIndex = -1;\\n        let cashToSpend = ns.getServerMoneyAvailable('home');\\n        while (cashToSpend > 100 * COMMISSION && cashToSpend > corpus * 0.1) {\\n            stockIndex++;\\n            corpus = __updateStockData__();\\n\\n            let stockToBuy = stocks[stockIndex];\\n            if (!stockToBuy || stockToBuy.forecast < BUY_LIMIT) {\\n                // No more (good) stocks left\\n                break;\\n            }\\n\\n            let availibleShares = TIX.getMaxShares(stockToBuy.sym) - stockToBuy.shares;\\n            if (!availibleShares) {\\n                // We bought all shares of this stock\\n                continue;\\n            }\\n\\n            while (availibleShares) {\\n                let purchaseCost = TIX.getPurchaseCost(stockToBuy.sym, availibleShares, 'Long');\\n                if (purchaseCost <= cashToSpend) {\\n                    __buy__(stockToBuy, availibleShares);\\n                    cashToSpend -= purchaseCost;\\n                    break;\\n                }\\n\\n                availibleShares = Math.floor(availibleShares * 0.9);\\n            }\\n        }\\n\\n        await ns.sleep(6 * 1000);\\n    }\\n}\",\"filename\":\"stocks_V2.js\",\"url\":\"blob:file:///0d50102f-f7ab-4ef2-991e-838eec5fd9bf\",\"module\":{},\"dependencies\":[{\"filename\":\"stocks_V2.js\",\"url\":\"blob:file:///0d50102f-f7ab-4ef2-991e-838eec5fd9bf\"}],\"ramUsage\":19.2,\"server\":\"home\",\"moduleSequenceNumber\":1312}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///fcb8cf08-6745-4ac5-9497-c87bdee8b292\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///fcb8cf08-6745-4ac5-9497-c87bdee8b292\"}],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":1648}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    let roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n    let nodes = {\\n        home: roots.reduce((obj, node) => {\\n            obj[node] = {};\\n            return obj;\\n        }, {})\\n    };\\n    roots.push('home');\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        ns.tprint('');\\n        ns.tprint('      rootName: ', rootNode);\\n        ns.tprint('connectedNodes: ', connectedNodes);\\n        ns.tprint('         roots: ', roots);\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                roots.push(childNode);\\n                nodeObj[childNode] = {};\\n                traverseNodes(nodeObj[childNode], childNode);\\n            }\\n        });\\n    }\\n\\n    roots.forEach((node) => {\\n        traverseNodes(nodes.home[node], node, roots);\\n    });\\n    await ns.write('servers.txt', JSON.stringify(nodes), 'w');\\n    ns.tprint(nodes);\\n}\",\"filename\":\"scan_servers.js\",\"url\":\"blob:file:///6bf71656-7e52-43d9-a9a5-9f6eb1f92057\",\"module\":\"\",\"dependencies\":[{\"filename\":\"scan_servers.js\",\"url\":\"blob:file:///6bf71656-7e52-43d9-a9a5-9f6eb1f92057\"}],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":344}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-524288gb-0\",\"pserv-524288gb-1\",\"pserv-524288gb-2\",\"pserv-524288gb-3\",\"pserv-524288gb-4\",\"pserv-524288gb-5\",\"pserv-524288gb-6\",\"pserv-524288gb-7\",\"pserv-524288gb-8\",\"pserv-524288gb-9\",\"pserv-524288gb-10\",\"pserv-524288gb-11\",\"pserv-524288gb-12\",\"pserv-524288gb-13\",\"pserv-524288gb-14\",\"pserv-524288gb-15\",\"pserv-524288gb-16\",\"pserv-524288gb-17\",\"pserv-524288gb-18\",\"pserv-524288gb-19\",\"pserv-524288gb-20\",\"pserv-524288gb-21\",\"pserv-524288gb-22\",\"pserv-524288gb-23\",\"pserv-524288gb-24\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"nodes.txt\",\"text\":\"home,n00dles,foodnstuff,sigma-cosmetics,joesguns,hong-fang-tea,harakiri-sushi,iron-gym,darkweb,pserv-524288gb-0,pserv-524288gb-1,pserv-524288gb-2,pserv-524288gb-3,pserv-524288gb-4,pserv-524288gb-5,pserv-524288gb-6,pserv-524288gb-7,pserv-524288gb-8,pserv-524288gb-9,pserv-524288gb-10,pserv-524288gb-11,pserv-524288gb-12,pserv-524288gb-13,pserv-524288gb-14,pserv-524288gb-15,pserv-524288gb-16,pserv-524288gb-17,pserv-524288gb-18,pserv-524288gb-19,pserv-524288gb-20,pserv-524288gb-21,pserv-524288gb-22,pserv-524288gb-23,pserv-524288gb-24,zer0,CSEC,nectar-net,max-hardware,phantasy,omega-net,silver-helix,neo-net,netlink,johnson-ortho,crush-fitness,comptek,avmnite-02h,the-hub,I.I.I.I,catalyst,summit-uni,syscore,zb-institute,rothman-uni,lexo-corp,alpha-ent,millenium-fitness,rho-construction,aevum-police,aerocorp,snap-fitness,galactic-cyber,global-pharm,omnia,deltaone,unitalife,zeus-med,univ-energy,solaris,defcomm,icarus,infocomm,zb-def,nova-med,taiyang-digital,microdyne,applied-energetics,titan-labs,run4theh111z,stormtech,vitalife,fulcrumtech,helios,kuai-gong,omnitek,4sigma,.,blade,nwo,clarkinc,powerhouse-fitness,b-and-a,ecorp,fulcrumassets,megacorp,The-Cave,pserv-524288gb-0,pserv-524288gb-1,pserv-524288gb-2,pserv-524288gb-3,pserv-524288gb-4,pserv-524288gb-5,pserv-524288gb-6,pserv-524288gb-7,pserv-524288gb-8,pserv-524288gb-9,pserv-524288gb-10,pserv-524288gb-11,pserv-524288gb-12,pserv-524288gb-13,pserv-524288gb-14,pserv-524288gb-15,pserv-524288gb-16,pserv-524288gb-17,pserv-524288gb-18,pserv-524288gb-19,pserv-524288gb-20,pserv-524288gb-21,pserv-524288gb-22,pserv-524288gb-23,pserv-524288gb-24\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"rooted.txt\",\"text\":\"blade,nwo,omnitek,clarkinc,b-and-a,4sigma,fulcrumtech,global-pharm,deltaone,zeus-med,univ-energy,stormtech,nova-med,unitalife,aerocorp,icarus,zb-def,omnia,defcomm,powerhouse-fitness,taiyang-digital,solaris,titan-labs,applied-energetics,zb-institute,galactic-cyber,vitalife,lexo-corp,helios,infocomm,alpha-ent,syscore,microdyne,rho-construction,catalyst,snap-fitness,summit-uni,netlink,millenium-fitness,comptek,aevum-police,rothman-uni,the-hub,johnson-ortho,omega-net,crush-fitness,silver-helix,phantasy,iron-gym,max-hardware,zer0,neo-net,harakiri-sushi,hong-fang-tea,nectar-net,joesguns,sigma-cosmetics,foodnstuff,n00dles\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servers.txt\",\"text\":\"{\\\"home\\\":{\\\"n00dles\\\":{\\\"zer0\\\":{},\\\"CSEC\\\":{\\\"phantasy\\\":{\\\"netlink\\\":{\\\"I.I.I.I\\\":{}},\\\"johnson-ortho\\\":{\\\"catalyst\\\":{\\\"lexo-corp\\\":{\\\"aerocorp\\\":{}},\\\"alpha-ent\\\":{\\\"snap-fitness\\\":{}}}},\\\"crush-fitness\\\":{\\\"summit-uni\\\":{\\\"millenium-fitness\\\":{\\\"galactic-cyber\\\":{\\\"omnia\\\":{\\\"zeus-med\\\":{}},\\\"deltaone\\\":{\\\"univ-energy\\\":{\\\"infocomm\\\":{},\\\"zb-def\\\":{\\\"microdyne\\\":{\\\"stormtech\\\":{\\\"kuai-gong\\\":{\\\"blade\\\":{\\\"ecorp\\\":{}},\\\"nwo\\\":{\\\"fulcrumassets\\\":{}}}},\\\"vitalife\\\":{\\\"omnitek\\\":{\\\"clarkinc\\\":{\\\"megacorp\\\":{}},\\\"powerhouse-fitness\\\":{}},\\\"4sigma\\\":{},\\\".\\\":{\\\"b-and-a\\\":{\\\"The-Cave\\\":{}}}}},\\\"applied-energetics\\\":{}}},\\\"solaris\\\":{\\\"nova-med\\\":{}}}}}}}},\\\"omega-net\\\":{\\\"comptek\\\":{\\\"syscore\\\":{\\\"rho-construction\\\":{\\\"global-pharm\\\":{\\\"unitalife\\\":{\\\"defcomm\\\":{},\\\"icarus\\\":{\\\"taiyang-digital\\\":{\\\"titan-labs\\\":{},\\\"run4theh111z\\\":{\\\"fulcrumtech\\\":{},\\\"helios\\\":{}}}}}}}}},\\\"avmnite-02h\\\":{\\\"zb-institute\\\":{\\\"aevum-police\\\":{}}}}}},\\\"foodnstuff\\\":{},\\\"sigma-cosmetics\\\":{\\\"nectar-net\\\":{\\\"silver-helix\\\":{\\\"the-hub\\\":{\\\"rothman-uni\\\":{}}}}},\\\"joesguns\\\":{},\\\"hong-fang-tea\\\":{},\\\"harakiri-sushi\\\":{\\\"max-hardware\\\":{\\\"neo-net\\\":{}}},\\\"iron-gym\\\":{},\\\"darkweb\\\":{}}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"money_rooted.txt\",\"text\":\"937508343450 blade,694049872525 nwo,542962591125 omnitek,504163658650 clarkinc,423151475750 b-and-a,415832204300 4sigma,39165555625 fulcrumtech,39107690325 global-pharm,38341390450 deltaone,34469139575 zeus-med,28332854825 univ-energy,28258368325 stormtech,27995501675 nova-med,26240038650 unitalife,26231457650 aerocorp,24461785700 icarus,24409164650 zb-def,23698604025 omnia,23175480750 defcomm,22500000000 powerhouse-fitness,21723596650 taiyang-digital,21699180900 solaris,21486687425 titan-labs,21164039000 applied-energetics,21067335750 zb-institute,20235973000 galactic-cyber,19043954500 vitalife,18386862725 lexo-corp,16904642200 helios,16425422600 infocomm,15304911825 alpha-ent,14643199675 syscore,14626392125 microdyne,13749037900 rho-construction,12720934475 catalyst,11250000000 snap-fitness,7207180250 summit-uni,6875000000 netlink,6250000000 millenium-fitness,5739817775 comptek,5447000300 aevum-police,4596414825 rothman-uni,3928264975 the-hub,1782466550 johnson-ortho,1527286350 omega-net,1449843425 crush-fitness,1125000000 silver-helix,600000000 phantasy,500000000 iron-gym,250000000 max-hardware,187500000 zer0,125000000 neo-net,100000000 harakiri-sushi,75000000 hong-fang-tea,68750000 nectar-net,62500000 joesguns,57500000 sigma-cosmetics,50000000 foodnstuff,1750000 n00dles\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"57.9.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":52077627279,\"moneyMax\":1301940681975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1271,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"87.6.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":56240986212,\"moneyMax\":1406024655300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1274,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"48.3.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":423151475750,\"moneyMax\":423151475750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":987,\"serverGrowth\":79}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-734290.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[6,2],[1,2,1],[1,4,2,5],[1,5,3,5,5]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"1.7.0.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":937508343450,\"moneyMax\":937508343450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":960,\"serverGrowth\":55}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"71.5.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":33.012,\"minDifficulty\":33,\"moneyAvailable\":694049872525,\"moneyMax\":694049872525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":980,\"serverGrowth\":89}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"62.4.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":15,\"minDifficulty\":15,\"moneyAvailable\":504163658650,\"moneyMax\":504163658650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":967,\"serverGrowth\":68}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"46.0.2.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":33.012,\"minDifficulty\":33,\"moneyAvailable\":542962591125,\"moneyMax\":542962591125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":970,\"serverGrowth\":97}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"34.6.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":415832204300,\"moneyMax\":415832204300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1018,\"serverGrowth\":83}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"5.4.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"blade\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":27921954546,\"moneyMax\":698048863650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1178,\"serverGrowth\":99}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"13.8.9.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":30,\"minDifficulty\":30,\"moneyAvailable\":39165555625,\"moneyMax\":39165555625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1014,\"serverGrowth\":92}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"33.1.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1205,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"96.9.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":28,\"minDifficulty\":28,\"moneyAvailable\":28258368325,\"moneyMax\":28258368325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":969,\"serverGrowth\":88}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"66.8.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":31,\"minDifficulty\":31,\"moneyAvailable\":23175480750,\"moneyMax\":23175480750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":954,\"serverGrowth\":64}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"97.2.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":25,\"minDifficulty\":25,\"moneyAvailable\":16425422600,\"moneyMax\":16425422600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":908,\"serverGrowth\":64}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"92.6.3.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":31,\"minDifficulty\":31,\"moneyAvailable\":16904642200,\"moneyMax\":16904642200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":897,\"serverGrowth\":76}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"49.2.1.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"omnitek\",\"4sigma\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":27,\"minDifficulty\":27,\"moneyAvailable\":19043954500,\"moneyMax\":19043954500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":839,\"serverGrowth\":68}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"98.0.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":31,\"minDifficulty\":31,\"moneyAvailable\":24461785700,\"moneyMax\":24461785700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":882,\"serverGrowth\":95}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"69.8.1.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":28332854825,\"moneyMax\":28332854825,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":841,\"serverGrowth\":87}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"33.2.8.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":345}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":346}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":347}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"titan-labs\",\"moduleSequenceNumber\":348}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///13bbdb47-cbab-4a47-aa5c-c5c3ca7ca3c6\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///13bbdb47-cbab-4a47-aa5c-c5c3ca7ca3c6\"}],\"ramUsage\":6.1,\"server\":\"titan-labs\",\"moduleSequenceNumber\":349}}],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":21486687425,\"moneyMax\":21486687425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":833,\"serverGrowth\":69}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"66.3.2.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":14595133956,\"moneyMax\":14626392125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":836,\"serverGrowth\":85}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-906973.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[6,38,27],[5,33,15],[49,15,42],[11,39,36],[33,24,27],[27,21,33],[38,36,31],[28,39,40],[23,6,37],[25,10,43],[14,48,13],[33,39,27],[47,31,10]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-509471.cct\",\"type\":\"Total Ways to Sum\",\"data\":27,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"28.2.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":21723596650,\"moneyMax\":21723596650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":865,\"serverGrowth\":80}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"52.1.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":19,\"minDifficulty\":19,\"moneyAvailable\":20235973000,\"moneyMax\":20235973000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":862,\"serverGrowth\":85}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"27.3.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":26231457650,\"moneyMax\":26231457650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":868,\"serverGrowth\":63}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"95.2.0.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":23698604025,\"moneyMax\":23698604025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":929,\"serverGrowth\":66}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"59.9.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":350}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":351}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":352}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"zb-def\",\"moduleSequenceNumber\":353}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"zb-def\",\"moduleSequenceNumber\":354}}],\"serversOnNetwork\":[\"univ-energy\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":19,\"minDifficulty\":19,\"moneyAvailable\":24409164650,\"moneyMax\":24409164650,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":790,\"serverGrowth\":67}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"45.2.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":355}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":356}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":357}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":358}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":359}}],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":21164039000,\"moneyMax\":21164039000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":807,\"serverGrowth\":72}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"40.8.1.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":360}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":361}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":362}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"solaris\",\"moduleSequenceNumber\":363}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///2d7d9e0a-ff70-4d33-ba55-c37aeb393833\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///2d7d9e0a-ff70-4d33-ba55-c37aeb393833\"}],\"ramUsage\":6.1,\"server\":\"solaris\",\"moduleSequenceNumber\":364}}],\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":25,\"minDifficulty\":25,\"moneyAvailable\":21699180900,\"moneyMax\":21699180900,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":754,\"serverGrowth\":75}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"32.2.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":28,\"minDifficulty\":28,\"moneyAvailable\":38341390450,\"moneyMax\":38341390450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":893,\"serverGrowth\":60}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"87.1.3.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":365}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":366}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":367}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"global-pharm\",\"moduleSequenceNumber\":368}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"global-pharm\",\"moduleSequenceNumber\":369}}],\"serversOnNetwork\":[\"rho-construction\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":25,\"minDifficulty\":25,\"moneyAvailable\":39107690325,\"moneyMax\":39107690325,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":834,\"serverGrowth\":86}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"51.9.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":370}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":371}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":372}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"nova-med\",\"moduleSequenceNumber\":373}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"nova-med\",\"moduleSequenceNumber\":374}}],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":22,\"minDifficulty\":22,\"moneyAvailable\":27995501675,\"moneyMax\":27995501675,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":810,\"serverGrowth\":84}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"47.3.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":25,\"minDifficulty\":25,\"moneyAvailable\":34469139575,\"moneyMax\":34469139575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":842,\"serverGrowth\":73}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"8.6.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":375}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":376}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":377}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///8eb70454-ff82-4a9d-a42f-18018795746c\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///8eb70454-ff82-4a9d-a42f-18018795746c\"}],\"ramUsage\":5.6,\"server\":\"unitalife\",\"moduleSequenceNumber\":378}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///0f115380-1128-4437-9e78-f1d1033f6e09\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///0f115380-1128-4437-9e78-f1d1033f6e09\"}],\"ramUsage\":6.1,\"server\":\"unitalife\",\"moduleSequenceNumber\":379}}],\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":26240038650,\"moneyMax\":26240038650,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":822,\"serverGrowth\":72}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-732592-BitRunners.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")a()a)())(aaa(a))(\",\"reward\":{\"name\":\"BitRunners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"78.0.1.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":380}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":381}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":382}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///b7f92d68-7354-47d1-9a08-917e52598537\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///b7f92d68-7354-47d1-9a08-917e52598537\"}],\"ramUsage\":5.6,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":383}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///1a81881a-df23-44a0-96df-b243c4c2ff19\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///1a81881a-df23-44a0-96df-b243c4c2ff19\"}],\"ramUsage\":6.1,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":384}}],\"serversOnNetwork\":[\"catalyst\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":18386862725,\"moneyMax\":18386862725,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":651,\"serverGrowth\":60}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"52.5.6.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":385}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":386}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":387}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///f2402602-63a2-401c-acb6-51704560e310\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///f2402602-63a2-401c-acb6-51704560e310\"}],\"ramUsage\":5.6,\"server\":\"rho-construction\",\"moduleSequenceNumber\":388}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///24343ea5-7b92-439f-8cbd-83b47bae6d54\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///24343ea5-7b92-439f-8cbd-83b47bae6d54\"}],\"ramUsage\":6.1,\"server\":\"rho-construction\",\"moduleSequenceNumber\":389}}],\"serversOnNetwork\":[\"syscore\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":14.002,\"minDifficulty\":14,\"moneyAvailable\":13675939086,\"moneyMax\":13749037900,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":516,\"serverGrowth\":47}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"96.8.6.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":390}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":391}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":392}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///6899090a-2ce0-449f-8596-997581f4fc25\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///6899090a-2ce0-449f-8596-997581f4fc25\"}],\"ramUsage\":5.6,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":393}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///74793d46-5206-4b73-b314-48799c63f317\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///74793d46-5206-4b73-b314-48799c63f317\"}],\"ramUsage\":6.1,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":394}}],\"serversOnNetwork\":[\"catalyst\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":15304911825,\"moneyMax\":15304911825,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":513,\"serverGrowth\":51}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"80.5.2.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":395}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":396}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":397}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///3d1c24f7-1764-4578-a8a9-794101f81325\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///3d1c24f7-1764-4578-a8a9-794101f81325\"}],\"ramUsage\":5.6,\"server\":\"aevum-police\",\"moduleSequenceNumber\":398}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///5b1f102e-febc-4697-9376-9f6198576446\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///5b1f102e-febc-4697-9376-9f6198576446\"}],\"ramUsage\":6.1,\"server\":\"aevum-police\",\"moduleSequenceNumber\":399}}],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":5447000300,\"moneyMax\":5447000300,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":413,\"serverGrowth\":43}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"36.7.2.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":400}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":401}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":402}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///29190e1d-9eba-4752-9723-05df2e20cae4\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///29190e1d-9eba-4752-9723-05df2e20cae4\"}],\"ramUsage\":5.6,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":403}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f316cc53-f11f-4c4d-ab07-02784d8d8822\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f316cc53-f11f-4c4d-ab07-02784d8d8822\"}],\"ramUsage\":6.1,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":404}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":17,\"minDifficulty\":17,\"moneyAvailable\":4596414825,\"moneyMax\":4596414825,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":391,\"serverGrowth\":45}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"74.1.6.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":405}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":406}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":407}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"zb-institute\",\"moduleSequenceNumber\":408}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///a5b69f3b-093b-4557-b779-2c6a115464dd\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///a5b69f3b-093b-4557-b779-2c6a115464dd\"}],\"ramUsage\":6.1,\"server\":\"zb-institute\",\"moduleSequenceNumber\":409}}],\"serversOnNetwork\":[\"avmnite-02h\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":21067335750,\"moneyMax\":21067335750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":731,\"serverGrowth\":81}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-411892.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[10,7],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"43.3.3.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":410}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":411}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":412}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///b6f0f67a-012d-457e-9f1c-3fc71e22485b\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///b6f0f67a-012d-457e-9f1c-3fc71e22485b\"}],\"ramUsage\":5.6,\"server\":\"summit-uni\",\"moduleSequenceNumber\":413}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f54ff161-b03e-464b-9848-dcfc93290420\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f54ff161-b03e-464b-9848-dcfc93290420\"}],\"ramUsage\":6.1,\"server\":\"summit-uni\",\"moduleSequenceNumber\":414}}],\"serversOnNetwork\":[\"crush-fitness\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":21,\"minDifficulty\":21,\"moneyAvailable\":7207180250,\"moneyMax\":7207180250,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":459,\"serverGrowth\":55}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"30.7.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":415}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":416}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":417}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"syscore\",\"moduleSequenceNumber\":418}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"syscore\",\"moduleSequenceNumber\":419}}],\"serversOnNetwork\":[\"comptek\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":22,\"minDifficulty\":22,\"moneyAvailable\":14643199675,\"moneyMax\":14643199675,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":604,\"serverGrowth\":70}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"74.4.4.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":420}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":421}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":422}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///431703a5-8d6c-4b40-987f-3893a326b422\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///431703a5-8d6c-4b40-987f-3893a326b422\"}],\"ramUsage\":5.6,\"server\":\"catalyst\",\"moduleSequenceNumber\":423}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///4a2b5f19-1717-48cd-b4a8-2eac3e91df24\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///4a2b5f19-1717-48cd-b4a8-2eac3e91df24\"}],\"ramUsage\":6.1,\"server\":\"catalyst\",\"moduleSequenceNumber\":424}}],\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":22,\"minDifficulty\":22,\"moneyAvailable\":12720934475,\"moneyMax\":12720934475,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":415,\"serverGrowth\":32}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"97.5.2.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":425}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":426}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":427}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///21123f7b-1f79-4a6f-bc7d-33b3817a8f01\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///21123f7b-1f79-4a6f-bc7d-33b3817a8f01\"}],\"ramUsage\":5.6,\"server\":\"the-hub\",\"moduleSequenceNumber\":428}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///0d2c276e-1300-4ab3-8c44-513e9a55d801\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///0d2c276e-1300-4ab3-8c44-513e9a55d801\"}],\"ramUsage\":6.1,\"server\":\"the-hub\",\"moduleSequenceNumber\":429}}],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":15.012000000000004,\"minDifficulty\":15,\"moneyAvailable\":3763489674,\"moneyMax\":3928264975,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":308,\"serverGrowth\":53}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-794125.cct\",\"type\":\"Array Jumping Game\",\"data\":[7,8,0,5,5,4,0,4,5,2,9,0,8,3,1,0],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"55.0.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":430}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":431}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":432}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"comptek\",\"moduleSequenceNumber\":433}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"comptek\",\"moduleSequenceNumber\":434}}],\"serversOnNetwork\":[\"omega-net\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":21,\"minDifficulty\":21,\"moneyAvailable\":5739817775,\"moneyMax\":5739817775,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":351,\"serverGrowth\":54}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"24.4.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":435}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":436}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":437}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///9beaf9a2-10f9-42e9-a93b-e04dc15663bc\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///9beaf9a2-10f9-42e9-a93b-e04dc15663bc\"}],\"ramUsage\":5.6,\"server\":\"netlink\",\"moduleSequenceNumber\":438}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///04530953-1b54-41ad-b81d-9f43eb7362fd\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///04530953-1b54-41ad-b81d-9f43eb7362fd\"}],\"ramUsage\":6.1,\"server\":\"netlink\",\"moduleSequenceNumber\":439}}],\"serversOnNetwork\":[\"phantasy\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":6875000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":424,\"serverGrowth\":64}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"81.8.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":440}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":441}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":442}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":443}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":444}}],\"serversOnNetwork\":[\"phantasy\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":19.011999999999993,\"minDifficulty\":19,\"moneyAvailable\":1707898176,\"moneyMax\":1782466550,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":271,\"serverGrowth\":44}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"80.2.3.6\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":445}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":446}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":447}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"n00dles\",\"moduleSequenceNumber\":448}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"n00dles\",\"moduleSequenceNumber\":449}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":1729893,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-821422.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"1567802498\",85],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"88.4.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":450}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":451}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":452}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///2e8410b5-c863-4c12-a558-bb061d4eefc3\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///2e8410b5-c863-4c12-a558-bb061d4eefc3\"}],\"ramUsage\":5.6,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":453}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f8d07b0d-1831-47b6-8a07-ecbf01928216\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f8d07b0d-1831-47b6-8a07-ecbf01928216\"}],\"ramUsage\":6.1,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":454}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.009999999999999,\"minDifficulty\":3,\"moneyAvailable\":47248315,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"38.3.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":455}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":456}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":457}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///57a7a38b-0403-4191-b975-1c258cfd6877\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///57a7a38b-0403-4191-b975-1c258cfd6877\"}],\"ramUsage\":5.6,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":458}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///40e9a48c-7912-41b5-8fde-165423658322\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///40e9a48c-7912-41b5-8fde-165423658322\"}],\"ramUsage\":6.1,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":459}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.009999999999999,\"minDifficulty\":3,\"moneyAvailable\":54346791,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-610136-CyberSec.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[2,4],[22,25],[6,16],[6,15],[11,13],[10,18],[25,30],[14,24],[23,31],[10,13],[17,24],[1,2],[6,14],[8,13]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"62.2.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":460}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":461}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":462}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///fa8cd3ff-8f8d-4caa-8e12-32dab9856171\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///fa8cd3ff-8f8d-4caa-8e12-32dab9856171\"}],\"ramUsage\":5.6,\"server\":\"joesguns\",\"moduleSequenceNumber\":463}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///842ba49f-aa91-404d-b139-b9d85101c028\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///842ba49f-aa91-404d-b139-b9d85101c028\"}],\"ramUsage\":6.1,\"server\":\"joesguns\",\"moduleSequenceNumber\":464}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.009999999999999,\"minDifficulty\":5,\"moneyAvailable\":59156674,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"45.8.6.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":465}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":466}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":467}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///7193d9d8-55ed-4e13-9467-402f3ab2fca2\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///7193d9d8-55ed-4e13-9467-402f3ab2fca2\"}],\"ramUsage\":5.6,\"server\":\"zer0\",\"moduleSequenceNumber\":468}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///00ffb5c7-c7f6-42ea-9eba-a4d746dc93cc\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///00ffb5c7-c7f6-42ea-9eba-a4d746dc93cc\"}],\"ramUsage\":6.1,\"server\":\"zer0\",\"moduleSequenceNumber\":469}}],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":183783445,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-8313.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[21,6,6,18,50,20,37,17,31,47,16,15],[2,27,16,17,30,38,36,17,20,29,23,32]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"38.2.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":470}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":471}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":472}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///dece61d2-76af-480a-aafe-cf7aab9fa16c\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///dece61d2-76af-480a-aafe-cf7aab9fa16c\"}],\"ramUsage\":5.6,\"server\":\"nectar-net\",\"moduleSequenceNumber\":473}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///07980755-c4fb-4f81-8e26-d902948f6bd9\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///07980755-c4fb-4f81-8e26-d902948f6bd9\"}],\"ramUsage\":6.1,\"server\":\"nectar-net\",\"moduleSequenceNumber\":474}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7.004,\"minDifficulty\":7,\"moneyAvailable\":67299221,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"51.8.2.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":475}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":476}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":477}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///76b787cb-5cae-4435-b92e-a5792e612106\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///76b787cb-5cae-4435-b92e-a5792e612106\"}],\"ramUsage\":5.6,\"server\":\"neo-net\",\"moduleSequenceNumber\":478}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///1ab6d68a-fc03-40da-83e0-0e36701162fd\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///1ab6d68a-fc03-40da-83e0-0e36701162fd\"}],\"ramUsage\":6.1,\"server\":\"neo-net\",\"moduleSequenceNumber\":479}}],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":125000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"4.4.5.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":480}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":481}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":482}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///a683eea7-663a-4de0-a5bf-983cfdb0bf41\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///a683eea7-663a-4de0-a5bf-983cfdb0bf41\"}],\"ramUsage\":5.6,\"server\":\"silver-helix\",\"moduleSequenceNumber\":483}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///cb6ebd92-4153-4cce-bf68-69acfa8a6418\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///cb6ebd92-4153-4cce-bf68-69acfa8a6418\"}],\"ramUsage\":6.1,\"server\":\"silver-helix\",\"moduleSequenceNumber\":484}}],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":1125000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"78.1.0.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":485}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":486}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":487}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///80a408d0-b022-4f26-803a-b905f88e517c\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///80a408d0-b022-4f26-803a-b905f88e517c\"}],\"ramUsage\":5.6,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":488}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///50c96300-7d3a-422b-a9cc-599bc3a92e91\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///50c96300-7d3a-422b-a9cc-599bc3a92e91\"}],\"ramUsage\":6.1,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":489}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.004,\"minDifficulty\":5,\"moneyAvailable\":73398327,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"55.6.6.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":490}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":491}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":492}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///ea43765b-ce7c-4511-a2c0-f388e00f9cd1\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///ea43765b-ce7c-4511-a2c0-f388e00f9cd1\"}],\"ramUsage\":5.6,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":493}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///77511731-a0c3-4bc9-aea7-8cea9250cae5\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///77511731-a0c3-4bc9-aea7-8cea9250cae5\"}],\"ramUsage\":6.1,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":494}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":98936449,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"57.0.1.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":495}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":496}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":497}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///7b32a66f-4995-47ac-b717-2c563fe2ba62\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///7b32a66f-4995-47ac-b717-2c563fe2ba62\"}],\"ramUsage\":5.6,\"server\":\"phantasy\",\"moduleSequenceNumber\":498}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f7cc320a-3f06-4e07-82ba-1c3a8bb1c7ed\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f7cc320a-3f06-4e07-82ba-1c3a8bb1c7ed\"}],\"ramUsage\":6.1,\"server\":\"phantasy\",\"moduleSequenceNumber\":499}}],\"serversOnNetwork\":[\"CSEC\",\"netlink\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":600000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"96.2.5.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":500}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":501}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":502}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///c1864041-6b7e-4f0b-9bb5-b0f0b620624e\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///c1864041-6b7e-4f0b-9bb5-b0f0b620624e\"}],\"ramUsage\":5.6,\"server\":\"max-hardware\",\"moduleSequenceNumber\":503}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///cc9ce1cf-2315-4c78-8e2b-04dc4d76c78b\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///cc9ce1cf-2315-4c78-8e2b-04dc4d76c78b\"}],\"ramUsage\":6.1,\"server\":\"max-hardware\",\"moduleSequenceNumber\":504}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":250000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"60.6.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":505}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":506}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":507}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///be02940b-5d8f-4244-8081-541d5a7781a2\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///be02940b-5d8f-4244-8081-541d5a7781a2\"}],\"ramUsage\":5.6,\"server\":\"omega-net\",\"moduleSequenceNumber\":508}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f12701f2-b8ca-4c07-bdf9-75dac8f0bf5c\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f12701f2-b8ca-4c07-bdf9-75dac8f0bf5c\"}],\"ramUsage\":6.1,\"server\":\"omega-net\",\"moduleSequenceNumber\":509}}],\"serversOnNetwork\":[\"CSEC\",\"comptek\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":33,\"hackDifficulty\":11.136000000000005,\"minDifficulty\":11,\"moneyAvailable\":1527286350,\"moneyMax\":1527286350,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":193,\"serverGrowth\":37}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"48.3.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":510}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":511}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":512}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":513}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":514}}],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":14.010000000000003,\"minDifficulty\":14,\"moneyAvailable\":1393997978,\"moneyMax\":1449843425,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":239,\"serverGrowth\":28}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"12.7.0.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":515}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":516}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":517}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///12b9539b-d454-4baa-ba15-3a4068fba104\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///12b9539b-d454-4baa-ba15-3a4068fba104\"}],\"ramUsage\":5.6,\"server\":\"iron-gym\",\"moduleSequenceNumber\":518}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///37dd54c0-3735-410c-9920-0b07f388132d\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///37dd54c0-3735-410c-9920-0b07f388132d\"}],\"ramUsage\":6.1,\"server\":\"iron-gym\",\"moduleSequenceNumber\":519}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":500000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-36986.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[106,64,43,198,67,121,180,63,147,147,192,22,40,19,133,156,98,196,12],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"82.5.4.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":520}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":521}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":522}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///5049ba53-36c1-4cbe-a10e-e5d230c23d50\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///5049ba53-36c1-4cbe-a10e-e5d230c23d50\"}],\"ramUsage\":5.6,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":523}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///23488852-197c-4941-9b09-9ff6bd843eb4\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///23488852-197c-4941-9b09-9ff6bd843eb4\"}],\"ramUsage\":6.1,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":524}}],\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":18,\"minDifficulty\":18,\"moneyAvailable\":6250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":520,\"serverGrowth\":36}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"69.5.2.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":21,\"minDifficulty\":21,\"moneyAvailable\":22500000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1052,\"serverGrowth\":50}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-152376-BitRunners.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[179,200,91,85,107,114,185,152,185,136,147,141,88,30,107,43,162,124,69,11,143,155,3,135,184,22,73,5,20,73,89,90,2,14,108,96,180],\"reward\":{\"name\":\"BitRunners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"8.1.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":525}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":526}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":527}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":528}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":529}}],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":11250000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":688,\"serverGrowth\":57}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"60.2.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":527,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-500681.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[80,149,39,150,37,188,101,101,85,157,84,161,70,190,160,73,199,123,13,152,24,46,147,60,17,120,166,157,167]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"28.2.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":340,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"12.0.7.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":208,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"79.8.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":543,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"37.2.4.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"n00dles\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":51,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"32.9.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"31.3.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"94.6.0.6\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-0\",\"httpPortOpen\":false,\"ip\":\"86.6.4.3\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2486.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",\"pserv-524288gb-0\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":150165.232918669,\"onlineMoneyMade\":1968234756,\"onlineRunningTime\":7670.809999995763,\"pid\":9235,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",\"pserv-524288gb-0\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":134307.9240554261,\"onlineMoneyMade\":2304393384,\"onlineRunningTime\":7670.809999995763,\"pid\":9236,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",\"pserv-524288gb-0\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":121645.44936673285,\"onlineMoneyMade\":6704324860,\"onlineRunningTime\":7670.809999995763,\"pid\":9237,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",\"pserv-524288gb-0\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":82580.48629241237,\"onlineMoneyMade\":11078025930,\"onlineRunningTime\":7670.809999995763,\"pid\":9238,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",\"pserv-524288gb-0\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":101467.76414074544,\"onlineMoneyMade\":7249882546,\"onlineRunningTime\":7670.809999995763,\"pid\":9239,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",\"pserv-524288gb-0\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":97614.9496607914,\"onlineMoneyMade\":2505214760,\"onlineRunningTime\":7670.809999995763,\"pid\":9240,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",\"pserv-524288gb-0\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":95906.42306716037,\"onlineMoneyMade\":158618719,\"onlineRunningTime\":7670.809999995763,\"pid\":9241,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",\"pserv-524288gb-0\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":120673.25740657569,\"onlineMoneyMade\":722959117,\"onlineRunningTime\":7670.809999995763,\"pid\":9242,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",\"pserv-524288gb-0\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":175700.97004247172,\"onlineMoneyMade\":352238068,\"onlineRunningTime\":7670.809999995763,\"pid\":9243,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",\"pserv-524288gb-0\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":138731.1303804038,\"onlineMoneyMade\":685116187,\"onlineRunningTime\":7670.809999995763,\"pid\":9244,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",\"pserv-524288gb-0\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":130859.65080927801,\"onlineMoneyMade\":429821019,\"onlineRunningTime\":7670.809999995763,\"pid\":9245,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":790.0100000000118,\"pid\":89278,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":729.8100000000121,\"pid\":89967,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.410000000000075,\"pid\":91197,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.410000000000075,\"pid\":91198,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":211}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.410000000000075,\"pid\":91199,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-0\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.410000000000075,\"pid\":91200,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":8}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.410000000000075,\"pid\":91201,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":89}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.410000000000075,\"pid\":91202,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.410000000000075,\"pid\":91203,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.410000000000075,\"pid\":91204,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":116}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.410000000000075,\"pid\":91205,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-0\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.410000000000075,\"pid\":91206,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.410000000000075,\"pid\":91207,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":131}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.410000000000075,\"pid\":91208,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-0\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.21000000000007,\"pid\":91209,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.21000000000007,\"pid\":91210,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":117}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.21000000000007,\"pid\":91211,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.21000000000007,\"pid\":91212,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":15}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.21000000000007,\"pid\":91213,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":187}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.21000000000007,\"pid\":91214,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.21000000000007,\"pid\":91215,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.21000000000007,\"pid\":91216,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":137}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.21000000000007,\"pid\":91217,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.21000000000007,\"pid\":91218,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.21000000000007,\"pid\":91219,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":134}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.21000000000007,\"pid\":91220,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.40999999999994,\"pid\":91913,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.40999999999994,\"pid\":91914,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":122}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.40999999999994,\"pid\":91915,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-0\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"moduleSequenceNumber\":1465}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"moduleSequenceNumber\":1466}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-0\",\"moduleSequenceNumber\":1467}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-0\",\"moduleSequenceNumber\":1468}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///fb8c2c51-86ca-4142-bc40-c7f16788ee2e\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///fb8c2c51-86ca-4142-bc40-c7f16788ee2e\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-0\",\"moduleSequenceNumber\":1659}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-1\",\"httpPortOpen\":false,\"ip\":\"9.6.6.1\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2486.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",\"pserv-524288gb-1\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":150302.74686822822,\"onlineMoneyMade\":3968930154,\"onlineRunningTime\":7670.809999995763,\"pid\":9246,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",\"pserv-524288gb-1\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":134462.06474868022,\"onlineMoneyMade\":3402568120,\"onlineRunningTime\":7670.809999995763,\"pid\":9247,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",\"pserv-524288gb-1\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":120882.30351123265,\"onlineMoneyMade\":1809362010,\"onlineRunningTime\":7670.809999995763,\"pid\":9248,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",\"pserv-524288gb-1\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":82580.48629241239,\"onlineMoneyMade\":11316190118,\"onlineRunningTime\":7670.809999995763,\"pid\":9249,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",\"pserv-524288gb-1\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":100561.12737999417,\"onlineMoneyMade\":1452674974,\"onlineRunningTime\":7670.809999995763,\"pid\":9250,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",\"pserv-524288gb-1\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":97959.47301253537,\"onlineMoneyMade\":3862262043,\"onlineRunningTime\":7670.809999995763,\"pid\":9251,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",\"pserv-524288gb-1\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":96332.56861522477,\"onlineMoneyMade\":289174094,\"onlineRunningTime\":7670.809999995763,\"pid\":9252,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",\"pserv-524288gb-1\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":120614.3253257976,\"onlineMoneyMade\":643541348,\"onlineRunningTime\":7670.809999995763,\"pid\":9253,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",\"pserv-524288gb-1\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":175830.92638126053,\"onlineMoneyMade\":466720522,\"onlineRunningTime\":7670.809999995763,\"pid\":9254,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",\"pserv-524288gb-1\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":138672.9540607028,\"onlineMoneyMade\":618708641,\"onlineRunningTime\":7670.809999995763,\"pid\":9255,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",\"pserv-524288gb-1\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":130725.15990402696,\"onlineMoneyMade\":321308858,\"onlineRunningTime\":7670.809999995763,\"pid\":9256,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":789.8100000000119,\"pid\":89281,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":729.8100000000121,\"pid\":89970,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.21000000000007,\"pid\":91221,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.21000000000007,\"pid\":91222,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":211}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.21000000000007,\"pid\":91223,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-1\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.21000000000007,\"pid\":91224,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":8}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.21000000000007,\"pid\":91225,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":89}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.21000000000007,\"pid\":91226,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.21000000000007,\"pid\":91227,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.21000000000007,\"pid\":91228,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":116}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.21000000000007,\"pid\":91229,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-1\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.21000000000007,\"pid\":91230,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.21000000000007,\"pid\":91231,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":131}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.21000000000007,\"pid\":91232,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-1\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.01000000000007,\"pid\":91233,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.01000000000007,\"pid\":91234,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":117}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.01000000000007,\"pid\":91235,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.01000000000007,\"pid\":91236,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":15}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.01000000000007,\"pid\":91237,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":187}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.01000000000007,\"pid\":91238,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.01000000000007,\"pid\":91239,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.01000000000007,\"pid\":91240,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":137}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.01000000000007,\"pid\":91241,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.01000000000007,\"pid\":91242,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.01000000000007,\"pid\":91243,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":134}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.01000000000007,\"pid\":91244,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.20999999999994,\"pid\":91916,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.20999999999994,\"pid\":91917,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":122}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.20999999999994,\"pid\":91918,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-1\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"moduleSequenceNumber\":1470}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"moduleSequenceNumber\":1471}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-1\",\"moduleSequenceNumber\":1472}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-1\",\"moduleSequenceNumber\":1473}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///e71e79b2-5f10-4264-af81-886f5e499b40\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///e71e79b2-5f10-4264-af81-886f5e499b40\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-1\",\"moduleSequenceNumber\":1670}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-2\",\"httpPortOpen\":false,\"ip\":\"87.3.9.5\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2486.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",\"pserv-524288gb-2\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":150027.71896910976,\"onlineMoneyMade\":0,\"onlineRunningTime\":7670.809999995763,\"pid\":9257,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",\"pserv-524288gb-2\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":134616.20544193435,\"onlineMoneyMade\":4442850046,\"onlineRunningTime\":7670.809999995763,\"pid\":9258,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",\"pserv-524288gb-2\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":121187.56185343272,\"onlineMoneyMade\":3800042318,\"onlineRunningTime\":7670.809999995763,\"pid\":9259,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",\"pserv-524288gb-2\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":82802.5763496757,\"onlineMoneyMade\":14622060516,\"onlineRunningTime\":7670.809999995763,\"pid\":9260,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",\"pserv-524288gb-2\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":101241.10495055762,\"onlineMoneyMade\":5826736498,\"onlineRunningTime\":7670.809999995763,\"pid\":9261,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",\"pserv-524288gb-2\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":97902.05245391137,\"onlineMoneyMade\":3693281798,\"onlineRunningTime\":7670.809999995763,\"pid\":9262,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",\"pserv-524288gb-2\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":96119.49584119256,\"onlineMoneyMade\":231510569,\"onlineRunningTime\":7670.809999995763,\"pid\":9263,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",\"pserv-524288gb-2\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":120732.18948735375,\"onlineMoneyMade\":799775650,\"onlineRunningTime\":7670.809999995763,\"pid\":9264,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",\"pserv-524288gb-2\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":175700.97004247172,\"onlineMoneyMade\":347466765,\"onlineRunningTime\":7670.809999995763,\"pid\":9265,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",\"pserv-524288gb-2\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":138672.9540607028,\"onlineMoneyMade\":613956624,\"onlineRunningTime\":7670.809999995763,\"pid\":9266,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",\"pserv-524288gb-2\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":130725.15990402696,\"onlineMoneyMade\":320474265,\"onlineRunningTime\":7670.809999995763,\"pid\":9267,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":789.8100000000119,\"pid\":89284,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":729.8100000000121,\"pid\":89973,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.01000000000007,\"pid\":91245,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.01000000000007,\"pid\":91246,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":211}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.01000000000007,\"pid\":91247,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-2\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.01000000000007,\"pid\":91248,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":8}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.01000000000007,\"pid\":91249,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":89}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.01000000000007,\"pid\":91250,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.01000000000007,\"pid\":91251,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.01000000000007,\"pid\":91252,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":116}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.01000000000007,\"pid\":91253,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-2\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.01000000000007,\"pid\":91254,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.01000000000007,\"pid\":91255,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":131}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.01000000000007,\"pid\":91256,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-2\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.810000000000066,\"pid\":91257,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.810000000000066,\"pid\":91258,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":117}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.810000000000066,\"pid\":91259,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.810000000000066,\"pid\":91260,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":15}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.810000000000066,\"pid\":91261,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":187}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.810000000000066,\"pid\":91262,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.810000000000066,\"pid\":91263,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.810000000000066,\"pid\":91264,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":137}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.810000000000066,\"pid\":91265,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.810000000000066,\"pid\":91266,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.810000000000066,\"pid\":91267,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":134}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.810000000000066,\"pid\":91268,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.009999999999934,\"pid\":91919,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.009999999999934,\"pid\":91920,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":122}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.009999999999934,\"pid\":91921,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-2\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"moduleSequenceNumber\":1475}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"moduleSequenceNumber\":1476}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-2\",\"moduleSequenceNumber\":1477}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-2\",\"moduleSequenceNumber\":1478}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///350edc35-fb9b-40e7-8fc4-99ddf397368a\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///350edc35-fb9b-40e7-8fc4-99ddf397368a\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-2\",\"moduleSequenceNumber\":1681}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-3\",\"httpPortOpen\":false,\"ip\":\"23.5.8.2\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2486.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",\"pserv-524288gb-3\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":140447.58048315073,\"onlineMoneyMade\":2000537790,\"onlineRunningTime\":7670.809999995763,\"pid\":9268,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",\"pserv-524288gb-3\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":134616.20544193435,\"onlineMoneyMade\":4411519792,\"onlineRunningTime\":7670.809999995763,\"pid\":9269,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",\"pserv-524288gb-3\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":121187.56185343272,\"onlineMoneyMade\":3712319148,\"onlineRunningTime\":7670.809999995763,\"pid\":9270,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",\"pserv-524288gb-3\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":82691.53132104405,\"onlineMoneyMade\":13058683520,\"onlineRunningTime\":7670.809999995763,\"pid\":9271,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",\"pserv-524288gb-3\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":101127.77535546372,\"onlineMoneyMade\":5003052658,\"onlineRunningTime\":7670.809999995763,\"pid\":9272,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",\"pserv-524288gb-3\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":97787.21133666339,\"onlineMoneyMade\":3177519610,\"onlineRunningTime\":7670.809999995763,\"pid\":9273,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",\"pserv-524288gb-3\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":96332.56861522477,\"onlineMoneyMade\":290976658,\"onlineRunningTime\":7670.809999995763,\"pid\":9274,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",\"pserv-524288gb-3\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":120555.39324501951,\"onlineMoneyMade\":556976032,\"onlineRunningTime\":7670.809999995763,\"pid\":9275,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",\"pserv-524288gb-3\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":175765.9482118661,\"onlineMoneyMade\":408770773,\"onlineRunningTime\":7670.809999995763,\"pid\":9276,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",\"pserv-524288gb-3\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":138498.42510159969,\"onlineMoneyMade\":412257390,\"onlineRunningTime\":7670.809999995763,\"pid\":9277,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",\"pserv-524288gb-3\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":130523.42354615038,\"onlineMoneyMade\":162114746,\"onlineRunningTime\":7670.809999995763,\"pid\":9278,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":789.8100000000119,\"pid\":89287,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":729.6100000000121,\"pid\":89976,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.810000000000066,\"pid\":91269,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.810000000000066,\"pid\":91270,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":211}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.810000000000066,\"pid\":91271,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-3\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.810000000000066,\"pid\":91272,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":8}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.810000000000066,\"pid\":91273,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":89}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.810000000000066,\"pid\":91274,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.810000000000066,\"pid\":91275,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.810000000000066,\"pid\":91276,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":116}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.810000000000066,\"pid\":91277,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-3\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.810000000000066,\"pid\":91278,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.810000000000066,\"pid\":91279,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":131}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.810000000000066,\"pid\":91280,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-3\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000006,\"pid\":91281,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000006,\"pid\":91282,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":117}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000006,\"pid\":91283,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000006,\"pid\":91284,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":15}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000006,\"pid\":91285,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":187}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000006,\"pid\":91286,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000006,\"pid\":91287,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000006,\"pid\":91288,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":137}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000006,\"pid\":91289,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000006,\"pid\":91290,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000006,\"pid\":91291,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":134}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000006,\"pid\":91292,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.80999999999993,\"pid\":91922,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.80999999999993,\"pid\":91923,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":122}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.80999999999993,\"pid\":91924,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-3\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"moduleSequenceNumber\":1480}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"moduleSequenceNumber\":1481}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-3\",\"moduleSequenceNumber\":1482}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-3\",\"moduleSequenceNumber\":1483}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///55c0397a-0bdd-4f1c-a369-e6465bc6ff78\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///55c0397a-0bdd-4f1c-a369-e6465bc6ff78\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-3\",\"moduleSequenceNumber\":1692}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-4\",\"httpPortOpen\":false,\"ip\":\"79.7.2.8\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2486.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",\"pserv-524288gb-4\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":140722.6083822692,\"onlineMoneyMade\":5887236072,\"onlineRunningTime\":7670.809999995763,\"pid\":9279,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",\"pserv-524288gb-4\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":134924.48682844258,\"onlineMoneyMade\":6488679142,\"onlineRunningTime\":7670.809999995763,\"pid\":9280,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",\"pserv-524288gb-4\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":120882.30351123265,\"onlineMoneyMade\":1861502540,\"onlineRunningTime\":7670.809999995763,\"pid\":9281,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",\"pserv-524288gb-4\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":82617.50130195626,\"onlineMoneyMade\":11875208795,\"onlineRunningTime\":7670.809999995763,\"pid\":9282,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",\"pserv-524288gb-4\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":101354.43454565153,\"onlineMoneyMade\":6446032986,\"onlineRunningTime\":7670.809999995763,\"pid\":9283,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",\"pserv-524288gb-4\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":97614.9496607914,\"onlineMoneyMade\":2466290773,\"onlineRunningTime\":7670.809999995763,\"pid\":9284,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",\"pserv-524288gb-4\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":96119.49584119256,\"onlineMoneyMade\":226677854,\"onlineRunningTime\":7670.809999995763,\"pid\":9285,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",\"pserv-524288gb-4\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":120673.25740657568,\"onlineMoneyMade\":714185418,\"onlineRunningTime\":7670.809999995763,\"pid\":9286,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",\"pserv-524288gb-4\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":175830.92638126053,\"onlineMoneyMade\":466941311,\"onlineRunningTime\":7670.809999995763,\"pid\":9287,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",\"pserv-524288gb-4\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":138672.9540607028,\"onlineMoneyMade\":614942547,\"onlineRunningTime\":7670.809999995763,\"pid\":9288,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",\"pserv-524288gb-4\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":130792.40535665251,\"onlineMoneyMade\":369925023,\"onlineRunningTime\":7670.809999995763,\"pid\":9289,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":789.8100000000119,\"pid\":89290,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":729.6100000000121,\"pid\":89979,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000006,\"pid\":91293,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000006,\"pid\":91294,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":211}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000006,\"pid\":91295,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-4\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000006,\"pid\":91296,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":8}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000006,\"pid\":91297,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":89}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000006,\"pid\":91298,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000006,\"pid\":91299,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000006,\"pid\":91300,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":116}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000006,\"pid\":91301,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-4\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000006,\"pid\":91302,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000006,\"pid\":91303,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":131}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000006,\"pid\":91304,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-4\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000006,\"pid\":91305,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000006,\"pid\":91306,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":117}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000006,\"pid\":91307,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000006,\"pid\":91308,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":15}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000006,\"pid\":91309,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":187}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000006,\"pid\":91310,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000006,\"pid\":91311,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000006,\"pid\":91312,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":137}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000006,\"pid\":91313,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000006,\"pid\":91314,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000006,\"pid\":91315,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":134}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000006,\"pid\":91316,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.409999999999926,\"pid\":91925,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.409999999999926,\"pid\":91926,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":122}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.409999999999926,\"pid\":91927,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-4\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"moduleSequenceNumber\":1485}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"moduleSequenceNumber\":1486}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-4\",\"moduleSequenceNumber\":1487}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-4\",\"moduleSequenceNumber\":1488}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///043f68ab-789b-4a1c-b2a8-a56383b5959d\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///043f68ab-789b-4a1c-b2a8-a56383b5959d\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-4\",\"moduleSequenceNumber\":1703}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-5\",\"httpPortOpen\":false,\"ip\":\"3.0.1.0\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":3104.35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\",\"pserv-524288gb-5\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":112057.29348971718,\"onlineMoneyMade\":260030110,\"onlineRunningTime\":7670.809999995763,\"pid\":9290,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",\"pserv-524288gb-5\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":118058.53207761815,\"onlineMoneyMade\":846382674,\"onlineRunningTime\":7670.809999995763,\"pid\":9291,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",\"pserv-524288gb-5\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":141543.0439963294,\"onlineMoneyMade\":572348969,\"onlineRunningTime\":7670.809999995763,\"pid\":9292,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",\"pserv-524288gb-5\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":165681.3902272677,\"onlineMoneyMade\":180474560,\"onlineRunningTime\":7670.809999995763,\"pid\":9293,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\",\"pserv-524288gb-5\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":125646.13220228933,\"onlineMoneyMade\":224466010,\"onlineRunningTime\":7670.809999995763,\"pid\":9294,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",\"pserv-524288gb-5\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":118949.4660787553,\"onlineMoneyMade\":889928111,\"onlineRunningTime\":7670.809999995763,\"pid\":9295,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\",\"pserv-524288gb-5\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":156629.46222825136,\"onlineMoneyMade\":175331797,\"onlineRunningTime\":7670.809999995763,\"pid\":9296,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\",\"pserv-524288gb-5\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":163834.14879892985,\"onlineMoneyMade\":283725926,\"onlineRunningTime\":7670.809999995763,\"pid\":9297,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",\"pserv-524288gb-5\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":104695.56950990998,\"onlineMoneyMade\":100875176,\"onlineRunningTime\":7670.809999995763,\"pid\":9298,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\",\"pserv-524288gb-5\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":120353.49087589339,\"onlineMoneyMade\":315952451,\"onlineRunningTime\":7670.809999995763,\"pid\":9299,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",\"pserv-524288gb-5\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":158200.80537368386,\"onlineMoneyMade\":463631798,\"onlineRunningTime\":7670.809999995763,\"pid\":9300,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000006,\"pid\":91317,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000006,\"pid\":91318,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":128}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000006,\"pid\":91319,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-5\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000006,\"pid\":91320,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000006,\"pid\":91321,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":105}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000006,\"pid\":91322,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":91323,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":91324,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":134}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":91325,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":91326,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":15}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":91327,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":184}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":91328,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":91329,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":91330,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":131}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":91331,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":91332,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":91333,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":114}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":91334,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":91335,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":15}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":91336,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":91337,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":91338,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":16}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":91339,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":194}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":91340,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-5\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":91341,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":91342,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":168}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":91343,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-5\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":91344,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":91345,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":120}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":91346,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":91347,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":91348,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":134}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":91349,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-5\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"moduleSequenceNumber\":1490}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"moduleSequenceNumber\":1491}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-5\",\"moduleSequenceNumber\":1492}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-5\",\"moduleSequenceNumber\":1493}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///969bd615-e7b1-4000-87d7-e5a87b23b09f\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///969bd615-e7b1-4000-87d7-e5a87b23b09f\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-5\",\"moduleSequenceNumber\":1714}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-6\",\"httpPortOpen\":false,\"ip\":\"44.0.2.0\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":3104.35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\",\"pserv-524288gb-6\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":112190.27287281415,\"onlineMoneyMade\":322074344,\"onlineRunningTime\":7670.809999995763,\"pid\":9301,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",\"pserv-524288gb-6\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":118007.15760761048,\"onlineMoneyMade\":778274573,\"onlineRunningTime\":7670.809999995763,\"pid\":9302,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",\"pserv-524288gb-6\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":141543.0439963294,\"onlineMoneyMade\":569696828,\"onlineRunningTime\":7670.809999995763,\"pid\":9303,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",\"pserv-524288gb-6\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":165818.90417682694,\"onlineMoneyMade\":265845515,\"onlineRunningTime\":7670.809999995763,\"pid\":9304,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\",\"pserv-524288gb-6\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":125792.71528477303,\"onlineMoneyMade\":302184554,\"onlineRunningTime\":7670.809999995763,\"pid\":9305,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",\"pserv-524288gb-6\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":118860.3208381267,\"onlineMoneyMade\":758171658,\"onlineRunningTime\":7670.809999995763,\"pid\":9306,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\",\"pserv-524288gb-6\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":156697.46344195394,\"onlineMoneyMade\":205276545,\"onlineRunningTime\":7670.809999995763,\"pid\":9307,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\",\"pserv-524288gb-6\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":163689.07723860024,\"onlineMoneyMade\":236398452,\"onlineRunningTime\":7670.809999995763,\"pid\":9308,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",\"pserv-524288gb-6\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":104645.70656205637,\"onlineMoneyMade\":88544572,\"onlineRunningTime\":7670.809999995763,\"pid\":9309,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\",\"pserv-524288gb-6\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":120353.49087589337,\"onlineMoneyMade\":312525718,\"onlineRunningTime\":7670.809999995763,\"pid\":9310,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",\"pserv-524288gb-6\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":158317.15801308595,\"onlineMoneyMade\":579073910,\"onlineRunningTime\":7670.809999995763,\"pid\":9311,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.010000000000055,\"pid\":91350,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.010000000000055,\"pid\":91351,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":128}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.010000000000055,\"pid\":91352,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-6\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.010000000000055,\"pid\":91353,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.010000000000055,\"pid\":91354,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":105}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.010000000000055,\"pid\":91355,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.010000000000055,\"pid\":91356,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.010000000000055,\"pid\":91357,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":134}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.010000000000055,\"pid\":91358,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.010000000000055,\"pid\":91359,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":15}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.010000000000055,\"pid\":91360,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":184}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.010000000000055,\"pid\":91361,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.010000000000055,\"pid\":91362,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.010000000000055,\"pid\":91363,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":131}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.010000000000055,\"pid\":91364,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.010000000000055,\"pid\":91365,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.010000000000055,\"pid\":91366,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":114}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.010000000000055,\"pid\":91367,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.010000000000055,\"pid\":91368,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":15}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.010000000000055,\"pid\":91369,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.010000000000055,\"pid\":91370,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.010000000000055,\"pid\":91371,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":16}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.010000000000055,\"pid\":91372,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":194}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.010000000000055,\"pid\":91373,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-6\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":91374,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":91375,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":168}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":91376,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-6\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":91377,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":91378,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":120}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":91379,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":91380,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":91381,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":134}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":91382,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-6\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"moduleSequenceNumber\":1495}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"moduleSequenceNumber\":1496}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-6\",\"moduleSequenceNumber\":1497}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-6\",\"moduleSequenceNumber\":1498}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///d3ac9b60-7e7d-478e-8df8-6cb12fdaea1a\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///d3ac9b60-7e7d-478e-8df8-6cb12fdaea1a\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-6\",\"moduleSequenceNumber\":1725}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-7\",\"httpPortOpen\":false,\"ip\":\"72.4.7.4\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":3104.35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\",\"pserv-524288gb-7\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":111924.31410662021,\"onlineMoneyMade\":212169666,\"onlineRunningTime\":7670.809999995763,\"pid\":9312,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",\"pserv-524288gb-7\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":118058.53207761815,\"onlineMoneyMade\":842381578,\"onlineRunningTime\":7670.809999995763,\"pid\":9313,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",\"pserv-524288gb-7\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":141543.0439963294,\"onlineMoneyMade\":569913378,\"onlineRunningTime\":7670.809999995763,\"pid\":9314,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",\"pserv-524288gb-7\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":165956.41812638615,\"onlineMoneyMade\":355707509,\"onlineRunningTime\":7670.809999995763,\"pid\":9315,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\",\"pserv-524288gb-7\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":125646.13220228931,\"onlineMoneyMade\":228218510,\"onlineRunningTime\":7670.809999995763,\"pid\":9316,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",\"pserv-524288gb-7\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":118860.3208381267,\"onlineMoneyMade\":759117835,\"onlineRunningTime\":7670.809999995763,\"pid\":9317,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\",\"pserv-524288gb-7\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":156493.45980084623,\"onlineMoneyMade\":116388115,\"onlineRunningTime\":7670.809999995763,\"pid\":9318,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\",\"pserv-524288gb-7\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":163544.00567827062,\"onlineMoneyMade\":183096590,\"onlineRunningTime\":7670.809999995763,\"pid\":9319,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",\"pserv-524288gb-7\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":104645.70656205638,\"onlineMoneyMade\":92759840,\"onlineRunningTime\":7670.809999995763,\"pid\":9320,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\",\"pserv-524288gb-7\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":120353.4908758934,\"onlineMoneyMade\":319440597,\"onlineRunningTime\":7670.809999995763,\"pid\":9321,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",\"pserv-524288gb-7\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":158258.9816933849,\"onlineMoneyMade\":520516988,\"onlineRunningTime\":7670.809999995763,\"pid\":9322,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":91383,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":91384,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":128}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":91385,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-7\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":91386,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":91387,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":105}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":91388,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":91389,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":91390,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":134}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":91391,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":91392,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":15}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":91393,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":184}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":91394,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":91395,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":91396,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":131}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":91397,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.61000000000005,\"pid\":91398,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.61000000000005,\"pid\":91399,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":114}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.61000000000005,\"pid\":91400,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.61000000000005,\"pid\":91401,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":15}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.61000000000005,\"pid\":91402,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.61000000000005,\"pid\":91403,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.61000000000005,\"pid\":91404,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":16}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.61000000000005,\"pid\":91405,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":194}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.61000000000005,\"pid\":91406,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-7\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.410000000000046,\"pid\":91407,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.410000000000046,\"pid\":91408,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":168}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.410000000000046,\"pid\":91409,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-7\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.410000000000046,\"pid\":91410,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.410000000000046,\"pid\":91411,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":120}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.410000000000046,\"pid\":91412,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.410000000000046,\"pid\":91413,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.410000000000046,\"pid\":91414,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":134}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.410000000000046,\"pid\":91415,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-7\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"moduleSequenceNumber\":1500}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"moduleSequenceNumber\":1501}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-7\",\"moduleSequenceNumber\":1502}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-7\",\"moduleSequenceNumber\":1503}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///9ec774f1-df94-4224-984b-654a7ef34cac\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///9ec774f1-df94-4224-984b-654a7ef34cac\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-7\",\"moduleSequenceNumber\":1736}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-8\",\"httpPortOpen\":false,\"ip\":\"3.4.3.4\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":3104.35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\",\"pserv-524288gb-8\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":112323.25225591112,\"onlineMoneyMade\":370485358,\"onlineRunningTime\":7670.809999995763,\"pid\":9323,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",\"pserv-524288gb-8\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":117955.7831376028,\"onlineMoneyMade\":707920602,\"onlineRunningTime\":7670.809999995763,\"pid\":9324,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",\"pserv-524288gb-8\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":141710.77110573914,\"onlineMoneyMade\":736891826,\"onlineRunningTime\":7670.809999995763,\"pid\":9325,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",\"pserv-524288gb-8\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":165681.39022726772,\"onlineMoneyMade\":174700119,\"onlineRunningTime\":7670.809999995763,\"pid\":9326,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\",\"pserv-524288gb-8\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":125646.13220228933,\"onlineMoneyMade\":227194777,\"onlineRunningTime\":7670.809999995763,\"pid\":9327,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",\"pserv-524288gb-8\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":118815.7482178124,\"onlineMoneyMade\":694270023,\"onlineRunningTime\":7670.809999995763,\"pid\":9328,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\",\"pserv-524288gb-8\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":156561.4610145488,\"onlineMoneyMade\":143317264,\"onlineRunningTime\":7670.809999995763,\"pid\":9329,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\",\"pserv-524288gb-8\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":163834.14879892988,\"onlineMoneyMade\":276692482,\"onlineRunningTime\":7670.809999995763,\"pid\":9330,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",\"pserv-524288gb-8\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":104895.0213013243,\"onlineMoneyMade\":128704048,\"onlineRunningTime\":7670.809999995763,\"pid\":9331,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\",\"pserv-524288gb-8\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":120468.33199314137,\"onlineMoneyMade\":391921131,\"onlineRunningTime\":7670.809999995763,\"pid\":9332,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",\"pserv-524288gb-8\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":158258.9816933849,\"onlineMoneyMade\":521036031,\"onlineRunningTime\":7670.809999995763,\"pid\":9333,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.410000000000046,\"pid\":91416,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.410000000000046,\"pid\":91417,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":128}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.410000000000046,\"pid\":91418,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-8\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.410000000000046,\"pid\":91419,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.410000000000046,\"pid\":91420,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":105}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.410000000000046,\"pid\":91421,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.21000000000004,\"pid\":91422,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.21000000000004,\"pid\":91423,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":134}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.21000000000004,\"pid\":91424,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.21000000000004,\"pid\":91425,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":15}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.21000000000004,\"pid\":91426,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":184}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.21000000000004,\"pid\":91427,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.21000000000004,\"pid\":91428,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.21000000000004,\"pid\":91429,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":131}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.21000000000004,\"pid\":91430,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.21000000000004,\"pid\":91431,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.21000000000004,\"pid\":91432,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":114}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.21000000000004,\"pid\":91433,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.01000000000004,\"pid\":91434,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":15}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.01000000000004,\"pid\":91435,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.01000000000004,\"pid\":91436,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.01000000000004,\"pid\":91437,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":16}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.01000000000004,\"pid\":91438,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":194}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.01000000000004,\"pid\":91439,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-8\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.01000000000004,\"pid\":91440,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.01000000000004,\"pid\":91441,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":168}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.01000000000004,\"pid\":91442,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-8\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.01000000000004,\"pid\":91443,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.01000000000004,\"pid\":91444,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":120}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.01000000000004,\"pid\":91445,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.01000000000004,\"pid\":91446,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.01000000000004,\"pid\":91447,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":134}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.01000000000004,\"pid\":91448,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-8\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"moduleSequenceNumber\":1505}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"moduleSequenceNumber\":1506}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-8\",\"moduleSequenceNumber\":1507}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-8\",\"moduleSequenceNumber\":1508}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///4a30795f-ca4a-4b1f-b644-8eac0d483fc5\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///4a30795f-ca4a-4b1f-b644-8eac0d483fc5\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-8\",\"moduleSequenceNumber\":1747}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-9\",\"httpPortOpen\":false,\"ip\":\"60.8.6.0\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":3104.35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\",\"pserv-524288gb-9\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":111658.35534042626,\"onlineMoneyMade\":112384344,\"onlineRunningTime\":7670.809999995763,\"pid\":9334,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",\"pserv-524288gb-9\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":118058.53207761815,\"onlineMoneyMade\":838113839,\"onlineRunningTime\":7670.809999995763,\"pid\":9335,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",\"pserv-524288gb-9\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":141263.49881397985,\"onlineMoneyMade\":279588466,\"onlineRunningTime\":7670.809999995763,\"pid\":9336,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",\"pserv-524288gb-9\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":165818.90417682694,\"onlineMoneyMade\":266588391,\"onlineRunningTime\":7670.809999995763,\"pid\":9337,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\",\"pserv-524288gb-9\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":125499.54911980561,\"onlineMoneyMade\":149984614,\"onlineRunningTime\":7670.809999995763,\"pid\":9338,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",\"pserv-524288gb-9\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":118860.3208381267,\"onlineMoneyMade\":757204080,\"onlineRunningTime\":7670.809999995763,\"pid\":9339,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\",\"pserv-524288gb-9\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":156765.4646556565,\"onlineMoneyMade\":230803685,\"onlineRunningTime\":7670.809999995763,\"pid\":9340,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\",\"pserv-524288gb-9\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":163689.07723860026,\"onlineMoneyMade\":228397022,\"onlineRunningTime\":7670.809999995763,\"pid\":9341,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",\"pserv-524288gb-9\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":104845.15835347073,\"onlineMoneyMade\":130052282,\"onlineRunningTime\":7670.809999995763,\"pid\":9342,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\",\"pserv-524288gb-9\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":120353.49087589339,\"onlineMoneyMade\":314205374,\"onlineRunningTime\":7670.809999995763,\"pid\":9343,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",\"pserv-524288gb-9\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":158200.80537368386,\"onlineMoneyMade\":466820699,\"onlineRunningTime\":7670.809999995763,\"pid\":9344,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.81000000000004,\"pid\":91449,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.81000000000004,\"pid\":91450,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":128}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.81000000000004,\"pid\":91451,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-9\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.81000000000004,\"pid\":91452,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":9}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.81000000000004,\"pid\":91453,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":105}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.81000000000004,\"pid\":91454,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.81000000000004,\"pid\":91455,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.81000000000004,\"pid\":91456,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":134}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.81000000000004,\"pid\":91457,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.81000000000004,\"pid\":91458,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":15}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.81000000000004,\"pid\":91459,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":184}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.81000000000004,\"pid\":91460,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000035,\"pid\":91461,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000035,\"pid\":91462,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":131}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000035,\"pid\":91463,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000035,\"pid\":91464,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000035,\"pid\":91465,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":114}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000035,\"pid\":91466,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000035,\"pid\":91467,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":15}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000035,\"pid\":91468,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000035,\"pid\":91469,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000035,\"pid\":91470,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":16}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000035,\"pid\":91471,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":194}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000035,\"pid\":91472,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-9\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000035,\"pid\":91473,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000035,\"pid\":91474,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":168}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000035,\"pid\":91475,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-9\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000035,\"pid\":91476,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000035,\"pid\":91477,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":120}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000035,\"pid\":91478,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000035,\"pid\":91479,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000035,\"pid\":91480,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":134}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000035,\"pid\":91481,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-9\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"moduleSequenceNumber\":1510}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"moduleSequenceNumber\":1511}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-9\",\"moduleSequenceNumber\":1512}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-9\",\"moduleSequenceNumber\":1513}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///12146f2f-a918-4f1e-9f9c-237bb9c1a97e\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///12146f2f-a918-4f1e-9f9c-237bb9c1a97e\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-9\",\"moduleSequenceNumber\":1758}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-10\",\"httpPortOpen\":false,\"ip\":\"44.2.3.8\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2791.35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\",\"pserv-524288gb-10\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":151398.87290526667,\"onlineMoneyMade\":493562761,\"onlineRunningTime\":7670.809999995763,\"pid\":9345,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",\"pserv-524288gb-10\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":152740.98460956593,\"onlineMoneyMade\":333252734,\"onlineRunningTime\":7670.809999995763,\"pid\":9346,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",\"pserv-524288gb-10\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":160831.92861617779,\"onlineMoneyMade\":593690621,\"onlineRunningTime\":7670.809999995763,\"pid\":9347,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",\"pserv-524288gb-10\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":67482.54595453042,\"onlineMoneyMade\":398916105,\"onlineRunningTime\":7670.809999995763,\"pid\":9348,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\",\"pserv-524288gb-10\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":162846.62002339645,\"onlineMoneyMade\":297986190,\"onlineRunningTime\":7670.809999995763,\"pid\":9349,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",\"pserv-524288gb-10\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":197193.49546339968,\"onlineMoneyMade\":720008114,\"onlineRunningTime\":7670.809999995763,\"pid\":9350,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\",\"pserv-524288gb-10\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":152915.36732998886,\"onlineMoneyMade\":47767319,\"onlineRunningTime\":7670.809999995763,\"pid\":9351,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\",\"pserv-524288gb-10\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":149657.31547806592,\"onlineMoneyMade\":217083016,\"onlineRunningTime\":7670.809999995763,\"pid\":9352,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",\"pserv-524288gb-10\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":286627.2515466514,\"onlineMoneyMade\":1946729953,\"onlineRunningTime\":7670.809999995763,\"pid\":9353,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\",\"pserv-524288gb-10\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":175317.0640161972,\"onlineMoneyMade\":1007004770,\"onlineRunningTime\":7670.809999995763,\"pid\":9354,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\",\"pserv-524288gb-10\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":114037.22942725394,\"onlineMoneyMade\":300447948,\"onlineRunningTime\":7670.809999995763,\"pid\":9355,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.41000000000003,\"pid\":91482,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.41000000000003,\"pid\":91483,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":139}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.41000000000003,\"pid\":91484,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.41000000000003,\"pid\":91485,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.41000000000003,\"pid\":91486,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":145}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.41000000000003,\"pid\":91487,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.41000000000003,\"pid\":91488,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.41000000000003,\"pid\":91489,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":129}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.41000000000003,\"pid\":91490,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.41000000000003,\"pid\":91491,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":8}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.41000000000003,\"pid\":91492,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":90}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.41000000000003,\"pid\":91493,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.41000000000003,\"pid\":91494,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.41000000000003,\"pid\":91495,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":159}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.41000000000003,\"pid\":91496,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.41000000000003,\"pid\":91497,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.41000000000003,\"pid\":91498,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":160}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.41000000000003,\"pid\":91499,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.41000000000003,\"pid\":91500,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.41000000000003,\"pid\":91501,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":163}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.41000000000003,\"pid\":91502,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.21000000000003,\"pid\":91503,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.21000000000003,\"pid\":91504,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":157}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.21000000000003,\"pid\":91505,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.21000000000003,\"pid\":91506,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.21000000000003,\"pid\":91507,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":157}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.21000000000003,\"pid\":91508,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.21000000000003,\"pid\":91509,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.21000000000003,\"pid\":91510,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":126}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.21000000000003,\"pid\":91511,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.21000000000003,\"pid\":91512,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.21000000000003,\"pid\":91513,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"moduleSequenceNumber\":1515}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"moduleSequenceNumber\":1516}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-10\",\"moduleSequenceNumber\":1517}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-10\",\"moduleSequenceNumber\":1518}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///b6ab66ac-7ef9-43ed-baee-20ce93cbe7e7\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///b6ab66ac-7ef9-43ed-baee-20ce93cbe7e7\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-10\",\"moduleSequenceNumber\":1769}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-11\",\"httpPortOpen\":false,\"ip\":\"62.9.0.4\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2791.35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\",\"pserv-524288gb-11\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":151284.03178801868,\"onlineMoneyMade\":401626943,\"onlineRunningTime\":7670.809999995763,\"pid\":9356,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",\"pserv-524288gb-11\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":152922.31541836238,\"onlineMoneyMade\":472708955,\"onlineRunningTime\":7670.809999995763,\"pid\":9357,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",\"pserv-524288gb-11\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":160770.7292521686,\"onlineMoneyMade\":533358351,\"onlineRunningTime\":7670.809999995763,\"pid\":9358,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",\"pserv-524288gb-11\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":67344.2935271253,\"onlineMoneyMade\":277328429,\"onlineRunningTime\":7670.809999995763,\"pid\":9359,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\",\"pserv-524288gb-11\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":162846.62002339645,\"onlineMoneyMade\":298308441,\"onlineRunningTime\":7670.809999995763,\"pid\":9360,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",\"pserv-524288gb-11\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":197250.16026094664,\"onlineMoneyMade\":783709990,\"onlineRunningTime\":7670.809999995763,\"pid\":9361,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\",\"pserv-524288gb-11\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":153202.48740633996,\"onlineMoneyMade\":143585005,\"onlineRunningTime\":7670.809999995763,\"pid\":9362,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\",\"pserv-524288gb-11\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":149537.93979435568,\"onlineMoneyMade\":168576194,\"onlineRunningTime\":7670.809999995763,\"pid\":9363,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",\"pserv-524288gb-11\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":286627.2515466514,\"onlineMoneyMade\":1937101506,\"onlineRunningTime\":7670.809999995763,\"pid\":9364,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\",\"pserv-524288gb-11\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":175211.29203187372,\"onlineMoneyMade\":885856849,\"onlineRunningTime\":7670.809999995763,\"pid\":9365,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\",\"pserv-524288gb-11\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":113922.38831000595,\"onlineMoneyMade\":240377559,\"onlineRunningTime\":7670.809999995763,\"pid\":9366,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.21000000000003,\"pid\":91514,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.21000000000003,\"pid\":91515,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":139}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.21000000000003,\"pid\":91516,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.010000000000026,\"pid\":91517,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.010000000000026,\"pid\":91518,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":145}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.010000000000026,\"pid\":91519,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.010000000000026,\"pid\":91520,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.010000000000026,\"pid\":91521,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":129}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.010000000000026,\"pid\":91522,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.010000000000026,\"pid\":91523,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":8}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.010000000000026,\"pid\":91524,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":90}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.010000000000026,\"pid\":91525,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.010000000000026,\"pid\":91526,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.010000000000026,\"pid\":91527,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":159}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.010000000000026,\"pid\":91528,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.010000000000026,\"pid\":91529,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.010000000000026,\"pid\":91530,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":160}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.010000000000026,\"pid\":91531,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.010000000000026,\"pid\":91532,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.010000000000026,\"pid\":91533,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":163}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.010000000000026,\"pid\":91534,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.010000000000026,\"pid\":91535,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.010000000000026,\"pid\":91536,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":157}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.010000000000026,\"pid\":91537,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.010000000000026,\"pid\":91538,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.010000000000026,\"pid\":91539,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":157}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.010000000000026,\"pid\":91540,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.810000000000024,\"pid\":91541,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.810000000000024,\"pid\":91542,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":126}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.810000000000024,\"pid\":91543,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.810000000000024,\"pid\":91544,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.810000000000024,\"pid\":91545,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"moduleSequenceNumber\":1520}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"moduleSequenceNumber\":1521}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-11\",\"moduleSequenceNumber\":1522}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-11\",\"moduleSequenceNumber\":1523}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ddb24900-d6bd-4cc4-b0be-6cce7ebabc02\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ddb24900-d6bd-4cc4-b0be-6cce7ebabc02\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-11\",\"moduleSequenceNumber\":1780}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-12\",\"httpPortOpen\":false,\"ip\":\"63.5.3.0\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2791.35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\",\"pserv-524288gb-12\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":151284.03178801868,\"onlineMoneyMade\":401447451,\"onlineRunningTime\":7670.809999995763,\"pid\":9367,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",\"pserv-524288gb-12\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":152801.42821249808,\"onlineMoneyMade\":377734177,\"onlineRunningTime\":7670.809999995763,\"pid\":9368,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",\"pserv-524288gb-12\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":160954.32734419618,\"onlineMoneyMade\":713349470,\"onlineRunningTime\":7670.809999995763,\"pid\":9369,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",\"pserv-524288gb-12\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":67436.46181206204,\"onlineMoneyMade\":355861776,\"onlineRunningTime\":7670.809999995763,\"pid\":9370,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\",\"pserv-524288gb-12\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":162782.39761507907,\"onlineMoneyMade\":260364375,\"onlineRunningTime\":7670.809999995763,\"pid\":9371,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",\"pserv-524288gb-12\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":197193.49546339968,\"onlineMoneyMade\":715589241,\"onlineRunningTime\":7670.809999995763,\"pid\":9372,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\",\"pserv-524288gb-12\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":153130.7073872522,\"onlineMoneyMade\":121231969,\"onlineRunningTime\":7670.809999995763,\"pid\":9373,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\",\"pserv-524288gb-12\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":149657.31547806592,\"onlineMoneyMade\":215479158,\"onlineRunningTime\":7670.809999995763,\"pid\":9374,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",\"pserv-524288gb-12\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":286578.90012095193,\"onlineMoneyMade\":1853102381,\"onlineRunningTime\":7670.809999995763,\"pid\":9375,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\",\"pserv-524288gb-12\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":175105.5200475502,\"onlineMoneyMade\":764922425,\"onlineRunningTime\":7670.809999995763,\"pid\":9376,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\",\"pserv-524288gb-12\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":113979.80886862995,\"onlineMoneyMade\":269542098,\"onlineRunningTime\":7670.809999995763,\"pid\":9377,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.810000000000024,\"pid\":91546,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.810000000000024,\"pid\":91547,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":139}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.810000000000024,\"pid\":91548,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.810000000000024,\"pid\":91549,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.810000000000024,\"pid\":91550,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":145}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.810000000000024,\"pid\":91551,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.810000000000024,\"pid\":91552,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.810000000000024,\"pid\":91553,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":129}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.810000000000024,\"pid\":91554,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.810000000000024,\"pid\":91555,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":8}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.810000000000024,\"pid\":91556,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":90}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.810000000000024,\"pid\":91557,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.810000000000024,\"pid\":91558,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.810000000000024,\"pid\":91559,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":159}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.810000000000024,\"pid\":91560,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.810000000000024,\"pid\":91561,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.810000000000024,\"pid\":91562,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":160}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.810000000000024,\"pid\":91563,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.810000000000024,\"pid\":91564,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.810000000000024,\"pid\":91565,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":163}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.810000000000024,\"pid\":91566,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.61000000000002,\"pid\":91567,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.61000000000002,\"pid\":91568,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":157}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.61000000000002,\"pid\":91569,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.61000000000002,\"pid\":91570,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.61000000000002,\"pid\":91571,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":157}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.61000000000002,\"pid\":91572,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.61000000000002,\"pid\":91573,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.61000000000002,\"pid\":91574,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":126}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.61000000000002,\"pid\":91575,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.61000000000002,\"pid\":91576,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.61000000000002,\"pid\":91577,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"moduleSequenceNumber\":1525}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"moduleSequenceNumber\":1526}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-12\",\"moduleSequenceNumber\":1527}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-12\",\"moduleSequenceNumber\":1528}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///7bbdf5a7-a8b4-4096-9e45-c12cc2f80f0d\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///7bbdf5a7-a8b4-4096-9e45-c12cc2f80f0d\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-12\",\"moduleSequenceNumber\":1791}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-13\",\"httpPortOpen\":false,\"ip\":\"32.9.9.6\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2791.35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\",\"pserv-524288gb-13\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":151398.87290526667,\"onlineMoneyMade\":488687141,\"onlineRunningTime\":7670.809999995763,\"pid\":9378,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",\"pserv-524288gb-13\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":152740.98460956587,\"onlineMoneyMade\":331389000,\"onlineRunningTime\":7670.809999995763,\"pid\":9379,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",\"pserv-524288gb-13\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":160709.5298881594,\"onlineMoneyMade\":472347432,\"onlineRunningTime\":7670.809999995763,\"pid\":9380,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",\"pserv-524288gb-13\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":67436.46181206204,\"onlineMoneyMade\":356049442,\"onlineRunningTime\":7670.809999995763,\"pid\":9381,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\",\"pserv-524288gb-13\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":162846.62002339645,\"onlineMoneyMade\":297447298,\"onlineRunningTime\":7670.809999995763,\"pid\":9382,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",\"pserv-524288gb-13\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":197023.50107075882,\"onlineMoneyMade\":518281328,\"onlineRunningTime\":7670.809999995763,\"pid\":9383,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\",\"pserv-524288gb-13\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":152987.14734907664,\"onlineMoneyMade\":71487113,\"onlineRunningTime\":7670.809999995763,\"pid\":9384,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\",\"pserv-524288gb-13\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":149537.93979435568,\"onlineMoneyMade\":166390833,\"onlineRunningTime\":7670.809999995763,\"pid\":9385,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",\"pserv-524288gb-13\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":286578.90012095193,\"onlineMoneyMade\":1844601609,\"onlineRunningTime\":7670.809999995763,\"pid\":9386,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\",\"pserv-524288gb-13\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":175317.0640161972,\"onlineMoneyMade\":997435242,\"onlineRunningTime\":7670.809999995763,\"pid\":9387,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\",\"pserv-524288gb-13\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":113979.80886862995,\"onlineMoneyMade\":269947309,\"onlineRunningTime\":7670.809999995763,\"pid\":9388,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.61000000000002,\"pid\":91578,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.61000000000002,\"pid\":91579,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":139}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.61000000000002,\"pid\":91580,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.61000000000002,\"pid\":91581,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.61000000000002,\"pid\":91582,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":145}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.61000000000002,\"pid\":91583,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.41000000000002,\"pid\":91584,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.41000000000002,\"pid\":91585,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":129}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.41000000000002,\"pid\":91586,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.41000000000002,\"pid\":91587,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":8}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.41000000000002,\"pid\":91588,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":90}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.41000000000002,\"pid\":91589,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.41000000000002,\"pid\":91590,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.41000000000002,\"pid\":91591,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":159}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.41000000000002,\"pid\":91592,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.210000000000015,\"pid\":91593,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.210000000000015,\"pid\":91594,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":160}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.210000000000015,\"pid\":91595,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.210000000000015,\"pid\":91596,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.210000000000015,\"pid\":91597,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":163}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.210000000000015,\"pid\":91598,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.210000000000015,\"pid\":91599,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.210000000000015,\"pid\":91600,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":157}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.210000000000015,\"pid\":91601,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.210000000000015,\"pid\":91602,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.210000000000015,\"pid\":91603,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":157}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.210000000000015,\"pid\":91604,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.210000000000015,\"pid\":91605,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.210000000000015,\"pid\":91606,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":126}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.210000000000015,\"pid\":91607,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.210000000000015,\"pid\":91608,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.210000000000015,\"pid\":91609,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"moduleSequenceNumber\":1530}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"moduleSequenceNumber\":1531}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-13\",\"moduleSequenceNumber\":1532}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-13\",\"moduleSequenceNumber\":1533}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///681233ea-be13-4b0b-9e68-ba6559058be4\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///681233ea-be13-4b0b-9e68-ba6559058be4\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-13\",\"moduleSequenceNumber\":1802}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-14\",\"httpPortOpen\":false,\"ip\":\"26.4.3.3\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2791.35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\",\"pserv-524288gb-14\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":151341.45234664265,\"onlineMoneyMade\":445398412,\"onlineRunningTime\":7670.809999995763,\"pid\":9389,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",\"pserv-524288gb-14\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":152680.54100663372,\"onlineMoneyMade\":283881447,\"onlineRunningTime\":7670.809999995763,\"pid\":9390,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",\"pserv-524288gb-14\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":160954.32734419618,\"onlineMoneyMade\":707702684,\"onlineRunningTime\":7670.809999995763,\"pid\":9391,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",\"pserv-524288gb-14\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":67252.12524218854,\"onlineMoneyMade\":196149161,\"onlineRunningTime\":7670.809999995763,\"pid\":9392,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\",\"pserv-524288gb-14\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":162718.17520676172,\"onlineMoneyMade\":222363593,\"onlineRunningTime\":7670.809999995763,\"pid\":9393,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",\"pserv-524288gb-14\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":197250.16026094664,\"onlineMoneyMade\":778162670,\"onlineRunningTime\":7670.809999995763,\"pid\":9394,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\",\"pserv-524288gb-14\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":153130.7073872522,\"onlineMoneyMade\":121621212,\"onlineRunningTime\":7670.809999995763,\"pid\":9395,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\",\"pserv-524288gb-14\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":149657.31547806592,\"onlineMoneyMade\":215460869,\"onlineRunningTime\":7670.809999995763,\"pid\":9396,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",\"pserv-524288gb-14\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":286578.90012095193,\"onlineMoneyMade\":1835784450,\"onlineRunningTime\":7670.809999995763,\"pid\":9397,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\",\"pserv-524288gb-14\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":175105.5200475502,\"onlineMoneyMade\":760078731,\"onlineRunningTime\":7670.809999995763,\"pid\":9398,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\",\"pserv-524288gb-14\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":113979.80886862995,\"onlineMoneyMade\":268921884,\"onlineRunningTime\":7670.809999995763,\"pid\":9399,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.210000000000015,\"pid\":91610,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.210000000000015,\"pid\":91611,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":139}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.210000000000015,\"pid\":91612,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.210000000000015,\"pid\":91613,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.210000000000015,\"pid\":91614,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":145}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.210000000000015,\"pid\":91615,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000001,\"pid\":91616,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000001,\"pid\":91617,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":129}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000001,\"pid\":91618,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000001,\"pid\":91619,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":8}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000001,\"pid\":91620,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":90}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000001,\"pid\":91621,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000001,\"pid\":91622,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000001,\"pid\":91623,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":159}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000001,\"pid\":91624,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000001,\"pid\":91625,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000001,\"pid\":91626,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":160}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000001,\"pid\":91627,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000001,\"pid\":91628,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000001,\"pid\":91629,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":163}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000001,\"pid\":91630,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000001,\"pid\":91631,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000001,\"pid\":91632,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":157}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000001,\"pid\":91633,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000001,\"pid\":91634,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000001,\"pid\":91635,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":157}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000001,\"pid\":91636,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000001,\"pid\":91637,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000001,\"pid\":91638,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":126}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000001,\"pid\":91639,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.81000000000001,\"pid\":91640,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.81000000000001,\"pid\":91641,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"moduleSequenceNumber\":1535}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"moduleSequenceNumber\":1536}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-14\",\"moduleSequenceNumber\":1537}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-14\",\"moduleSequenceNumber\":1538}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///c10f25f1-4474-4ea1-8246-3778c2bef0cc\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///c10f25f1-4474-4ea1-8246-3778c2bef0cc\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-14\",\"moduleSequenceNumber\":1813}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-15\",\"httpPortOpen\":false,\"ip\":\"1.3.9.5\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":3641.8999999999996,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",\"pserv-524288gb-15\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":218493.70305466108,\"onlineMoneyMade\":2604776283,\"onlineRunningTime\":7670.809999995763,\"pid\":9400,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-524288gb-15\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":561407.8352949132,\"onlineMoneyMade\":1928597655,\"onlineRunningTime\":7670.809999995763,\"pid\":9401,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\",\"pserv-524288gb-15\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":173323.25641923782,\"onlineMoneyMade\":655889158,\"onlineRunningTime\":7670.809999995763,\"pid\":9402,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-524288gb-15\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":299776.0424957512,\"onlineMoneyMade\":1026928240,\"onlineRunningTime\":7670.809999995763,\"pid\":9403,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-524288gb-15\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":317861.50867694465,\"onlineMoneyMade\":956650750,\"onlineRunningTime\":7670.809999995763,\"pid\":9404,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\",\"pserv-524288gb-15\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":331153.21649543836,\"onlineMoneyMade\":778096881,\"onlineRunningTime\":7670.809999995763,\"pid\":9405,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-524288gb-15\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":356452.69974867115,\"onlineMoneyMade\":1139112028,\"onlineRunningTime\":7670.809999995763,\"pid\":9406,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-524288gb-15\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":514931.4487734093,\"onlineMoneyMade\":635482036,\"onlineRunningTime\":7670.809999995763,\"pid\":9407,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-524288gb-15\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327884.96901239915,\"onlineMoneyMade\":1050917923,\"onlineRunningTime\":7670.809999995763,\"pid\":9408,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-524288gb-15\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":319578.7244914333,\"onlineMoneyMade\":1530600823,\"onlineRunningTime\":7670.809999995763,\"pid\":9409,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-524288gb-15\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":534089.2084736779,\"onlineMoneyMade\":600513590,\"onlineRunningTime\":7670.809999995763,\"pid\":9410,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":645.8100000000114,\"pid\":91030,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":645.8100000000114,\"pid\":91031,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":200}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":645.8100000000114,\"pid\":91032,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.81000000000001,\"pid\":91642,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.81000000000001,\"pid\":91643,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":120}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.81000000000001,\"pid\":91644,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.81000000000001,\"pid\":91645,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":23}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.81000000000001,\"pid\":91646,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":275}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.81000000000001,\"pid\":91647,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.81000000000001,\"pid\":91648,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.81000000000001,\"pid\":91649,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":141}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.81000000000001,\"pid\":91650,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.81000000000001,\"pid\":91651,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.81000000000001,\"pid\":91652,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":153}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.81000000000001,\"pid\":91653,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000001,\"pid\":91654,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000001,\"pid\":91655,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":150}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000001,\"pid\":91656,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000001,\"pid\":91657,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000001,\"pid\":91658,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":156}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000001,\"pid\":91659,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000001,\"pid\":91660,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":20}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000001,\"pid\":91661,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":242}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000001,\"pid\":91662,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000001,\"pid\":91663,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000001,\"pid\":91664,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":152}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000001,\"pid\":91665,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000001,\"pid\":91666,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000001,\"pid\":91667,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":114}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000001,\"pid\":91669,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000001,\"pid\":91670,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":173}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"moduleSequenceNumber\":1540}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"moduleSequenceNumber\":1541}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-15\",\"moduleSequenceNumber\":1542}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-15\",\"moduleSequenceNumber\":1543}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///b1c02cb7-44c3-4631-89cb-079753ff442e\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///b1c02cb7-44c3-4631-89cb-079753ff442e\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-15\",\"moduleSequenceNumber\":1824}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-16\",\"httpPortOpen\":false,\"ip\":\"17.2.0.7\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":3641.8999999999996,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",\"pserv-524288gb-16\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":218493.70305466108,\"onlineMoneyMade\":2591007739,\"onlineRunningTime\":7670.809999995763,\"pid\":9411,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-524288gb-16\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":561407.8352949132,\"onlineMoneyMade\":1917719006,\"onlineRunningTime\":7670.809999995763,\"pid\":9412,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\",\"pserv-524288gb-16\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":173323.25641923782,\"onlineMoneyMade\":654239734,\"onlineRunningTime\":7670.809999995763,\"pid\":9413,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-524288gb-16\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":299776.0424957512,\"onlineMoneyMade\":1021445379,\"onlineRunningTime\":7670.809999995763,\"pid\":9414,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-524288gb-16\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":317861.50867694465,\"onlineMoneyMade\":951464101,\"onlineRunningTime\":7670.809999995763,\"pid\":9415,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\",\"pserv-524288gb-16\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":331197.03335467563,\"onlineMoneyMade\":805464312,\"onlineRunningTime\":7670.809999995763,\"pid\":9416,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-524288gb-16\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":356452.69974867115,\"onlineMoneyMade\":1131991098,\"onlineRunningTime\":7670.809999995763,\"pid\":9417,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-524288gb-16\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":514992.6481374185,\"onlineMoneyMade\":661092620,\"onlineRunningTime\":7670.809999995763,\"pid\":9418,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-524288gb-16\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327884.96901239915,\"onlineMoneyMade\":1044393176,\"onlineRunningTime\":7670.809999995763,\"pid\":9419,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-524288gb-16\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":319578.7244914333,\"onlineMoneyMade\":1519720303,\"onlineRunningTime\":7670.809999995763,\"pid\":9420,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-524288gb-16\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":534089.2084736779,\"onlineMoneyMade\":596252793,\"onlineRunningTime\":7670.809999995763,\"pid\":9421,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":645.8100000000114,\"pid\":91033,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":645.8100000000114,\"pid\":91034,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":200}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":645.8100000000114,\"pid\":91035,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000001,\"pid\":91672,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000001,\"pid\":91673,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":120}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000001,\"pid\":91674,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000001,\"pid\":91675,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":23}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000001,\"pid\":91676,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":275}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000001,\"pid\":91677,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000001,\"pid\":91678,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000001,\"pid\":91679,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":141}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000001,\"pid\":91680,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.410000000000004,\"pid\":91681,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.410000000000004,\"pid\":91682,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":153}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.410000000000004,\"pid\":91683,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.410000000000004,\"pid\":91684,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.410000000000004,\"pid\":91685,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":150}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.410000000000004,\"pid\":91686,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.410000000000004,\"pid\":91687,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.410000000000004,\"pid\":91688,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":156}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.410000000000004,\"pid\":91689,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.410000000000004,\"pid\":91690,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":20}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.410000000000004,\"pid\":91691,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":242}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.410000000000004,\"pid\":91692,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.410000000000004,\"pid\":91693,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.410000000000004,\"pid\":91694,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":152}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.410000000000004,\"pid\":91695,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.410000000000004,\"pid\":91696,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.410000000000004,\"pid\":91697,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":114}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21,\"pid\":91699,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21,\"pid\":91700,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":173}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"moduleSequenceNumber\":1545}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"moduleSequenceNumber\":1546}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-16\",\"moduleSequenceNumber\":1547}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-16\",\"moduleSequenceNumber\":1548}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///1d441f28-d212-4782-a3ff-567e8fbe0cac\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///1d441f28-d212-4782-a3ff-567e8fbe0cac\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-16\",\"moduleSequenceNumber\":1835}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-17\",\"httpPortOpen\":false,\"ip\":\"9.9.7.8\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":3641.8999999999996,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",\"pserv-524288gb-17\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":218493.70305466108,\"onlineMoneyMade\":2577312295,\"onlineRunningTime\":7670.809999995763,\"pid\":9422,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-17\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-524288gb-17\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":561407.8352949132,\"onlineMoneyMade\":1906901995,\"onlineRunningTime\":7670.809999995763,\"pid\":9423,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-17\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\",\"pserv-524288gb-17\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":173276.4165156924,\"onlineMoneyMade\":613695961,\"onlineRunningTime\":7670.809999995763,\"pid\":9424,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-17\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-524288gb-17\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":299776.0424957512,\"onlineMoneyMade\":1015991933,\"onlineRunningTime\":7670.809999995763,\"pid\":9425,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-17\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-524288gb-17\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":317861.50867694465,\"onlineMoneyMade\":946305711,\"onlineRunningTime\":7670.809999995763,\"pid\":9426,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-17\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\",\"pserv-524288gb-17\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":331197.03335467563,\"onlineMoneyMade\":801431430,\"onlineRunningTime\":7670.809999995763,\"pid\":9427,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-17\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-524288gb-17\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":356452.69974867115,\"onlineMoneyMade\":1124914860,\"onlineRunningTime\":7670.809999995763,\"pid\":9428,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-17\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-524288gb-17\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":514931.4487734093,\"onlineMoneyMade\":629126128,\"onlineRunningTime\":7670.809999995763,\"pid\":9429,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-17\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-524288gb-17\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327884.96901239915,\"onlineMoneyMade\":1037909077,\"onlineRunningTime\":7670.809999995763,\"pid\":9430,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-17\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-524288gb-17\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":319578.7244914333,\"onlineMoneyMade\":1508917383,\"onlineRunningTime\":7670.809999995763,\"pid\":9431,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-17\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-524288gb-17\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":534089.2084736779,\"onlineMoneyMade\":591844790,\"onlineRunningTime\":7670.809999995763,\"pid\":9432,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-17\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":645.8100000000114,\"pid\":91036,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":645.8100000000114,\"pid\":91037,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":200}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":645.8100000000114,\"pid\":91038,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-17\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21,\"pid\":91702,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21,\"pid\":91703,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":120}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21,\"pid\":91704,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-17\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21,\"pid\":91705,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":23}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21,\"pid\":91706,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":275}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21,\"pid\":91707,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-17\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21,\"pid\":91708,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21,\"pid\":91709,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":141}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21,\"pid\":91710,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-17\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21,\"pid\":91711,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21,\"pid\":91712,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":153}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21,\"pid\":91713,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-17\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21,\"pid\":91714,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21,\"pid\":91715,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":150}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21,\"pid\":91716,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-17\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.01,\"pid\":91717,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.01,\"pid\":91718,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":156}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.01,\"pid\":91719,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-17\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.01,\"pid\":91720,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":20}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.01,\"pid\":91721,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":242}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.01,\"pid\":91722,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-17\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.01,\"pid\":91723,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.01,\"pid\":91724,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":152}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.01,\"pid\":91725,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-17\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.01,\"pid\":91726,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.01,\"pid\":91727,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":114}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.01,\"pid\":91729,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.01,\"pid\":91730,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":173}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"moduleSequenceNumber\":1550}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"moduleSequenceNumber\":1551}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-17\",\"moduleSequenceNumber\":1552}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-17\",\"moduleSequenceNumber\":1553}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///9cdb9f12-e98e-4ed3-b966-5661fdd4d79c\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///9cdb9f12-e98e-4ed3-b966-5661fdd4d79c\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-17\",\"moduleSequenceNumber\":1846}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-18\",\"httpPortOpen\":false,\"ip\":\"70.9.8.1\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":3641.8999999999996,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",\"pserv-524288gb-18\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":218493.70305466108,\"onlineMoneyMade\":2563689564,\"onlineRunningTime\":7670.809999995763,\"pid\":9433,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-524288gb-18\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":561407.8352949132,\"onlineMoneyMade\":1896146275,\"onlineRunningTime\":7670.809999995763,\"pid\":9434,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\",\"pserv-524288gb-18\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":173276.4165156924,\"onlineMoneyMade\":611594758,\"onlineRunningTime\":7670.809999995763,\"pid\":9435,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-524288gb-18\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":299776.0424957512,\"onlineMoneyMade\":1010567735,\"onlineRunningTime\":7670.809999995763,\"pid\":9436,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-524288gb-18\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":317805.5996404747,\"onlineMoneyMade\":905249078,\"onlineRunningTime\":7670.809999995763,\"pid\":9437,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\",\"pserv-524288gb-18\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":331197.03335467563,\"onlineMoneyMade\":797418842,\"onlineRunningTime\":7670.809999995763,\"pid\":9438,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-524288gb-18\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":356452.69974867115,\"onlineMoneyMade\":1117883035,\"onlineRunningTime\":7670.809999995763,\"pid\":9439,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-524288gb-18\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":515053.8475014277,\"onlineMoneyMade\":683014676,\"onlineRunningTime\":7670.809999995763,\"pid\":9440,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-524288gb-18\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327884.96901239915,\"onlineMoneyMade\":1033219091,\"onlineRunningTime\":7670.809999995763,\"pid\":9441,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-524288gb-18\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":319578.7244914333,\"onlineMoneyMade\":1498191516,\"onlineRunningTime\":7670.809999995763,\"pid\":9442,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-524288gb-18\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":534089.2084736779,\"onlineMoneyMade\":587645720,\"onlineRunningTime\":7670.809999995763,\"pid\":9443,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":645.8100000000114,\"pid\":91039,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":645.8100000000114,\"pid\":91040,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":200}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":645.8100000000114,\"pid\":91041,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.01,\"pid\":91732,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.01,\"pid\":91733,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":120}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.01,\"pid\":91734,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.01,\"pid\":91735,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":23}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.01,\"pid\":91736,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":275}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.01,\"pid\":91737,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.809999999999995,\"pid\":91738,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.809999999999995,\"pid\":91739,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":141}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.809999999999995,\"pid\":91740,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.809999999999995,\"pid\":91741,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.809999999999995,\"pid\":91742,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":153}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.809999999999995,\"pid\":91743,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.809999999999995,\"pid\":91744,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.809999999999995,\"pid\":91745,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":150}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.809999999999995,\"pid\":91746,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.809999999999995,\"pid\":91747,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.809999999999995,\"pid\":91748,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":156}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.809999999999995,\"pid\":91749,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.809999999999995,\"pid\":91750,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":20}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.809999999999995,\"pid\":91751,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":242}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.809999999999995,\"pid\":91752,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.60999999999999,\"pid\":91753,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.60999999999999,\"pid\":91754,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":152}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.60999999999999,\"pid\":91755,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.60999999999999,\"pid\":91756,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.60999999999999,\"pid\":91757,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":114}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.60999999999999,\"pid\":91759,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.60999999999999,\"pid\":91760,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":173}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"moduleSequenceNumber\":1555}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"moduleSequenceNumber\":1556}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-18\",\"moduleSequenceNumber\":1557}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-18\",\"moduleSequenceNumber\":1558}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///86e7376a-6df4-450c-bf4d-7f8483bbaff7\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///86e7376a-6df4-450c-bf4d-7f8483bbaff7\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-18\",\"moduleSequenceNumber\":1857}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-19\",\"httpPortOpen\":false,\"ip\":\"58.6.5.7\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":3641.8999999999996,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",\"pserv-524288gb-19\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":218493.70305466108,\"onlineMoneyMade\":2550139149,\"onlineRunningTime\":7670.809999995763,\"pid\":9444,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-524288gb-19\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":561407.8352949132,\"onlineMoneyMade\":1885451494,\"onlineRunningTime\":7670.809999995763,\"pid\":9445,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\",\"pserv-524288gb-19\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":173135.89680505614,\"onlineMoneyMade\":501682277,\"onlineRunningTime\":7670.809999995763,\"pid\":9446,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-524288gb-19\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":299776.0424957512,\"onlineMoneyMade\":1005172634,\"onlineRunningTime\":7670.809999995763,\"pid\":9447,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-524288gb-19\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":317805.5996404748,\"onlineMoneyMade\":900256875,\"onlineRunningTime\":7670.809999995763,\"pid\":9448,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\",\"pserv-524288gb-19\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":331197.03335467563,\"onlineMoneyMade\":793426438,\"onlineRunningTime\":7670.809999995763,\"pid\":9449,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-524288gb-19\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":356452.69974867115,\"onlineMoneyMade\":1133027190,\"onlineRunningTime\":7670.809999995763,\"pid\":9450,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-524288gb-19\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":514992.6481374185,\"onlineMoneyMade\":661849384,\"onlineRunningTime\":7670.809999995763,\"pid\":9451,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-524288gb-19\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327884.96901239915,\"onlineMoneyMade\":1027681889,\"onlineRunningTime\":7670.809999995763,\"pid\":9452,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-524288gb-19\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":319578.7244914333,\"onlineMoneyMade\":1487542135,\"onlineRunningTime\":7670.809999995763,\"pid\":9453,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-524288gb-19\",47656,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":534089.2084736779,\"onlineMoneyMade\":583476540,\"onlineRunningTime\":7670.809999995763,\"pid\":9454,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":645.8100000000114,\"pid\":91042,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":645.8100000000114,\"pid\":91043,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":200}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":645.8100000000114,\"pid\":91044,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.60999999999999,\"pid\":91762,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.60999999999999,\"pid\":91763,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":120}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.60999999999999,\"pid\":91764,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.60999999999999,\"pid\":91765,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":23}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.60999999999999,\"pid\":91766,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":275}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.60999999999999,\"pid\":91767,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.60999999999999,\"pid\":91768,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.60999999999999,\"pid\":91769,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":141}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.60999999999999,\"pid\":91770,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.60999999999999,\"pid\":91771,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.60999999999999,\"pid\":91772,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":153}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.60999999999999,\"pid\":91773,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.60999999999999,\"pid\":91774,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.60999999999999,\"pid\":91775,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":150}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.60999999999999,\"pid\":91776,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.40999999999999,\"pid\":91777,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.40999999999999,\"pid\":91778,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":156}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.40999999999999,\"pid\":91779,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.40999999999999,\"pid\":91780,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":20}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.40999999999999,\"pid\":91781,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":242}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.40999999999999,\"pid\":91782,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.40999999999999,\"pid\":91783,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.40999999999999,\"pid\":91784,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":152}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.40999999999999,\"pid\":91785,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.40999999999999,\"pid\":91786,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.40999999999999,\"pid\":91787,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":114}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.20999999999999,\"pid\":91789,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.20999999999999,\"pid\":91790,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":173}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"moduleSequenceNumber\":1560}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"moduleSequenceNumber\":1561}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-19\",\"moduleSequenceNumber\":1562}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-19\",\"moduleSequenceNumber\":1563}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///20f63a59-3b5b-407f-a55c-c67b846d0fce\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///20f63a59-3b5b-407f-a55c-c67b846d0fce\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-19\",\"moduleSequenceNumber\":1868}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-20\",\"httpPortOpen\":false,\"ip\":\"81.7.7.6\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":3576.6000000000004,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-524288gb-20\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":466763.6501437416,\"onlineMoneyMade\":1288283672,\"onlineRunningTime\":7670.809999995763,\"pid\":9455,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-20\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-524288gb-20\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":701548.8398450104,\"onlineMoneyMade\":812539221,\"onlineRunningTime\":7670.809999995763,\"pid\":9456,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-20\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-524288gb-20\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":688568.0110946803,\"onlineMoneyMade\":1426843933,\"onlineRunningTime\":7670.809999995763,\"pid\":9457,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-20\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-524288gb-20\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":582197.9941919044,\"onlineMoneyMade\":1373496549,\"onlineRunningTime\":7670.809999995763,\"pid\":9458,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-20\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-524288gb-20\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1280834.1981387702,\"onlineMoneyMade\":829640912,\"onlineRunningTime\":7670.809999995763,\"pid\":9459,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-20\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-524288gb-20\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":240479.56595439365,\"onlineMoneyMade\":251646004,\"onlineRunningTime\":7670.809999995763,\"pid\":9460,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-20\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-524288gb-20\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":612331.0197777011,\"onlineMoneyMade\":428058832,\"onlineRunningTime\":7670.809999995763,\"pid\":9461,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-20\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-524288gb-20\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":369484.8225233239,\"onlineMoneyMade\":104404280,\"onlineRunningTime\":7670.809999995763,\"pid\":9462,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-20\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-524288gb-20\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":596063.2495791521,\"onlineMoneyMade\":370146099,\"onlineRunningTime\":7670.809999995763,\"pid\":9463,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-20\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-524288gb-20\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28930.00880069068,\"onlineMoneyMade\":2397768,\"onlineRunningTime\":7670.809999995763,\"pid\":9464,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-20\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-524288gb-20\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":73535.92481819294,\"onlineMoneyMade\":9439132,\"onlineRunningTime\":7670.809999995763,\"pid\":9465,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-20\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-524288gb-20\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2324255.3845734377,\"onlineMoneyMade\":469482219,\"onlineRunningTime\":7670.809999995763,\"pid\":9466,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-20\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-524288gb-20\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1435611.910943936,\"onlineMoneyMade\":187020955,\"onlineRunningTime\":7670.809999995763,\"pid\":9467,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-20\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-524288gb-20\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3289734.188682774,\"onlineMoneyMade\":187423730,\"onlineRunningTime\":7670.809999995763,\"pid\":9468,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-20\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.20999999999999,\"pid\":91792,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-20\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.20999999999999,\"pid\":91793,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-20\",\"threads\":119}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.20999999999999,\"pid\":91795,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-20\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.20999999999999,\"pid\":91796,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-20\",\"threads\":200}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.20999999999999,\"pid\":91798,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-20\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.610000000000004,\"pid\":92093,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-20\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000003,\"pid\":92094,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-20\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000003,\"pid\":92095,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-20\",\"threads\":172}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[805167,1,0,0]},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18.11522154082053,\"onlineMoneyMade\":805167,\"onlineRunningTime\":6.410000000000003,\"pid\":92096,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-20\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.210000000000003,\"pid\":92097,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-20\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.210000000000003,\"pid\":92098,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-20\",\"threads\":138}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.0100000000000025,\"pid\":92100,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-20\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.0100000000000025,\"pid\":92101,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-20\",\"threads\":172}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000002,\"pid\":92103,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-20\",\"threads\":28}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000002,\"pid\":92104,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-20\",\"threads\":344}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000002,\"pid\":92106,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-20\",\"threads\":55}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000002,\"pid\":92107,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-20\",\"threads\":687}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-20\",\"moduleSequenceNumber\":1565}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-20\",\"moduleSequenceNumber\":1566}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-20\",\"moduleSequenceNumber\":1567}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-20\",\"moduleSequenceNumber\":1568}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///e3bf491b-0071-4490-846a-1fa09aa008a1\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///e3bf491b-0071-4490-846a-1fa09aa008a1\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-20\",\"moduleSequenceNumber\":1882}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-21\",\"httpPortOpen\":false,\"ip\":\"57.4.0.5\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":3578.3500000000004,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-524288gb-21\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":466763.6501437416,\"onlineMoneyMade\":1277295545,\"onlineRunningTime\":7670.809999995763,\"pid\":9469,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-21\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-524288gb-21\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":701548.8398450104,\"onlineMoneyMade\":806182199,\"onlineRunningTime\":7670.809999995763,\"pid\":9470,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-21\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-524288gb-21\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":688568.0110946803,\"onlineMoneyMade\":1413948969,\"onlineRunningTime\":7670.809999995763,\"pid\":9471,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-21\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-524288gb-21\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":577266.2712743114,\"onlineMoneyMade\":1349279815,\"onlineRunningTime\":7670.809999995763,\"pid\":9472,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-21\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-524288gb-21\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1280834.1981387702,\"onlineMoneyMade\":821744885,\"onlineRunningTime\":7670.809999995763,\"pid\":9473,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-21\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-524288gb-21\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":33585.62073668174,\"onlineMoneyMade\":30316048,\"onlineRunningTime\":7670.809999995763,\"pid\":9474,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-21\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-524288gb-21\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":612331.0197777011,\"onlineMoneyMade\":423789907,\"onlineRunningTime\":7670.809999995763,\"pid\":9475,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-21\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-524288gb-21\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":56609.60808994601,\"onlineMoneyMade\":13846164,\"onlineRunningTime\":7670.809999995763,\"pid\":9476,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-21\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-524288gb-21\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":307976.88141548756,\"onlineMoneyMade\":188235584,\"onlineRunningTime\":7670.809999995763,\"pid\":9477,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-21\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-524288gb-21\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":78130.95050555911,\"onlineMoneyMade\":3185799,\"onlineRunningTime\":7670.809999995763,\"pid\":9478,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-21\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-524288gb-21\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":96295.94185102929,\"onlineMoneyMade\":7220993,\"onlineRunningTime\":7670.809999995763,\"pid\":9479,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-21\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-524288gb-21\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2160022.7860843674,\"onlineMoneyMade\":431288376,\"onlineRunningTime\":7670.809999995763,\"pid\":9480,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-21\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-524288gb-21\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1030361.4339105904,\"onlineMoneyMade\":134381847,\"onlineRunningTime\":7670.809999995763,\"pid\":9481,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-21\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-524288gb-21\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3428165.3455035207,\"onlineMoneyMade\":197156530,\"onlineRunningTime\":7670.809999995763,\"pid\":9482,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-21\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.009999999999984,\"pid\":91827,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-21\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.009999999999984,\"pid\":91828,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-21\",\"threads\":119}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.80999999999998,\"pid\":91830,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-21\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.80999999999998,\"pid\":91831,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-21\",\"threads\":200}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.80999999999998,\"pid\":91833,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-21\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000002,\"pid\":92109,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-21\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000002,\"pid\":92110,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-21\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000002,\"pid\":92111,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-21\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000002,\"pid\":92112,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-21\",\"threads\":172}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[796506,1,0,0]},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18.11522154082053,\"onlineMoneyMade\":796506,\"onlineRunningTime\":5.210000000000002,\"pid\":92113,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-21\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.010000000000002,\"pid\":92114,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-21\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.010000000000002,\"pid\":92115,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-21\",\"threads\":138}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":92117,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-21\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":92118,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-21\",\"threads\":172}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":92120,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-21\",\"threads\":28}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":92121,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-21\",\"threads\":344}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":92123,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-21\",\"threads\":55}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":92124,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-21\",\"threads\":687}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-21\",\"moduleSequenceNumber\":1570}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-21\",\"moduleSequenceNumber\":1571}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-21\",\"moduleSequenceNumber\":1572}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-21\",\"moduleSequenceNumber\":1573}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///64ea25c9-50a0-4268-83af-d91fa962b150\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///64ea25c9-50a0-4268-83af-d91fa962b150\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-21\",\"moduleSequenceNumber\":1896}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-22\",\"httpPortOpen\":false,\"ip\":\"35.4.9.5\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2988.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-524288gb-22\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":466763.6501437416,\"onlineMoneyMade\":1266398844,\"onlineRunningTime\":7670.809999995763,\"pid\":9483,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-22\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-524288gb-22\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":701548.8398450104,\"onlineMoneyMade\":799875057,\"onlineRunningTime\":7670.809999995763,\"pid\":9484,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-22\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-524288gb-22\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":688568.0110946803,\"onlineMoneyMade\":1401170807,\"onlineRunningTime\":7670.809999995763,\"pid\":9485,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-22\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-524288gb-22\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":574811.9866298753,\"onlineMoneyMade\":1330295488,\"onlineRunningTime\":7670.809999995763,\"pid\":9486,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-22\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-524288gb-22\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1280834.1981387702,\"onlineMoneyMade\":813923762,\"onlineRunningTime\":7670.809999995763,\"pid\":9487,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-22\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-524288gb-22\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38259.34789421342,\"onlineMoneyMade\":32560055,\"onlineRunningTime\":7670.809999995763,\"pid\":9488,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-22\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-524288gb-22\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":250514.43101955167,\"onlineMoneyMade\":169635410,\"onlineRunningTime\":7670.809999995763,\"pid\":9489,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-22\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-524288gb-22\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":57201.64084387472,\"onlineMoneyMade\":12508438,\"onlineRunningTime\":7670.809999995763,\"pid\":9490,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-22\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-524288gb-22\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16521.082045228188,\"onlineMoneyMade\":6241689,\"onlineRunningTime\":7670.809999995763,\"pid\":9491,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-22\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-524288gb-22\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":70142.13780605707,\"onlineMoneyMade\":3151570,\"onlineRunningTime\":7670.809999995763,\"pid\":9492,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-22\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-524288gb-22\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2412608.11273803,\"onlineMoneyMade\":503006639,\"onlineRunningTime\":7670.809999995763,\"pid\":9493,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-22\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-524288gb-22\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":75775.97170525436,\"onlineMoneyMade\":10095077,\"onlineRunningTime\":7670.809999995763,\"pid\":9494,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-22\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-524288gb-22\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":859826.6978346983,\"onlineMoneyMade\":110459898,\"onlineRunningTime\":7670.809999995763,\"pid\":9495,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-22\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-524288gb-22\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":871386.6017294222,\"onlineMoneyMade\":48678547,\"onlineRunningTime\":7670.809999995763,\"pid\":9496,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-22\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.60999999999998,\"pid\":91863,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-22\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.60999999999998,\"pid\":91864,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-22\",\"threads\":119}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.409999999999975,\"pid\":91866,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-22\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.409999999999975,\"pid\":91867,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-22\",\"threads\":200}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.409999999999975,\"pid\":91869,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-22\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":92126,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-22\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.010000000000002,\"pid\":92127,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-22\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.8100000000000014,\"pid\":92128,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-22\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.8100000000000014,\"pid\":92129,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-22\",\"threads\":172}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.6100000000000017,\"pid\":92131,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-22\",\"threads\":28}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.6100000000000017,\"pid\":92132,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-22\",\"threads\":344}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.410000000000001,\"pid\":92134,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-22\",\"threads\":55}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.410000000000001,\"pid\":92135,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-22\",\"threads\":687}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-22\",\"moduleSequenceNumber\":1575}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-22\",\"moduleSequenceNumber\":1576}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-22\",\"moduleSequenceNumber\":1577}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-22\",\"moduleSequenceNumber\":1578}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///0bd6eeef-0a5b-42f6-a2da-5e0c725d1378\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///0bd6eeef-0a5b-42f6-a2da-5e0c725d1378\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-22\",\"moduleSequenceNumber\":1910}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-23\",\"httpPortOpen\":false,\"ip\":\"82.4.4.2\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":3599.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-524288gb-23\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":466364.8617824537,\"onlineMoneyMade\":1243664821,\"onlineRunningTime\":7670.809999995763,\"pid\":9497,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-23\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-524288gb-23\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":691668.5086164935,\"onlineMoneyMade\":782974962,\"onlineRunningTime\":7670.809999995763,\"pid\":9498,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-23\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-524288gb-23\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":684081.9012786588,\"onlineMoneyMade\":1379161102,\"onlineRunningTime\":7670.809999995763,\"pid\":9499,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-23\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-524288gb-23\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":152675.0277868963,\"onlineMoneyMade\":343543261,\"onlineRunningTime\":7670.809999995763,\"pid\":9500,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-23\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-524288gb-23\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1157682.1760782078,\"onlineMoneyMade\":728803805,\"onlineRunningTime\":7670.809999995763,\"pid\":9501,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-23\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-524288gb-23\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":767052.8257029527,\"onlineMoneyMade\":858844904,\"onlineRunningTime\":7670.809999995763,\"pid\":9502,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-23\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-524288gb-23\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":103718.50008113254,\"onlineMoneyMade\":68893925,\"onlineRunningTime\":7670.809999995763,\"pid\":9503,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-23\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-524288gb-23\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1434861.8592359938,\"onlineMoneyMade\":429426393,\"onlineRunningTime\":7670.809999995763,\"pid\":9504,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-23\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-524288gb-23\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11466.935235339273,\"onlineMoneyMade\":3088038,\"onlineRunningTime\":7670.809999995763,\"pid\":9505,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-23\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-524288gb-23\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2317444.0612740885,\"onlineMoneyMade\":550529141,\"onlineRunningTime\":7670.809999995763,\"pid\":9506,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-23\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-524288gb-23\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2388319.9562096028,\"onlineMoneyMade\":494186159,\"onlineRunningTime\":7670.809999995763,\"pid\":9507,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-23\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-524288gb-23\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":45487.32128900129,\"onlineMoneyMade\":6723441,\"onlineRunningTime\":7670.809999995763,\"pid\":9508,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-23\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-524288gb-23\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":477369.10823177116,\"onlineMoneyMade\":61838518,\"onlineRunningTime\":7670.809999995763,\"pid\":9509,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-23\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-524288gb-23\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":371224.6060672091,\"onlineMoneyMade\":21175027,\"onlineRunningTime\":7670.809999995763,\"pid\":9510,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-23\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":645.8100000000114,\"pid\":90985,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-23\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":645.8100000000114,\"pid\":90988,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-23\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":645.8100000000114,\"pid\":90989,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-23\",\"threads\":200}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.609999999999983,\"pid\":92054,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-23\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.609999999999983,\"pid\":92055,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-23\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999984,\"pid\":92058,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-23\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999984,\"pid\":92059,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-23\",\"threads\":86}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999984,\"pid\":92061,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-23\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"pid\":92137,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-23\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"pid\":92138,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-23\",\"threads\":134}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"pid\":92139,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-23\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.0100000000000007,\"pid\":92140,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-23\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.0100000000000007,\"pid\":92141,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-23\",\"threads\":201}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.0100000000000007,\"pid\":92142,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-23\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":92143,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-23\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":92144,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-23\",\"threads\":172}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":92146,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-23\",\"threads\":28}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":92147,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-23\",\"threads\":344}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":92149,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-23\",\"threads\":55}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":92150,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-23\",\"threads\":687}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-23\",\"moduleSequenceNumber\":1580}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-23\",\"moduleSequenceNumber\":1581}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-23\",\"moduleSequenceNumber\":1582}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-23\",\"moduleSequenceNumber\":1583}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///582eec74-c18f-499c-9964-6a892036acdb\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///582eec74-c18f-499c-9964-6a892036acdb\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-23\",\"moduleSequenceNumber\":1924}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-24\",\"httpPortOpen\":false,\"ip\":\"47.7.4.0\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":3424.3500000000004,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-524288gb-24\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":466763.6501437416,\"onlineMoneyMade\":1299479606,\"onlineRunningTime\":7670.809999995763,\"pid\":9511,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-24\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-524288gb-24\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":691668.5086164935,\"onlineMoneyMade\":776852763,\"onlineRunningTime\":7670.809999995763,\"pid\":9512,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-24\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-524288gb-24\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":684081.9012786588,\"onlineMoneyMade\":1366699396,\"onlineRunningTime\":7670.809999995763,\"pid\":9513,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-24\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-524288gb-24\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20143.656987351973,\"onlineMoneyMade\":34030923,\"onlineRunningTime\":7670.809999995763,\"pid\":9514,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-24\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-524288gb-24\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":331839.2046132676,\"onlineMoneyMade\":205734537,\"onlineRunningTime\":7670.809999995763,\"pid\":9515,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-24\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-524288gb-24\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":769317.2283955552,\"onlineMoneyMade\":854093530,\"onlineRunningTime\":7670.809999995763,\"pid\":9516,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-24\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-524288gb-24\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14575.282561007012,\"onlineMoneyMade\":7280590,\"onlineRunningTime\":7670.809999995763,\"pid\":9517,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-24\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-524288gb-24\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1439090.6646211988,\"onlineMoneyMade\":428857531,\"onlineRunningTime\":7670.809999995763,\"pid\":9518,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-24\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-524288gb-24\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8097.504028746736,\"onlineMoneyMade\":1018937,\"onlineRunningTime\":7670.809999995763,\"pid\":9519,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-24\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-524288gb-24\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2327552.354893866,\"onlineMoneyMade\":548613797,\"onlineRunningTime\":7670.809999995763,\"pid\":9520,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-24\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-524288gb-24\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1912651.8077634596,\"onlineMoneyMade\":392029243,\"onlineRunningTime\":7670.809999995763,\"pid\":9521,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-24\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-524288gb-24\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":27227.177975853698,\"onlineMoneyMade\":3328229,\"onlineRunningTime\":7670.809999995763,\"pid\":9522,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-24\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-524288gb-24\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":633846.2688700778,\"onlineMoneyMade\":82490947,\"onlineRunningTime\":7670.809999995763,\"pid\":9523,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-24\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-524288gb-24\",37443,\"All\"],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2824631.1323212013,\"onlineMoneyMade\":162529141,\"onlineRunningTime\":7670.809999995763,\"pid\":9524,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-24\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":645.8100000000114,\"pid\":91005,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-24\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":645.8100000000114,\"pid\":91006,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-24\",\"threads\":200}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.41000000000009,\"pid\":91082,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-24\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.41000000000009,\"pid\":91083,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-24\",\"threads\":119}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999984,\"pid\":92070,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-24\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.209999999999985,\"pid\":92073,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-24\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.209999999999985,\"pid\":92074,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-24\",\"threads\":86}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.209999999999985,\"pid\":92076,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-24\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":92152,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-24\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":92153,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-24\",\"threads\":134}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":92154,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-24\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":92155,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-24\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":92156,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-24\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":92157,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-24\",\"threads\":172}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":92159,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-24\",\"threads\":28}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":92160,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-24\",\"threads\":344}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":92162,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-24\",\"threads\":55}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":92163,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-24\",\"threads\":687}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-24\",\"moduleSequenceNumber\":1585}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-24\",\"moduleSequenceNumber\":1586}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-24\",\"moduleSequenceNumber\":1587}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-24\",\"moduleSequenceNumber\":1588}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///0beecb11-f1b5-4766-83fe-d9af068b753a\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///0beecb11-f1b5-4766-83fe-d9af068b753a\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-24\",\"moduleSequenceNumber\":1938}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":21,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":30,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":7,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":8,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":1.7624522929571935}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":117.4131,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":67463.70530886193}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":129.2131,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":71249.47361991665}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":26.5847,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":89.8264,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":118.478,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":6.2122,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":110.675,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":65451.59228765417}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{\"c\":\"clear\",\"ch\":\"connect home\"}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":8337.907182027087,\"lastPrice\":8336.489440102605,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":7.401349808475825,\"otlkMagForecast\":65.68491525629759,\"cap\":361421867,\"spreadPerc\":0.3,\"shareTxForMovement\":57023,\"shareTxUntilMovement\":57023,\"totalShares\":108400000,\"maxShares\":21700000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":26946.57654179492,\"lastPrice\":26950.334322462484,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.41,\"b\":false,\"otlkMag\":7.915838850504502,\"otlkMagForecast\":31.769827615925582,\"cap\":502495213,\"spreadPerc\":0.2,\"shareTxForMovement\":79237,\"shareTxUntilMovement\":17149,\"totalShares\":71500000,\"maxShares\":14300000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":17046.411158236955,\"lastPrice\":17050.469746292336,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":6.3927667011495455,\"otlkMagForecast\":64.31035291910622,\"cap\":97671643,\"spreadPerc\":0.5,\"shareTxForMovement\":30401,\"shareTxUntilMovement\":12627,\"totalShares\":113100000,\"maxShares\":22600000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":10511.56976151479,\"lastPrice\":10508.888976169537,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":5.513447260669403,\"otlkMagForecast\":57.808021028878194,\"cap\":245369595,\"spreadPerc\":0.4,\"shareTxForMovement\":32739,\"shareTxUntilMovement\":14883,\"totalShares\":131700000,\"maxShares\":26300000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":12120.618526626771,\"lastPrice\":12123.133298483002,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":6.445094153717725,\"otlkMagForecast\":62.93449835967481,\"cap\":424022303,\"spreadPerc\":0.1,\"shareTxForMovement\":36005,\"shareTxUntilMovement\":36005,\"totalShares\":50700000,\"maxShares\":10100000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":9153.253247193485,\"lastPrice\":9149.892129631598,\"playerShares\":6300000,\"playerAvgPx\":8598.546320031317,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.08,\"b\":true,\"otlkMag\":14.64956308818258,\"otlkMagForecast\":68.27034455790368,\"cap\":455358837,\"spreadPerc\":0.3,\"shareTxForMovement\":45550,\"shareTxUntilMovement\":3252,\"totalShares\":31300000,\"maxShares\":6300000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":11668.782229549739,\"lastPrice\":11665.528643852367,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.82,\"b\":false,\"otlkMag\":7.388360716667891,\"otlkMagForecast\":39.42090550506432,\"cap\":398283088,\"spreadPerc\":0.2,\"shareTxForMovement\":55659,\"shareTxUntilMovement\":26380,\"totalShares\":77400000,\"maxShares\":15500000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":16156.524558065277,\"lastPrice\":16149.60343803551,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.26,\"b\":true,\"otlkMag\":6.2807271962169935,\"otlkMagForecast\":63.48823113251077,\"cap\":252263777,\"spreadPerc\":0.3,\"shareTxForMovement\":81175,\"shareTxUntilMovement\":52182,\"totalShares\":61600000,\"maxShares\":12300000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":25015.46550478932,\"lastPrice\":25022.867892276623,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.87,\"b\":true,\"otlkMag\":7.35749970243381,\"otlkMagForecast\":57.16287439351994,\"cap\":367983633,\"spreadPerc\":0.8,\"shareTxForMovement\":96045,\"shareTxUntilMovement\":37724,\"totalShares\":57100000,\"maxShares\":11400000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":25314.877558671837,\"lastPrice\":25320.73258318076,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":true,\"otlkMag\":6.362178209007038,\"otlkMagForecast\":63.00492595685605,\"cap\":118423015,\"spreadPerc\":1,\"shareTxForMovement\":59970,\"shareTxUntilMovement\":47700,\"totalShares\":64800000,\"maxShares\":13000000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":6299.090354734497,\"lastPrice\":6300.44013278294,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":false,\"otlkMag\":6.248133473205192,\"otlkMagForecast\":42.29596045612916,\"cap\":252064047,\"spreadPerc\":0.4,\"shareTxForMovement\":95400,\"shareTxUntilMovement\":63732,\"totalShares\":63900000,\"maxShares\":12800000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":16168.168563695248,\"lastPrice\":16172.238021235828,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":5.873661971563406,\"otlkMagForecast\":54.87706497440409,\"cap\":202718021,\"spreadPerc\":0.3,\"shareTxForMovement\":48680,\"shareTxUntilMovement\":48680,\"totalShares\":104800000,\"maxShares\":21000000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":22186.689375787875,\"lastPrice\":22181.709907964956,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":true,\"otlkMag\":6.817999865604904,\"otlkMagForecast\":57.508264880481654,\"cap\":349678855,\"spreadPerc\":0.9,\"shareTxForMovement\":79299,\"shareTxUntilMovement\":37723,\"totalShares\":41000000,\"maxShares\":8200000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":20530.812008373865,\"lastPrice\":20527.181423132883,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.52,\"b\":false,\"otlkMag\":7.233279692742668,\"otlkMagForecast\":39.46351251183551,\"cap\":167536218,\"spreadPerc\":0.5,\"shareTxForMovement\":64694,\"shareTxUntilMovement\":34072,\"totalShares\":34300000,\"maxShares\":6900000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":23516.244604187494,\"lastPrice\":23521.04374168362,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":4.984801695813723,\"otlkMagForecast\":54.25675828120169,\"cap\":222065407,\"spreadPerc\":1,\"shareTxForMovement\":89738,\"shareTxUntilMovement\":89738,\"totalShares\":43500000,\"maxShares\":8700000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":6123.871553264315,\"lastPrice\":6125.392075958578,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":false,\"otlkMag\":7.205770722451657,\"otlkMagForecast\":42.98266029621782,\"cap\":215057667,\"spreadPerc\":0.8,\"shareTxForMovement\":81639,\"shareTxUntilMovement\":48974,\"totalShares\":68600000,\"maxShares\":13700000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":43039.45481499517,\"lastPrice\":43051.165996769996,\"playerShares\":6000000,\"playerAvgPx\":41053.5846036532,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":7.70749227541178,\"otlkMagForecast\":58.00636197797778,\"cap\":326363814,\"spreadPerc\":1,\"shareTxForMovement\":112215,\"shareTxUntilMovement\":82158,\"totalShares\":30000000,\"maxShares\":6000000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":40759.110649268085,\"lastPrice\":40750.37860013041,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":false,\"otlkMag\":6.224669887358234,\"otlkMagForecast\":45.78197854088909,\"cap\":157206029,\"spreadPerc\":0.8,\"shareTxForMovement\":119820,\"shareTxUntilMovement\":71916,\"totalShares\":39900000,\"maxShares\":8000000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":14256.244486980973,\"lastPrice\":14252.560225457199,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":7.7424180509102785,\"otlkMagForecast\":56.917109853290654,\"cap\":118881583,\"spreadPerc\":0.5,\"shareTxForMovement\":50898,\"shareTxUntilMovement\":50898,\"totalShares\":33500000,\"maxShares\":6700000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":1104.4618994032655,\"lastPrice\":1105.4123186735283,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.53,\"b\":true,\"otlkMag\":2.2222056638793015,\"otlkMagForecast\":52.61490267525048,\"cap\":117303840,\"spreadPerc\":1.1,\"shareTxForMovement\":31320,\"shareTxUntilMovement\":9860,\"totalShares\":53100000,\"maxShares\":10600000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":13883.059134292847,\"lastPrice\":13877.347823189864,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.21,\"b\":false,\"otlkMag\":6.514446243742743,\"otlkMagForecast\":47.53190437529069,\"cap\":107832536,\"spreadPerc\":1.2,\"shareTxForMovement\":42216,\"shareTxUntilMovement\":42216,\"totalShares\":41400000,\"maxShares\":8300000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":5771.541209913482,\"lastPrice\":5772.620898384397,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":true,\"otlkMag\":5.046234287076927,\"otlkMagForecast\":55.17021699266883,\"cap\":84361535,\"spreadPerc\":0.4,\"shareTxForMovement\":123986,\"shareTxUntilMovement\":114830,\"totalShares\":44100000,\"maxShares\":8800000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":799.4842964479161,\"lastPrice\":799.971047548508,\"playerShares\":11500000,\"playerAvgPx\":843.5549831028378,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.79,\"b\":true,\"otlkMag\":7.449099829345394,\"otlkMagForecast\":63.74818711482483,\"cap\":77774754,\"spreadPerc\":1.5,\"shareTxForMovement\":85534,\"shareTxUntilMovement\":3698,\"totalShares\":57600000,\"maxShares\":11500000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":5882.791709629268,\"lastPrice\":5879.591995742559,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.6,\"b\":true,\"otlkMag\":5.7896460841854225,\"otlkMagForecast\":53.39446752185589,\"cap\":148999474,\"spreadPerc\":0.5,\"shareTxForMovement\":43527,\"shareTxUntilMovement\":43527,\"totalShares\":33300000,\"maxShares\":6700000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":1844.4804157117117,\"lastPrice\":1843.8532672942824,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1,\"b\":true,\"otlkMag\":7.519154451577713,\"otlkMagForecast\":60.40597846521785,\"cap\":23132305,\"spreadPerc\":1.1,\"shareTxForMovement\":67386,\"shareTxUntilMovement\":67386,\"totalShares\":79300000,\"maxShares\":15900000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":6614.796251252111,\"lastPrice\":6621.433413909688,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.95,\"b\":true,\"otlkMag\":5.443578339642316,\"otlkMagForecast\":52.02633106687866,\"cap\":37988828,\"spreadPerc\":2,\"shareTxForMovement\":22247,\"shareTxUntilMovement\":22247,\"totalShares\":19500000,\"maxShares\":3900000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":8488.385444221041,\"lastPrice\":8485.55698186341,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.98,\"b\":true,\"otlkMag\":1.5095405578010965,\"otlkMagForecast\":50.495270770798705,\"cap\":39204927,\"spreadPerc\":1.2,\"shareTxForMovement\":85612,\"shareTxUntilMovement\":85612,\"totalShares\":15800000,\"maxShares\":3200000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":864.1774485309676,\"lastPrice\":864.4067155081686,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":false,\"otlkMag\":5.903088628306531,\"otlkMagForecast\":45.00775759225166,\"cap\":48187713,\"spreadPerc\":0.6,\"shareTxForMovement\":146219,\"shareTxUntilMovement\":146219,\"totalShares\":14000000,\"maxShares\":2800000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":11027.892760667617,\"lastPrice\":11033.144033022718,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.4,\"b\":false,\"otlkMag\":5.8000762146440215,\"otlkMagForecast\":44.84245375906502,\"cap\":63646998,\"spreadPerc\":0.7,\"shareTxForMovement\":48105,\"shareTxUntilMovement\":48105,\"totalShares\":9200000,\"maxShares\":1800000}},\"Joes Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joes Guns\",\"symbol\":\"JGN\",\"price\":511.20031410835946,\"lastPrice\":510.72607796050835,\"playerShares\":10900000,\"playerAvgPx\":497.9579414685427,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.73,\"b\":true,\"otlkMag\":10.489400510116912,\"otlkMagForecast\":57.95148279391096,\"cap\":5554978,\"spreadPerc\":1.1,\"shareTxForMovement\":45660,\"shareTxUntilMovement\":10790,\"totalShares\":54300000,\"maxShares\":10900000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":600.0708173770371,\"lastPrice\":600.3402315330239,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.32,\"b\":false,\"otlkMag\":7.033944244637005,\"otlkMagForecast\":37.865265107301454,\"cap\":8685116,\"spreadPerc\":0.9,\"shareTxForMovement\":45552,\"shareTxUntilMovement\":9634,\"totalShares\":96700000,\"maxShares\":19300000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":71375.87552377819,\"lastPrice\":71357.42975482704,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":false,\"otlkMag\":6.908484541521201,\"otlkMagForecast\":42.20781942724659,\"cap\":517518626,\"spreadPerc\":0.5,\"shareTxForMovement\":157673,\"shareTxUntilMovement\":129905,\"totalShares\":13300000,\"maxShares\":2700000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":38717.33053247889,\"lastPrice\":38709.95735490684,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":false,\"otlkMag\":7.671809987531982,\"otlkMagForecast\":40.33438448151923,\"cap\":37224091,\"spreadPerc\":0.3,\"shareTxForMovement\":144679,\"shareTxUntilMovement\":15675,\"totalShares\":21800000,\"maxShares\":4400000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":238111,\"lastUpdate\":1640312026027,\"ticksUntilCycle\":41}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":200,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"}}","VersionSave":"7","AllGangsSave":"","LastExportBonus":"1639969157036","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}
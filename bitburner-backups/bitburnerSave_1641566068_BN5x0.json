{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":451,\"hp\":30,\"max_hp\":30,\"strength\":209,\"defense\":205,\"dexterity\":205,\"agility\":205,\"charisma\":203,\"intelligence\":18,\"hacking_chance_mult\":1.16,\"hacking_speed_mult\":1.16,\"hacking_money_mult\":1.16,\"hacking_grow_mult\":1.16,\"hacking_exp\":98508852.58006082,\"strength_exp\":144196.6141598262,\"defense_exp\":132127.97415792727,\"dexterity_exp\":132139.57415792908,\"agility_exp\":132139.57415792908,\"charisma_exp\":122832.56703811527,\"intelligence_exp\":378.71999999999997,\"hacking_mult\":1.16,\"strength_mult\":1.16,\"defense_mult\":1.16,\"dexterity_mult\":1.16,\"agility_mult\":1.16,\"charisma_mult\":1.16,\"hacking_exp_mult\":1.16,\"strength_exp_mult\":1.16,\"defense_exp_mult\":1.16,\"dexterity_exp_mult\":1.16,\"agility_exp_mult\":1.16,\"charisma_exp_mult\":1.16,\"company_rep_mult\":1.16,\"faction_rep_mult\":1.16,\"money\":365961392133.2846,\"city\":\"Sector-12\",\"location\":\"Blade Industries\",\"jobs\":{\"MegaCorp\":\"Software Engineering Intern\",\"Carmichael Security\":\"Security Guard\",\"Four Sigma\":\"IT Intern\",\"National Security Agency\":\"IT Intern\"},\"companyName\":\"National Security Agency\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-4096gb-0\",\"pserv-4096gb-1\",\"pserv-4096gb-2\",\"pserv-4096gb-3\",\"pserv-4096gb-4\",\"pserv-4096gb-5\",\"pserv-4096gb-6\",\"pserv-4096gb-7\",\"pserv-4096gb-8\",\"pserv-4096gb-9\",\"pserv-4096gb-10\",\"pserv-4096gb-0-0\",\"pserv-4096gb-1-0\",\"pserv-4096gb-2-0\",\"pserv-4096gb-3-0\",\"pserv-4096gb-4-0\",\"pserv-4096gb-5-0\",\"pserv-4096gb-6-0\",\"pserv-4096gb-7-0\",\"pserv-4096gb-8-0\",\"pserv-4096gb-9-0\",\"pserv-4096gb-10-0\",\"pserv-4096gb-11\",\"pserv-4096gb-12\",\"pserv-4096gb-13\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":581331.5999991191,\"ram\":64,\"totalMoneyGenerated\":958320255.7011286,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":571267.8000021977,\"ram\":64,\"totalMoneyGenerated\":919932948.0923531,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":568177.8000030832,\"ram\":64,\"totalMoneyGenerated\":918330430.212447,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":563438.2000044477,\"ram\":64,\"totalMoneyGenerated\":918116210.0749531,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":556988.6000063121,\"ram\":64,\"totalMoneyGenerated\":916633111.6988956,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":556588.4000064081,\"ram\":64,\"totalMoneyGenerated\":913922769.6328459,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":556028.0000065278,\"ram\":64,\"totalMoneyGenerated\":912518376.740296,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":552031.4000074163,\"ram\":64,\"totalMoneyGenerated\":912296649.2342341,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":550434.2000078753,\"ram\":64,\"totalMoneyGenerated\":912125330.0924292,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":546999.0000088646,\"ram\":64,\"totalMoneyGenerated\":909510143.8429229,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":512891.0000136981,\"ram\":64,\"totalMoneyGenerated\":906816891.6759818,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":496550.20001344994,\"ram\":64,\"totalMoneyGenerated\":904995182.590361,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":477999.200013385,\"ram\":64,\"totalMoneyGenerated\":900341583.3928252,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":469001.8000132282,\"ram\":64,\"totalMoneyGenerated\":897437168.2322239,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":413111.200011854,\"ram\":64,\"totalMoneyGenerated\":866427588.8608068,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":402908.6000119005,\"ram\":64,\"totalMoneyGenerated\":853213465.4757695,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":401817.8000118965,\"ram\":64,\"totalMoneyGenerated\":851566774.2013474,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":395882.00001187494,\"ram\":64,\"totalMoneyGenerated\":841478046.8758069,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":394585.8000118702,\"ram\":64,\"totalMoneyGenerated\":839131145.5338521,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":393039.0000118646,\"ram\":64,\"totalMoneyGenerated\":836126872.6982988,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":390940.20001185697,\"ram\":64,\"totalMoneyGenerated\":831818434.8015206,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":389662.6000118522,\"ram\":64,\"totalMoneyGenerated\":829100029.403071,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":2127.743737340102,\"onlineTimeSeconds\":387572.6000117298,\"ram\":64,\"totalMoneyGenerated\":824653044.9926455,\"name\":\"hacknet-node-22\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"CyberSec\",\"Netburners\",\"Sector-12\",\"NiteSec\",\"The Black Hand\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Wired Reflexes\"}],\"augmentations\":[],\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"numPeopleKilled\":1,\"karma\":-3.5,\"crime_money_mult\":1.16,\"crime_success_mult\":1.16,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":20,\"workExpMult\":10,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":250,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.16,\"hacknet_node_money_mult\":1.16,\"hacknet_node_purchase_cost_mult\":0.84,\"hacknet_node_ram_cost_mult\":0.84,\"hacknet_node_core_cost_mult\":0.84,\"hacknet_node_level_cost_mult\":0.84,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":5,\"lastUpdate\":1641566067526,\"totalPlaytime\":2030160600,\"playtimeSinceLastAug\":581531600,\"playtimeSinceLastBitnode\":581531600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-2496960,\"codingcontract\":0,\"corporation\":0,\"crime\":95700,\"gang\":0,\"hacking\":88227957744.6606,\"hacknet\":20374812467.36979,\"hacknet_expenses\":-9285075499.017134,\"hospitalization\":-12951000,\"infiltration\":0,\"sleeves\":0,\"stock\":38367267761255.78,\"total\":365961391133.2846,\"work\":2573281.3600000422,\"servers\":-970343406430.7844,\"other\":-5280200000,\"augmentations\":-37124987669389.32}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-2496960,\"codingcontract\":0,\"corporation\":0,\"crime\":95700,\"gang\":0,\"hacking\":88227957744.6606,\"hacknet\":20374812467.36979,\"hacknet_expenses\":-9285075499.017134,\"hospitalization\":-12951000,\"infiltration\":0,\"sleeves\":0,\"stock\":38367267761255.78,\"total\":365961391133.2846,\"work\":2573281.3600000422,\"servers\":-970343406430.7844,\"other\":-5280200000,\"augmentations\":-37124987669389.32}},\"scriptProdSinceLastAug\":37555496228106.016,\"exploits\":[],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":4,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"95.5.4.6\",\"isConnectedTo\":true,\"maxRam\":32768,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"BruteSSH.exe\",\"AutoLink.exe\",\"DeepscanV1.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"Formulas.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\ttarget = target || 'foodnstuff';\\n\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.45;\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(target);\\n\\t}\\n\\t\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(target);\\n\\t}\\n\\n\\tns.nuke(target);\\n\\n\\tlet moneyThreshOverride = 0;\\n\\tlet securityThreshOverride = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (!securityThreshOverride && ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tsecurityThreshOverride = 4;\\n\\t\\t} else if (!moneyThreshOverride && ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tlet percentGrowth = await ns.grow(target);\\n\\t\\t\\tif (percentGrowth < 1) {\\n\\t\\t\\t\\tmoneyThreshOverride = 10;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tmoneyThreshOverride = 4;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t\\tif (securityThreshOverride) {\\n\\t\\t\\tsecurityThreshOverride--\\n\\t\\t}\\n\\n\\t\\tif (moneyThreshOverride) {\\n\\t\\t\\tmoneyThreshOverride--\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///a7cf0364-c8b1-4d05-a53e-1ee1dd627301\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///a7cf0364-c8b1-4d05-a53e-1ee1dd627301\"}],\"ramUsage\":2.65,\"server\":\"home\",\"moduleSequenceNumber\":204}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let pserv = false;\\n    let targetLimit = 0;\\n    if (ns.args.length) {\\n        [pserv, targetLimit] = ns.args;\\n    }\\n\\n    let purchased = ns.getPurchasedServers();\\n\\n    function __readNodes__(fPath) {\\n        let nodes = ns.read(fPath);\\n        nodes = nodes.split(',');\\n        return nodes;\\n    }\\n\\n    async function __scanAndWriteAllNodes__() {\\n        let nodes = [];\\n        let newNodes = ['home'];\\n        let newNodes2 = [];\\n        let repeat = true;\\n\\n        while (repeat) {\\n            newNodes2 = [];\\n            repeat = false;\\n\\n            let i, j;\\n            for (i = 0; i < newNodes.length; i++) {\\n                let connected = ns.scan(newNodes[i]);\\n\\n                for (j = 0; j < connected.length; j++) {\\n                    let node = connected[j];\\n                    if (!nodes.includes(node) && !newNodes.includes(node) && !newNodes2.includes(node)) {\\n                        newNodes2.push(node);\\n                        repeat = true;\\n                    }\\n                }\\n            }\\n\\n            nodes = nodes.concat(newNodes);\\n            newNodes = newNodes2;\\n        }\\n\\n        nodes = nodes.concat(purchased);\\n        await ns.write('nodes.txt', nodes, 'w');\\n    }\\n\\n    function __nukeAvailableNodes__() {\\n        let nodes = __readNodes__('nodes.txt');\\n        let myHackLevel = ns.getHackingLevel();\\n\\n        let Programs = [\\n            ns.fileExists('BruteSSH.exe'),\\n            ns.fileExists('FTPCrack.exe'),\\n            ns.fileExists('relaySMTP.exe'),\\n            ns.fileExists('HTTPWorm.exe'),\\n            ns.fileExists('SQLInject.exe')\\n        ];\\n\\n        let availPrograms = Programs.reduce((num, bool) => num + bool, 0);\\n\\n        nodes.forEach((node) => {\\n            if (\\n                !ns.hasRootAccess(node) &&\\n                ns.getServerNumPortsRequired(node) <= availPrograms &&\\n                ns.getServerRequiredHackingLevel(node) <= myHackLevel\\n            ) {\\n                Programs.forEach((exists, i) => {\\n                    if (exists) {\\n                        switch (i) {\\n                            case 0:\\n                                ns.brutessh(node);\\n                                break;\\n                            case 1:\\n                                ns.ftpcrack(node);\\n                                break;\\n                            case 2:\\n                                ns.relaysmtp(node);\\n                                break;\\n                            case 3:\\n                                ns.httpworm(node);\\n                                break;\\n                            case 4:\\n                                ns.sqlinject(node);\\n                                break;\\n                        }\\n                    }\\n                });\\n                ns.nuke(node);\\n            }\\n        });\\n    }\\n\\n    async function __scanAndWriteRootedNodes__() {\\n        let nodes = __readNodes__('nodes.txt');\\n        let rooted = nodes.reduce((arr, node) => {\\n            //don't hack ourselves\\n            if (ns.hasRootAccess(node) && node !== 'home' && !purchased.includes(node)) {\\n                let maxMoney = ns.getServerMaxMoney(node);\\n\\n                arr.push(`${maxMoney} ${node}`);\\n            }\\n            return arr;\\n        }, []);\\n\\n        //lowest max money at the front, filter invalid servers, remove money from name\\n        rooted.sort((a, b) => +b.split(' ')[0] - +a.split(' ')[0]);\\n        rooted = rooted.filter((node) => +node.split(' ')[0] > 0);\\n        await ns.write('money_rooted.txt', rooted, 'w');\\n\\n        rooted = rooted.map((node) => node.split(' ')[1]);\\n\\n        if (targetLimit && targetLimit != 'All') {\\n            rooted = rooted.slice(rooted.length - targetLimit);\\n        }\\n\\n        ns.tprint(`hackable nodes: ${rooted.length}`);\\n        await ns.write('rooted.txt', rooted, 'w');\\n    }\\n\\n    //read the nodes\\n    await __scanAndWriteAllNodes__();\\n    __nukeAvailableNodes__();\\n    await __scanAndWriteRootedNodes__();\\n\\n    //load nodes\\n    let attackNodes = [];\\n    if (pserv) {\\n        attackNodes = purchased;\\n    } else {\\n        attackNodes = __readNodes__('rooted.txt');\\n        if (purchased.length) {\\n            attackNodes = attackNodes.concat(purchased);\\n        }\\n    }\\n\\n    attackNodes.push('home');\\n    ns.scriptKill('daemon.js', 'home');\\n    ns.scriptKill('daemon_fml.js', 'home');\\n\\n    // spin up attack servers\\n    if (ns.getServerMaxRam('home') - ns.getServerUsedRam('home') > ns.getScriptRam('main_hack.js') * attackNodes.length)\\n        attackNodes.forEach((attacker) => {\\n            ns.exec('main_hack.js', 'home', 1, attacker, pserv || false, targetLimit || '');\\n        });\\n    else\\n        for (let i = 0; i < attackNodes.length; i++) {\\n            await ns.sleep(200);\\n            ns.exec('main_hack.js', 'home', 1, attackNodes[i], pserv || false, targetLimit || '');\\n        }\\n}\",\"filename\":\"setup_hacks.js\",\"url\":\"blob:file:///a03c41d1-470e-4273-8f3c-ed8ee4dee3a5\",\"module\":{},\"dependencies\":[{\"filename\":\"setup_hacks.js\",\"url\":\"blob:file:///a03c41d1-470e-4273-8f3c-ed8ee4dee3a5\"}],\"ramUsage\":7.35,\"server\":\"home\",\"moduleSequenceNumber\":19485}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet server = ns.args[0];\\n\\n\\tlet maxRam = ns.getServerMaxRam('home');\\n\\tlet usedRam = ns.getServerUsedRam('home');\\n\\tlet scriptRam = ns.getScriptRam('basic_hack.js');\\n\\tlet threads = Math.floor((maxRam - usedRam) / scriptRam);\\n\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t}\\n\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t}\\n\\n\\tns.nuke(server);\\n\\tns.run('basic_hack.js', threads, server);\\n}\",\"filename\":\"home_hack.js\",\"url\":\"blob:file:///e4d5c7e1-2a3e-4351-a242-0862f6f2a700\",\"module\":\"\",\"dependencies\":[{\"filename\":\"home_hack.js\",\"url\":\"blob:file:///e4d5c7e1-2a3e-4351-a242-0862f6f2a700\"}],\"ramUsage\":3.05,\"server\":\"home\",\"moduleSequenceNumber\":206}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":207}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":208}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":209}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [ATTACK_SERVER, pserv, limit] = ns.args;\\n\\n    function __readNodes__(fPath) {\\n        let nodes = ns.read(fPath);\\n        nodes = nodes.split(',');\\n        return nodes;\\n    }\\n\\n    function __findAttackableNodes__() {\\n        let rooted = __readNodes__('rooted.txt');\\n        let targetNodes = [];\\n\\n        //check which are valid for attacking\\n        for (let i = 0; i < rooted.length; i++) {\\n            if (ns.getServerMaxMoney(rooted[i])) {\\n                targetNodes.push(rooted[i]);\\n            }\\n        }\\n\\n        if (pserv && limit && ATTACK_SERVER.split('-')[0] === 'pserv') {\\n            let pservNum = +ATTACK_SERVER.split('-')[2];\\n            let multiplier = Math.floor(targetNodes.length / 5);\\n\\n            if (pservNum < 5) {\\n                targetNodes = targetNodes.slice(0, multiplier);\\n            } else if (pservNum < 10) {\\n                targetNodes = targetNodes.slice(multiplier, multiplier * 2);\\n            } else if (pservNum < 15) {\\n                targetNodes = targetNodes.slice(multiplier * 2, multiplier * 3);\\n            } else if (pservNum < 20) {\\n                targetNodes = targetNodes.slice(multiplier * 3, multiplier * 4);\\n            } else {\\n                targetNodes = targetNodes.slice(multiplier * 4, -1);\\n            }\\n        }\\n\\n        return targetNodes;\\n    }\\n\\n    //prep attackServer\\n    let files = ['weaken.script', 'grow.script', 'hack.script', 'daemon.js', 'daemon_fml.js'];\\n    await ns.scp(files, 'home', ATTACK_SERVER);\\n    ns.scriptKill('daemon.js', ATTACK_SERVER);\\n    ns.scriptKill('daemon_fml.js', ATTACK_SERVER);\\n\\n    //load nodes\\n    let targetNodes = __findAttackableNodes__();\\n\\n    //calc ram and threads per daemon\\n    let serverRam = ns.getServerMaxRam(ATTACK_SERVER);\\n    if (ATTACK_SERVER === 'home') {\\n        serverRam -= ns.getServerUsedRam(ATTACK_SERVER);\\n        serverRam -= ns.getScriptRam('setup_hacks.js');\\n    }\\n\\n    let daemonRam = ns.getScriptRam('daemon.js');\\n    let minRamPerDaemon =\\n        ns.getScriptRam('weaken.script') + ns.getScriptRam('grow.script') + ns.getScriptRam('hack.script');\\n\\n    let leftoverRam = serverRam - daemonRam * targetNodes.length;\\n    let ramPerDaemon = leftoverRam / targetNodes.length;\\n\\n    while (ramPerDaemon < minRamPerDaemon) {\\n        targetNodes.pop();\\n        if (!targetNodes.length) {\\n            ns.tprint(`'${ATTACK_SERVER}' - insufficient RAM: exiting`);\\n            return;\\n        }\\n\\n        if (targetNodes.length === 2 && ns.getHackingLevel() >= ns.getServerRequiredHackingLevel('joesguns')) {\\n            targetNodes = ['joesguns'];\\n        }\\n\\n        leftoverRam = serverRam - daemonRam * targetNodes.length;\\n        ramPerDaemon = leftoverRam / targetNodes.length;\\n    }\\n\\n    //start daemons\\n    let daemonCount = 0;\\n    let daemonFile = ns.fileExists('Formulas.exe') ? 'daemon_fml.js' : 'daemon.js';\\n    targetNodes.forEach((target) => {\\n        let success = ns.exec(\\n            daemonFile,\\n            ATTACK_SERVER,\\n            1,\\n            target,\\n            ATTACK_SERVER,\\n            Math.floor(ramPerDaemon),\\n            limit || false\\n        );\\n        daemonCount += success ? 1 : 0;\\n    });\\n\\n    ns.tprint(`attack server: ${ATTACK_SERVER}`);\\n    ns.tprint(`ram/daemon: ${Math.floor(ramPerDaemon)}`);\\n    ns.tprint(`daemon count: ${daemonCount}`);\\n}\",\"filename\":\"main_hack.js\",\"url\":\"blob:file:///6b4a8a66-f638-4b35-a8f7-fb40adbd055b\",\"module\":{},\"dependencies\":[{\"filename\":\"main_hack.js\",\"url\":\"blob:file:///6b4a8a66-f638-4b35-a8f7-fb40adbd055b\"}],\"ramUsage\":5.05,\"server\":\"home\",\"moduleSequenceNumber\":269893}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///d9eeae94-7628-4b0a-a8b6-23799681c9aa\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///d9eeae94-7628-4b0a-a8b6-23799681c9aa\"}],\"ramUsage\":5.5,\"server\":\"home\",\"moduleSequenceNumber\":402950}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    let newSize = 0;\\n    let silent = false;\\n    if (ns.args.length > 0) {\\n        [newSize, silent] = ns.args;\\n    }\\n\\n    if (isNaN(newSize)) {\\n        newSize = 0;\\n        silent = true;\\n    }\\n\\n    let files = ['weaken.script', 'grow.script', 'hack.script', 'daemon.js'];\\n    let servers = ns.getPurchasedServers();\\n\\n    if (servers.length < 25) {\\n        //buy servers until max\\n        if (!newSize) {\\n            newSize = 64;\\n        }\\n\\n        let price = ns.getPurchasedServerCost(newSize);\\n\\n        let i = servers.length;\\n        while (i < 25) {\\n            ns.print('');\\n            ns.print('===');\\n            ns.print('');\\n            let newHostname = 'pserv-' + newSize + 'gb-' + i;\\n\\n            ns.print(`attempting to purchase ${newHostname} for ${ns.nFormat(price, '$0.000a')}`);\\n\\n            if (ns.getServerMoneyAvailable('home') > price) {\\n                ns.purchaseServer(newHostname, newSize);\\n                ns.print('purchased ' + newHostname);\\n                ns.tprint('purchased ' + newHostname);\\n\\n                if (!silent) {\\n                    //start scripts on new server\\n                    await ns.scp(files, 'home', newHostname);\\n                    ns.exec('main_hack.js', 'home', 1, newHostname);\\n                }\\n\\n                ++i;\\n            }\\n\\n            if (ns.getServerMoneyAvailable('home') < price) {\\n                await ns.sleep(10000);\\n            }\\n        }\\n    } else {\\n        // upgrade existing servers\\n        let i = 0;\\n        while (i < 25) {\\n            ns.print('');\\n            ns.print('===');\\n            ns.print('');\\n            let oldServerName = servers[i];\\n            let oldServerSize = ns.getServerMaxRam(oldServerName);\\n            let newServerSize = newSize;\\n\\n            if (!newServerSize) {\\n                newServerSize = 2 * oldServerSize;\\n            }\\n\\n            let price = ns.getPurchasedServerCost(newServerSize);\\n\\n            ns.print(`looking at server: ${oldServerName} - size: ${oldServerSize} -> ${newServerSize}`);\\n\\n            if (oldServerSize < newServerSize) {\\n                let newHostname = 'pserv-' + newServerSize + 'gb-' + i;\\n\\n                ns.print(`attempt upgrade: ${oldServerName} -> ${newHostname} for ${ns.nFormat(price, '$0.000a')}`);\\n\\n                if (ns.getServerMoneyAvailable('home') > price) {\\n                    ns.killall(oldServerName);\\n                    let deleted = ns.deleteServer(oldServerName);\\n\\n                    if (deleted) {\\n                        ns.purchaseServer(newHostname, newServerSize);\\n\\n                        ns.print('purchased ' + newHostname);\\n                        ns.tprint('purchased ' + newHostname);\\n\\n                        if (!silent) {\\n                            //start scripts on new server\\n                            await ns.scp(files, 'home', newHostname);\\n                            ns.exec('main_hack.js', 'home', 1, newHostname);\\n                        }\\n                    } else {\\n                        ns.print(`${oldServerName} deletion failed`);\\n                    }\\n                    ++i;\\n                }\\n            }\\n\\n            if (oldServerSize >= newServerSize) {\\n                i++;\\n            }\\n\\n            if (ns.getServerMoneyAvailable('home') < price) {\\n                await ns.sleep(20000);\\n            }\\n        }\\n    }\\n}\",\"filename\":\"refresh_servers.js\",\"url\":\"blob:file:///c174246f-8c73-4dc4-a009-9f8da75342fd\",\"module\":{},\"dependencies\":[{\"filename\":\"refresh_servers.js\",\"url\":\"blob:file:///c174246f-8c73-4dc4-a009-9f8da75342fd\"}],\"ramUsage\":11.15,\"server\":\"home\",\"moduleSequenceNumber\":93631}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getServerMoneyAvailable');\\n\\n    // We will not buy anything if there's less money than this ammount\\n    let reserveMoney = 1000;\\n    let HNT = ns.hacknet;\\n\\n    // Buy first HacknetNode if there are none\\n    if (HNT.numNodes() === 0 && ns.getServerMoneyAvailable('home') >= reserveMoney) {\\n        HNT.purchaseNode();\\n        ns.print('Purchased ' + HNT.getNodeStats(HNT.numNodes() - 1).name + ' because there was none.');\\n    }\\n\\n    // If there are no Hacknet Nodes, we can't do anything, so the script ends\\n    let numUpgrades = 1;\\n    while (HNT.numNodes() > 0) {\\n        // If there is not enough money, we wait for it instead of ending\\n        // the loop.\\n        while (ns.getServerMoneyAvailable('home') * 0.1 >= reserveMoney) {\\n            for (let i = 0; i < HNT.numNodes(); i++) {\\n                while (\\n                    HNT.getLevelUpgradeCost(i, numUpgrades) < ns.getServerMoneyAvailable('home') * 0.1 &&\\n                    HNT.upgradeLevel(i, numUpgrades)\\n                ) {\\n                    ns.print('Upgraded ' + HNT.getNodeStats(i).name + ' to level ' + HNT.getNodeStats(i).level);\\n                }\\n\\n                while (\\n                    HNT.getRamUpgradeCost(i, numUpgrades) < ns.getServerMoneyAvailable('home') * 0.1 &&\\n                    HNT.upgradeRam(i, numUpgrades)\\n                ) {\\n                    ns.print('Upgraded ' + HNT.getNodeStats(i).name + ' RAM to ' + HNT.getNodeStats(i).ram);\\n                }\\n\\n                while (\\n                    HNT.getCoreUpgradeCost(i, numUpgrades) < ns.getServerMoneyAvailable('home') * 0.1 &&\\n                    HNT.upgradeCore(i, numUpgrades)\\n                ) {\\n                    ns.print('Upgraded ' + HNT.getNodeStats(i).name + ' core to ' + HNT.getNodeStats(i).core);\\n                }\\n            }\\n\\n            // Buy next Hacknet Node if the last one is already fully\\n            // upgraded. If for some reason the last Hacknet Node is fully\\n            // upgraded and the others don't, the loop above will still\\n            // attempt to upgrade them all.\\n            if (\\n                HNT.getLevelUpgradeCost(HNT.numNodes() - 1, numUpgrades) === Infinity &&\\n                HNT.getRamUpgradeCost(HNT.numNodes() - 1, numUpgrades) === Infinity &&\\n                HNT.getCoreUpgradeCost(HNT.numNodes() - 1, numUpgrades) === Infinity &&\\n                HNT.getPurchaseNodeCost() < ns.getServerMoneyAvailable('home') * 0.1\\n            ) {\\n                HNT.purchaseNode();\\n                ns.print(\\n                    `Purchased ${\\n                        HNT.getNodeStats(HNT.numNodes() - 1).name\\n                    } because the last one couldn't be upgraded further.`\\n                );\\n            } else if (\\n                // Or buy the next Hacknet Node if the next upgrade is more\\n                // expensive than buying a new Hacknet Node.\\n                HNT.getLevelUpgradeCost(HNT.numNodes() - 1, numUpgrades) > HNT.getPurchaseNodeCost() &&\\n                HNT.getRamUpgradeCost(HNT.numNodes() - 1, numUpgrades) > HNT.getPurchaseNodeCost() &&\\n                HNT.getCoreUpgradeCost(HNT.numNodes() - 1, numUpgrades) > HNT.getPurchaseNodeCost() &&\\n                HNT.getPurchaseNodeCost() < ns.getServerMoneyAvailable('home') * 0.1\\n            ) {\\n                HNT.purchaseNode();\\n                ns.print(\\n                    `Purchased ${HNT.getNodeStats(HNT.numNodes() - 1).name} because it was cheaper than next upgrade.`\\n                );\\n            }\\n\\n            await ns.sleep(1000);\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"hacknet.js\",\"url\":\"blob:file:///7d8be283-c257-4130-96f3-0bbd397293e9\",\"module\":{},\"dependencies\":[{\"filename\":\"hacknet.js\",\"url\":\"blob:file:///7d8be283-c257-4130-96f3-0bbd397293e9\"}],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":19291}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {{\\n *  sym: string;\\n *  shares: number;\\n *  price: number;\\n *  forecast: number;\\n * }[]} Stocks\\n *\\n * @typedef {{\\n *  [sym: string]: {\\n *      profit: string;\\n *      raw: number;\\n *  }\\n * }} Tracker\\n */\\n\\n/** @type {Stocks} */\\nlet stocks = [];\\n/** @type {Stocks} */\\nlet myStocks = [];\\nlet corpus = 0;\\n\\n/** @type {Tracker} */\\nlet profitTracker = {};\\n\\nlet COMMISSION = 100000; //Buy or sell commission\\nlet numCycles = 2; //Each cycle is ~ 5 seconds\\nlet fracL = 0.2; //Fraction of assets to keep as cash in hand\\nlet fracH = 0.2;\\n\\n/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    ns.tail();\\n\\n    let TIX = ns.stock;\\n    let syms = TIX.getSymbols();\\n    syms.forEach((sym) => (profitTracker[sym] = { profit: '$0.00', raw: 0 }));\\n\\n    function __refresh__() {\\n        let newCorpus = ns.getServerMoneyAvailable('home');\\n\\n        stocks = [];\\n        myStocks = [];\\n        syms.forEach((sym) => {\\n            let [shares] = TIX.getPosition(sym);\\n            let price = TIX.getPrice(sym);\\n            let forecast = TIX.getForecast(sym);\\n            newCorpus += price * shares;\\n\\n            if (shares) {\\n                myStocks.push({ sym, shares, price, forecast });\\n            } else {\\n                stocks.push({ sym, shares, price, forecast });\\n            }\\n        });\\n\\n        stocks.sort((a, b) => b.forecast - a.forecast);\\n        corpus = newCorpus;\\n    }\\n\\n    function __format__(profit) {\\n        return ns.nFormat(profit, '($0.00a)');\\n    }\\n\\n    function __buy__(stock, numShares) {\\n        //buy\\n        let pricePer = TIX.buy(stock.sym, numShares);\\n        let price = __format__(pricePer * numShares + COMMISSION);\\n\\n        //track\\n        profitTracker[stock.sym].raw = profitTracker[stock.sym].raw - pricePer * numShares;\\n        profitTracker[stock.sym].profit = __format__(profitTracker[stock.sym].raw);\\n\\n        //log\\n        ns.print(`Bought ${pricePer ? numShares : 0} shares of ${stock.sym} for ${price}`);\\n        ns.print(`Current profit for ${stock.sym}: ${profitTracker[stock.sym].profit}`);\\n    }\\n\\n    function __sell__(stock, numShares) {\\n        //buy\\n        let profitPer = TIX.sell(stock.sym, numShares);\\n        let profit = __format__(profitPer * numShares + COMMISSION);\\n\\n        //track\\n        profitTracker[stock.sym].raw = profitTracker[stock.sym].raw + profitPer * numShares;\\n        profitTracker[stock.sym].profit = __format__(profitTracker[stock.sym].raw);\\n\\n        //log\\n        ns.print(`Sold ${profitPer ? numShares : 0} shares of ${stock.sym} for ${profit}`);\\n        ns.print(`Current profit for ${stock.sym}: ${profitTracker[stock.sym].profit}`);\\n    }\\n\\n    while (true) {\\n        __refresh__();\\n\\n        //Sell underperforming shares\\n        myStocks.forEach((stock) => {\\n            if (stock.forecast < stocks[0].forecast) {\\n                __sell__(stock, stock.shares);\\n                corpus -= COMMISSION;\\n            }\\n        });\\n\\n        //Sell shares if not enough cash in hand\\n        myStocks.forEach((stock) => {\\n            if (ns.getServerMoneyAvailable('home') < fracL * corpus) {\\n                let cashNeeded = corpus * fracH - ns.getServerMoneyAvailable('home') + COMMISSION;\\n                let numShares = Math.floor(cashNeeded / stock.price);\\n\\n                __sell__(stock, numShares);\\n                corpus -= COMMISSION;\\n            }\\n        });\\n\\n        // Buy shares with cash remaining in hand\\n        let cashToSpend = ns.getServerMoneyAvailable('home') - fracH * corpus;\\n        let numShares = Math.floor((cashToSpend - COMMISSION) / stocks[0].price);\\n        let maxShares = TIX.getMaxShares(stocks[0].sym) - stocks[0].shares;\\n\\n        numShares = Math.min(numShares, maxShares);\\n\\n        ns.print('stocks[0].price: ' + stocks[0].price);\\n        ns.print('corpus: ' + corpus);\\n        ns.print('cashToSpend: ' + cashToSpend);\\n\\n        if (numShares * stocks[0].forecast * stocks[0].price * numCycles > COMMISSION) {\\n            __buy__(stocks[0], numShares);\\n        }\\n\\n        await ns.sleep(5 * 1000 * numCycles + 200);\\n    }\\n}\",\"filename\":\"stocks.js\",\"url\":\"blob:file:///8f829e6a-aece-4fe8-99ae-8f1c81465c47\",\"module\":{},\"dependencies\":[{\"filename\":\"stocks.js\",\"url\":\"blob:file:///8f829e6a-aece-4fe8-99ae-8f1c81465c47\"}],\"ramUsage\":17.2,\"server\":\"home\",\"moduleSequenceNumber\":667358}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\n\\t//get the TOR router\\n\\twhile (!ns.purchaseTor()) {\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n\\n\\t//buy programs in this order\\n\\tlet cheapProgramList = [\\n\\t\\t'BruteSSH.exe',\\n\\t\\t'FTPCrack.exe',\\n\\t\\t'AutoLink.exe',\\n\\t\\t'DeepscanV1.exe',\\n\\t\\t'ServerProfiler.exe',\\n\\t\\t'DeepscanV2.exe',\\n\\t];\\n\\tfor (let i = 0; i < cheapProgramList.length; i++) {\\n\\t\\tlet prg = cheapProgramList[i];\\n\\t\\twhile (!ns.purchaseProgram(prg)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\t}\\n\\n\\t//buy baseline 64g servers\\n\\twhile (ns.getServerMoneyAvailable('home') < 88000000) {\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n\\tns.run('refresh_servers.js', 1, 64);\\n\\n\\t//buy programs in this order\\n\\tlet priceyProgramList = ['DeepscanV2.exe', 'relaySMTP.exe', 'HTTPWorm.exe', 'SQLInject.exe'];\\n\\tfor (let i = 0; i < priceyProgramList.length; i++) {\\n\\t\\tlet prg = priceyProgramList[i];\\n\\t\\twhile (!ns.purchaseProgram(prg)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"buy_darkweb.js\",\"url\":\"blob:file:///2a3a7ebd-7bef-459a-9cc1-554a8d433205\",\"module\":\"\",\"dependencies\":[{\"filename\":\"buy_darkweb.js\",\"url\":\"blob:file:///2a3a7ebd-7bef-459a-9cc1-554a8d433205\"}],\"ramUsage\":6.7,\"server\":\"home\",\"moduleSequenceNumber\":215}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n\\r\\n    let COMMISSION = 100000; //Buy or sell commission\\r\\n\\r\\n    if (ns.isRunning('stocks.js', 'home')) {\\r\\n        ns.kill('stocks.js', 'home');\\r\\n    }\\r\\n\\r\\n    function __format__(profit) {\\r\\n        return ns.nFormat(profit, '-$0.00a');\\r\\n    }\\r\\n\\r\\n    let TIX = ns.stock;\\r\\n    let syms = TIX.getSymbols();\\r\\n\\r\\n    syms.forEach((sym) => {\\r\\n        let [numShares] = TIX.getPosition(sym);\\r\\n        if (numShares) {\\r\\n            let profitPer = TIX.sell(sym, numShares);\\r\\n            let profit = __format__(profitPer * numShares - COMMISSION);\\r\\n            ns.tprint(`Sold ${profitPer ? numShares : 0} shares of ${sym} for profit of ${profit}`);\\r\\n        }\\r\\n    });\\r\\n}\",\"filename\":\"sell_stocks.js\",\"url\":\"blob:file:///a78de51f-a7e9-445e-8723-a5bdfdd4a537\",\"module\":{},\"dependencies\":[{\"filename\":\"sell_stocks.js\",\"url\":\"blob:file:///a78de51f-a7e9-445e-8723-a5bdfdd4a537\"}],\"ramUsage\":8.7,\"server\":\"home\",\"moduleSequenceNumber\":1036437}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {{\\n *  sym: string;\\n *  shares: number;\\n *  price: number;\\n *  forecast: number;\\n * }[]} Stocks\\n *\\n * @typedef {{\\n *  [sym: string]: {\\n *      profit: string;\\n *      raw: number;\\n *  }\\n * }} Tracker\\n */\\n\\n/** @type {Stocks} */\\nlet stocks = [];\\n/** @type {Stocks} */\\nlet myStocks = [];\\nlet corpus = 0;\\n\\n/** @type {Tracker} */\\nlet profitTracker = {};\\n\\n/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    const TIX = ns.stock;\\n\\n    const KEEP = 0.2;\\n    const BUY_LIMIT = 0.58;\\n    const SELL_LIMIT = 0.5;\\n    const COMMISSION = 100000;\\n\\n    //init stocks\\n    let syms = TIX.getSymbols();\\n    syms.forEach((sym) => {\\n        stocks.push({ sym });\\n        profitTracker[sym] = { profit: '$0.00', raw: 0 };\\n    });\\n\\n    function __updateStockData__() {\\n        let corpus = ns.getServerMoneyAvailable('home');\\n        myStocks.length = 0;\\n\\n        stocks.forEach((stock) => {\\n            let sym = stock.sym;\\n            stock.price = TIX.getPrice(sym);\\n            stock.shares = TIX.getPosition(sym)[0];\\n            stock.forecast = TIX.getForecast(sym);\\n\\n            corpus += stock.price * stock.shares;\\n\\n            if (stock.shares) {\\n                myStocks.push(stock);\\n            }\\n        });\\n\\n        stocks.sort((a, b) => b.forecast - a.forecast);\\n        return corpus;\\n    }\\n\\n    function __format__(profit) {\\n        return ns.nFormat(profit, '-$0.00a');\\n    }\\n\\n    function __buy__(stock, numShares) {\\n        //buy\\n        let pricePer = TIX.buy(stock.sym, numShares);\\n        let price = __format__(pricePer * numShares + COMMISSION);\\n\\n        //track\\n        profitTracker[stock.sym].raw = profitTracker[stock.sym].raw - pricePer * numShares;\\n        profitTracker[stock.sym].profit = __format__(profitTracker[stock.sym].raw);\\n\\n        //log\\n        ns.print(`Bought ${pricePer ? numShares : 0} shares of ${stock.sym} for ${price}`);\\n        ns.print(`Current profit for ${stock.sym}: ${profitTracker[stock.sym].profit}`);\\n    }\\n\\n    function __sell__(stock, numShares) {\\n        //buy\\n        let profitPer = TIX.sell(stock.sym, numShares);\\n        let profit = __format__(profitPer * numShares + COMMISSION);\\n\\n        //track\\n        profitTracker[stock.sym].raw = profitTracker[stock.sym].raw + profitPer * numShares;\\n        profitTracker[stock.sym].profit = __format__(profitTracker[stock.sym].raw);\\n\\n        //log\\n        ns.print(`Sold ${profitPer ? numShares : 0} shares of ${stock.sym} for ${profit}`);\\n        ns.print(`Current profit for ${stock.sym}: ${profitTracker[stock.sym].profit}`);\\n    }\\n\\n    while (true) {\\n        corpus = __updateStockData__();\\n\\n        // Sell bad shares\\n        myStocks.forEach((stock) => {\\n            if (stock.forecast < SELL_LIMIT) {\\n                ns.print(`${stock.sym} no longer valuable - selling.`);\\n                __sell__(stock, stock.shares);\\n            }\\n        });\\n\\n        // Don't do this. Use getStockPurchaseCost for some proportion of corpus,\\n        // then reduce it by a certain % until it's buyable.\\n\\n        let stockIndex = -1;\\n        let cashToSpend = ns.getServerMoneyAvailable('home');\\n        while (cashToSpend > 100 * COMMISSION && cashToSpend > corpus * 0.1) {\\n            stockIndex++;\\n            corpus = __updateStockData__();\\n\\n            let stockToBuy = stocks[stockIndex];\\n            if (!stockToBuy || stockToBuy.forecast < BUY_LIMIT) {\\n                // No more (good) stocks left\\n                break;\\n            }\\n\\n            let availibleShares = TIX.getMaxShares(stockToBuy.sym) - stockToBuy.shares;\\n            if (!availibleShares) {\\n                // We bought all shares of this stock\\n                continue;\\n            }\\n\\n            while (availibleShares) {\\n                let purchaseCost = TIX.getPurchaseCost(stockToBuy.sym, availibleShares, 'Long');\\n                if (purchaseCost <= cashToSpend) {\\n                    __buy__(stockToBuy, availibleShares);\\n                    cashToSpend -= purchaseCost;\\n                    break;\\n                }\\n\\n                availibleShares = Math.floor(availibleShares * 0.9);\\n            }\\n        }\\n\\n        await ns.sleep(5 * 1000);\\n    }\\n}\",\"filename\":\"stocks_V2.js\",\"url\":\"blob:file:///2e186ab4-4220-45c6-a6b4-46dd5b6e91e4\",\"module\":{},\"dependencies\":[{\"filename\":\"stocks_V2.js\",\"url\":\"blob:file:///2e186ab4-4220-45c6-a6b4-46dd5b6e91e4\"}],\"ramUsage\":19.2,\"server\":\"home\",\"moduleSequenceNumber\":1036438}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///acedb584-ebe9-4631-a6ba-795e01a98cbd\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///acedb584-ebe9-4631-a6ba-795e01a98cbd\"}],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":403695}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    let roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n\\n    let nodes = {\\n        home: roots.reduce((obj, node) => {\\n            let maxMoney = ns.nFormat(ns.getServerMaxMoney(node), '$0.00a');\\n            let hackingReq = ns.getServerRequiredHackingLevel(node);\\n            let childName = `${node} - ${maxMoney} - ${hackingReq}`;\\n\\n            obj[childName] = {};\\n            return obj;\\n        }, {})\\n    };\\n\\n    roots.unshift('home');\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        ns.tprint('');\\n        ns.tprint('      rootName: ', rootNode);\\n        ns.tprint('connectedNodes: ', connectedNodes);\\n        ns.tprint('         roots: ', roots);\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let maxMoney = ns.nFormat(ns.getServerMaxMoney(childNode), '$0.00a');\\n                let hackingReq = ns.getServerRequiredHackingLevel(childNode);\\n                let childName = `${childNode} - ${maxMoney} - ${hackingReq}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n    }\\n\\n    Object.keys(nodes.home).forEach((node) => {\\n        traverseNodes(nodes.home[node], node.split(' ')[0]);\\n    });\\n    await ns.write('servers.txt', JSON.stringify(nodes), 'w');\\n    ns.tprint(nodes);\\n}\",\"filename\":\"scan_servers.js\",\"url\":\"blob:file:///0f2755a3-adce-44ef-adc9-a5ad1944133b\",\"module\":{},\"dependencies\":[{\"filename\":\"scan_servers.js\",\"url\":\"blob:file:///0f2755a3-adce-44ef-adc9-a5ad1944133b\"}],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":268554}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let purchased = ns.getPurchasedServers();\\n\\n    function __readNodes__(fPath) {\\n        let nodes = ns.read(fPath);\\n        nodes = nodes.split(',');\\n        return nodes;\\n    }\\n\\n    async function __scanAndWriteAllNodes__() {\\n        let nodes = [];\\n        let newNodes = ['home'];\\n        let newNodes2 = [];\\n        let repeat = true;\\n\\n        while (repeat) {\\n            newNodes2 = [];\\n            repeat = false;\\n\\n            let i, j;\\n            for (i = 0; i < newNodes.length; i++) {\\n                let connected = ns.scan(newNodes[i]);\\n\\n                for (j = 0; j < connected.length; j++) {\\n                    let node = connected[j];\\n                    if (!nodes.includes(node) && !newNodes.includes(node) && !newNodes2.includes(node)) {\\n                        newNodes2.push(node);\\n                        repeat = true;\\n                    }\\n                }\\n            }\\n\\n            nodes = nodes.concat(newNodes);\\n            newNodes = newNodes2;\\n        }\\n\\n        nodes = nodes.concat(purchased);\\n        await ns.write('nodes.txt', nodes, 'w');\\n    }\\n\\n    function __nukeAvailableNodes__() {\\n        let nodes = __readNodes__('nodes.txt');\\n        let myHackLevel = ns.getHackingLevel();\\n\\n        let Programs = [\\n            ns.fileExists('BruteSSH.exe'),\\n            ns.fileExists('FTPCrack.exe'),\\n            ns.fileExists('relaySMTP.exe'),\\n            ns.fileExists('HTTPWorm.exe'),\\n            ns.fileExists('SQLInject.exe')\\n        ];\\n\\n        let availPrograms = Programs.reduce((num, bool) => num + bool, 0);\\n\\n        nodes.forEach((node) => {\\n            if (\\n                !ns.hasRootAccess(node) &&\\n                ns.getServerNumPortsRequired(node) <= availPrograms &&\\n                ns.getServerRequiredHackingLevel(node) <= myHackLevel\\n            ) {\\n                Programs.forEach((exists, i) => {\\n                    if (exists) {\\n                        switch (i) {\\n                            case 0:\\n                                ns.brutessh(node);\\n                                break;\\n                            case 1:\\n                                ns.ftpcrack(node);\\n                                break;\\n                            case 2:\\n                                ns.relaysmtp(node);\\n                                break;\\n                            case 3:\\n                                ns.httpworm(node);\\n                                break;\\n                            case 4:\\n                                ns.sqlinject(node);\\n                                break;\\n                        }\\n                    }\\n                });\\n                ns.nuke(node);\\n                ns.tprint(`NUKE: ${node}`)\\n            }\\n        });\\n    }\\n\\n\\n    //read the nodes\\n    await __scanAndWriteAllNodes__();\\n    __nukeAvailableNodes__();\\n}\",\"filename\":\"nuke_servers.js\",\"url\":\"blob:file:///012b900d-d86a-42c2-a439-a61010d5cc30\",\"module\":{},\"dependencies\":[{\"filename\":\"nuke_servers.js\",\"url\":\"blob:file:///012b900d-d86a-42c2-a439-a61010d5cc30\"}],\"ramUsage\":4.75,\"server\":\"home\",\"moduleSequenceNumber\":207133}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.deleteServer('pserv-64gb-24-0')\\n}\",\"filename\":\"adhoc.js\",\"url\":\"blob:file:///b2e2c27b-8ffe-4fab-926f-a84b5074e245\",\"module\":\"\",\"dependencies\":[{\"filename\":\"adhoc.js\",\"url\":\"blob:file:///b2e2c27b-8ffe-4fab-926f-a84b5074e245\"}],\"ramUsage\":3.85,\"server\":\"home\",\"moduleSequenceNumber\":221}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// ns.disableLog('ALL')\\n\\t// ns.getServerMaxRam('home')\\n\\t// ns.enableLog('exec')\\n\\t// ns.enableLog('weaken')\\n\\t// ns.enableLog('grow')\\n\\t// ns.enableLog('hack')\\n\\t// ns.enableLog('getServerUsedRam')\\n\\t// ns.enableLog('getServerSecurityLevel')\\n\\t// ns.enableLog('getServerMoneyAvailable')\\n\\t// ns.enableLog('hackAnalyze')\\n\\t// ns.enableLog('growthAnalyze')\\n\\t// ns.getServerMaxRam('home')\\n\\n\\tns.tprint(ns.getServerMoneyAvailable('home'))\\n\\n\\tns.formulas.skills.calculateExp(1)\\n\\n\\t// while (true) {\\n\\t// \\tawait ns.sleep(100000)\\n\\t// }\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":269368}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-4096gb-0\",\"pserv-4096gb-1\",\"pserv-4096gb-2\",\"pserv-4096gb-3\",\"pserv-4096gb-4\",\"pserv-4096gb-5\",\"pserv-4096gb-6\",\"pserv-4096gb-7\",\"pserv-4096gb-8\",\"pserv-4096gb-9\",\"pserv-4096gb-10\",\"pserv-4096gb-0-0\",\"pserv-4096gb-1-0\",\"pserv-4096gb-2-0\",\"pserv-4096gb-3-0\",\"pserv-4096gb-4-0\",\"pserv-4096gb-5-0\",\"pserv-4096gb-6-0\",\"pserv-4096gb-7-0\",\"pserv-4096gb-8-0\",\"pserv-4096gb-9-0\",\"pserv-4096gb-10-0\",\"pserv-4096gb-11\",\"pserv-4096gb-12\",\"pserv-4096gb-13\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"nodes.txt\",\"text\":\"home,n00dles,foodnstuff,sigma-cosmetics,joesguns,hong-fang-tea,harakiri-sushi,iron-gym,darkweb,pserv-4096gb-0,pserv-4096gb-1,pserv-4096gb-2,pserv-4096gb-3,pserv-4096gb-4,pserv-4096gb-5,pserv-4096gb-6,pserv-4096gb-7,pserv-4096gb-8,pserv-4096gb-9,pserv-4096gb-10,pserv-4096gb-0-0,pserv-4096gb-1-0,pserv-4096gb-2-0,pserv-4096gb-3-0,pserv-4096gb-4-0,pserv-4096gb-5-0,pserv-4096gb-6-0,pserv-4096gb-7-0,pserv-4096gb-8-0,pserv-4096gb-9-0,pserv-4096gb-10-0,pserv-4096gb-11,pserv-4096gb-12,pserv-4096gb-13,nectar-net,zer0,max-hardware,CSEC,silver-helix,neo-net,phantasy,omega-net,crush-fitness,avmnite-02h,the-hub,johnson-ortho,netlink,comptek,catalyst,I.I.I.I,rothman-uni,zb-institute,syscore,summit-uni,rho-construction,alpha-ent,lexo-corp,aevum-police,millenium-fitness,global-pharm,galactic-cyber,aerocorp,snap-fitness,omnia,deltaone,unitalife,solaris,icarus,univ-energy,zeus-med,defcomm,zb-def,nova-med,infocomm,taiyang-digital,microdyne,applied-energetics,run4theh111z,titan-labs,stormtech,helios,fulcrumtech,vitalife,.,omnitek,4sigma,kuai-gong,clarkinc,b-and-a,blade,nwo,powerhouse-fitness,fulcrumassets,megacorp,ecorp,The-Cave,pserv-4096gb-0,pserv-4096gb-1,pserv-4096gb-2,pserv-4096gb-3,pserv-4096gb-4,pserv-4096gb-5,pserv-4096gb-6,pserv-4096gb-7,pserv-4096gb-8,pserv-4096gb-9,pserv-4096gb-10,pserv-4096gb-0-0,pserv-4096gb-1-0,pserv-4096gb-2-0,pserv-4096gb-3-0,pserv-4096gb-4-0,pserv-4096gb-5-0,pserv-4096gb-6-0,pserv-4096gb-7-0,pserv-4096gb-8-0,pserv-4096gb-9-0,pserv-4096gb-10-0,pserv-4096gb-11,pserv-4096gb-12,pserv-4096gb-13\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"rooted.txt\",\"text\":\"catalyst,aevum-police,netlink,summit-uni,comptek,rothman-uni,the-hub,johnson-ortho,omega-net,crush-fitness,silver-helix,phantasy,iron-gym,max-hardware,zer0,neo-net,harakiri-sushi,hong-fang-tea,nectar-net,joesguns,sigma-cosmetics,foodnstuff,n00dles\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servers.txt\",\"text\":\"{\\\"home\\\":{\\\"n00dles - $1.75m - 1\\\":{},\\\"foodnstuff - $50.00m - 1\\\":{},\\\"sigma-cosmetics - $57.50m - 5\\\":{},\\\"joesguns - $62.50m - 10\\\":{},\\\"hong-fang-tea - $75.00m - 30\\\":{\\\"nectar-net - $68.75m - 20\\\":{}},\\\"harakiri-sushi - $100.00m - 40\\\":{\\\"zer0 - $187.50m - 75\\\":{\\\"silver-helix - $1.13b - 150\\\":{\\\"crush-fitness - $1.23b - 262\\\":{\\\"catalyst - $7.86b - 420\\\":{\\\"rho-construction - $16.03b - 498\\\":{\\\"global-pharm - $39.14b - 770\\\":{}},\\\"alpha-ent - $18.12b - 561\\\":{}},\\\"I.I.I.I - $0.00 - 365\\\":{\\\"lexo-corp - $17.56b - 726\\\":{\\\"galactic-cyber - $19.33b - 859\\\":{}}}},\\\"avmnite-02h - $0.00 - 215\\\":{\\\"rothman-uni - $5.93b - 391\\\":{\\\"aevum-police - $7.24b - 405\\\":{\\\"aerocorp - $27.72b - 891\\\":{\\\"omnia - $22.59b - 898\\\":{\\\"solaris - $19.88b - 808\\\":{}},\\\"deltaone - $35.10b - 801\\\":{\\\"icarus - $24.38b - 884\\\":{},\\\"univ-energy - $28.53b - 894\\\":{},\\\"zeus-med - $35.51b - 824\\\":{\\\"zb-def - $23.01b - 803\\\":{\\\"microdyne - $15.70b - 841\\\":{\\\"stormtech - $29.89b - 929\\\":{}},\\\"applied-energetics - $24.95b - 802\\\":{\\\"helios - $18.28b - 828\\\":{\\\". - $0.00 - 515\\\":{\\\"clarkinc - $411.49b - 1150\\\":{\\\"fulcrumassets - $25.00m - 1227\\\":{}}}}}},\\\"nova-med - $29.73b - 845\\\":{\\\"run4theh111z - $0.00 - 524\\\":{}}}}},\\\"snap-fitness - $11.25b - 693\\\":{\\\"unitalife - $26.67b - 814\\\":{\\\"defcomm - $20.86b - 968\\\":{\\\"infocomm - $18.94b - 914\\\":{},\\\"taiyang-digital - $20.35b - 932\\\":{\\\"titan-labs - $19.84b - 807\\\":{\\\"fulcrumtech - $40.38b - 992\\\":{},\\\"vitalife - $17.58b - 778\\\":{\\\"omnitek - $412.09b - 1002\\\":{},\\\"4sigma - $569.03b - 1116\\\":{\\\"b-and-a - $692.85b - 909\\\":{\\\"megacorp - $1.35t - 1217\\\":{}},\\\"blade - $951.98b - 1169\\\":{\\\"ecorp - $1.10t - 1157\\\":{}}},\\\"kuai-gong - $611.36b - 1040\\\":{\\\"nwo - $515.86b - 1096\\\":{},\\\"powerhouse-fitness - $22.50b - 1093\\\":{\\\"The-Cave - $0.00 - 925\\\":{}}}}}}}}}}}}}}},\\\"iron-gym - $500.00m - 100\\\":{\\\"max-hardware - $250.00m - 80\\\":{\\\"neo-net - $125.00m - 50\\\":{\\\"the-hub - $4.05b - 316\\\":{},\\\"johnson-ortho - $2.00b - 292\\\":{}},\\\"phantasy - $600.00m - 100\\\":{\\\"netlink - $6.88b - 405\\\":{\\\"zb-institute - $22.60b - 729\\\":{},\\\"syscore - $12.69b - 612\\\":{}}}},\\\"CSEC - $0.00 - 53\\\":{\\\"omega-net - $1.54b - 204\\\":{\\\"comptek - $6.04b - 317\\\":{\\\"summit-uni - $6.09b - 431\\\":{\\\"millenium-fitness - $6.25b - 476\\\":{}}}}}},\\\"darkweb - $0.00 - 1\\\":{}}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"money_rooted.txt\",\"text\":\"7864230450 catalyst,7236809500 aevum-police,6875000000 netlink,6094964400 summit-uni,6041084875 comptek,5929140800 rothman-uni,4045563300 the-hub,2000806800 johnson-ortho,1539121675 omega-net,1227617425 crush-fitness,1125000000 silver-helix,600000000 phantasy,500000000 iron-gym,250000000 max-hardware,187500000 zer0,125000000 neo-net,100000000 harakiri-sushi,75000000 hong-fang-tea,68750000 nectar-net,62500000 joesguns,57500000 sigma-cosmetics,50000000 foodnstuff,1750000 n00dles\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-241457.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[64,187,165,152,39,147,50,183,179,58,133,120,12,19,25,88,152,90,148,140,88,42,147,5,104,164,108,69,87,146],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"94.1.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":22074998658.5,\"moneyMax\":1103749932925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1157,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-161400-CyberSec.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[9,9,-5,7,8,7],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"75.1.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":27022155152.5,\"moneyMax\":1351107757625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1217,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-622135.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[2],[5,9],[2,2,8],[6,6,8,4],[2,7,6,3,8]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-313097-Netburners.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"82391438401\",-11],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"91.8.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":160,\"hackDifficulty\":160,\"minDifficulty\":53,\"moneyAvailable\":13856941198,\"moneyMax\":692847059900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":909,\"serverGrowth\":71}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"48.7.6.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":188,\"hackDifficulty\":188,\"minDifficulty\":63,\"moneyAvailable\":19039696600,\"moneyMax\":951984830000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1169,\"serverGrowth\":81}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-82774-NationalSecurityAgency.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[163,9,69,194],\"reward\":{\"name\":\"National Security Agency\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-918756-MegaCorp.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[3,8],\"reward\":{\"name\":\"MegaCorp\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"10.4.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":10317155455,\"moneyMax\":515857772750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1096,\"serverGrowth\":73}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-410929-CarmichaelSecurity.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[41,38,12,21,9,7,12,4,47]],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"24.0.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":8229876342,\"moneyMax\":411493817100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1150,\"serverGrowth\":59}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-307115-TheBlackHand.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[13,11],\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-200005.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[6,[121,148,91,11,101,72,121,192,64,174,157,93,183,176,141,162,51,113,8,18,95,13,190,96,170,147,23,95,155,69,200,167,160,1,44,70,71,55,107,7,24,17,97,103,97,23]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"34.4.5.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":194,\"hackDifficulty\":194,\"minDifficulty\":65,\"moneyAvailable\":8241879882,\"moneyMax\":412093994100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1002,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-514064.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[129,123,150,161,166,154,5,28,132,112,37,195,1,123,102,175,36,65,166,25,168,181,128,21,91,137,99,153,129,175],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-117650-MegaCorp.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[23,29],[24,25],[7,15],[6,13],[5,12]],\"reward\":{\"name\":\"MegaCorp\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-71166-Netburners.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"2914599162\",\"reward\":{\"name\":\"Netburners\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-356642-NationalSecurityAgency.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")(aaaaa((((a(aa((a(\",\"reward\":{\"name\":\"National Security Agency\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"72.8.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":118,\"hackDifficulty\":118,\"minDifficulty\":39,\"moneyAvailable\":11380668696.5,\"moneyMax\":569033434825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1116,\"serverGrowth\":85}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-291864-CyberSec.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[121,189,37,114,194,76,93,143,95,111,33,169,20,116,76,148,140,51,137,8],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-485794-CarmichaelSecurity.cct\",\"type\":\"Total Ways to Sum\",\"data\":76,\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"47.7.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":190,\"hackDifficulty\":190,\"minDifficulty\":63,\"moneyAvailable\":12227108643.5,\"moneyMax\":611355432175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1040,\"serverGrowth\":94}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"56.8.9.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":182,\"hackDifficulty\":182,\"minDifficulty\":61,\"moneyAvailable\":807673892.5,\"moneyMax\":40383694625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":992,\"serverGrowth\":97}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-573904.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[113,181,143,50,8,166,30,50,98,52,48,82,14,85,131,160,124,45,165,27,164,59,21,83,34,28,12,198,89,35,155,76,58,70,120,54,138,123,13,5,145,125,14,198],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-292249.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((()))))(a)(()aa(\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-677662.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[6,[15,188,43,7,169,77,160,37,48,28,76,197,116,168,92,150,177,6,165,55,137,101,9,177,135,151,53,33,64,164,159,75,174,63,125,62,67,96,50,162,5,166,74,139,29,12,99,77]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-603236.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[20,27],[2,4],[4,11],[19,27],[15,25],[19,20],[20,29],[23,26],[23,27],[25,32],[2,11],[6,13],[17,27],[9,17],[10,17]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"72.7.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":500000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1227,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"97.8.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":158,\"hackDifficulty\":158,\"minDifficulty\":53,\"moneyAvailable\":597723140,\"moneyMax\":29886157000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":929,\"serverGrowth\":74}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-722369.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[11,9],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-973534-NationalSecurityAgency.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"96457\",-18],\"reward\":{\"name\":\"National Security Agency\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"52.0.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":178,\"hackDifficulty\":178,\"minDifficulty\":59,\"moneyAvailable\":417125852.5,\"moneyMax\":20856292625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":968,\"serverGrowth\":56}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-263387-NationalSecurityAgency.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[191,150,172,93,35,81,102,2,140,13,198],\"reward\":{\"name\":\"National Security Agency\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"8.8.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":152,\"hackDifficulty\":152,\"minDifficulty\":51,\"moneyAvailable\":378758531.5,\"moneyMax\":18937926575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":914,\"serverGrowth\":62}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-954249-Netburners.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":735102964,\"reward\":{\"name\":\"Netburners\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-113414.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[12,3],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"11.8.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":176,\"hackDifficulty\":176,\"minDifficulty\":59,\"moneyAvailable\":365547403,\"moneyMax\":18277370150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":828,\"serverGrowth\":73}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-325578-Netburners.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[135,17,36,182,191,54,117,195,99,143,159,146,55,65,169,52,47,159,142,75,23,78,160,65,112,114,162,153,132,161,139,81,177,70,115,111,159,7,148,71,166]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-607250.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[9,9,4,10,-2,9,-3,3,-8,-2,5,-3,5,-6,-7,10,-3,10,-8,-4,-10,-4,-4,9,3,-7,3,-8,-4,1],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-738655.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[2,6],[4,6,7]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-858822.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a)a()a\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-460906.cct\",\"type\":\"Array Jumping Game\",\"data\":[10,1,0,6,3,1,10,5,10,9,1,9],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"85.1.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":166,\"hackDifficulty\":166,\"minDifficulty\":55,\"moneyAvailable\":351509369.5,\"moneyMax\":17575468475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":778,\"serverGrowth\":69}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-395691.cct\",\"type\":\"Array Jumping Game\",\"data\":[2,5,10,1,9,2,2,4,10,0,0,2],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"45.9.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":190,\"hackDifficulty\":190,\"minDifficulty\":63,\"moneyAvailable\":487503516.5,\"moneyMax\":24375175825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":884,\"serverGrowth\":88}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-734857-CarmichaelSecurity.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":781679891,\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-197675-Netburners.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[15,136,9,120,200,166,134,46,186,79,197,17,32,156,29,173,94],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"82.7.0.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":170,\"hackDifficulty\":170,\"minDifficulty\":57,\"moneyAvailable\":570577553.5,\"moneyMax\":28528877675,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":894,\"serverGrowth\":89}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-19454-TheBlackHand.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[20,24],[18,26],[7,9],[14,15],[23,30],[9,18],[12,17],[17,26],[17,19],[17,19],[6,7],[6,7],[21,22]],\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"52.2.3.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":158,\"hackDifficulty\":158,\"minDifficulty\":53,\"moneyAvailable\":396782667.5,\"moneyMax\":19839133375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":807,\"serverGrowth\":64}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-630136-CyberSec.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[10,12],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"36.6.0.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":132,\"hackDifficulty\":132,\"minDifficulty\":44,\"moneyAvailable\":313977687.5,\"moneyMax\":15698884375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":841,\"serverGrowth\":76}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"94.7.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":154,\"hackDifficulty\":154,\"minDifficulty\":51,\"moneyAvailable\":407087650,\"moneyMax\":20354382500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":932,\"serverGrowth\":79}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-159557.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[5,4],[1,1,2],[4,7,5,8],[6,7,9,1,2],[2,6,6,6,7,4]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"30.4.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":128,\"hackDifficulty\":128,\"minDifficulty\":43,\"moneyAvailable\":386513038.5,\"moneyMax\":19325651925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":859,\"serverGrowth\":75}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-6350.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":120736477,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-848503-MegaCorp.cct\",\"type\":\"Total Ways to Sum\",\"data\":83,\"reward\":{\"name\":\"MegaCorp\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-745182-CarmichaelSecurity.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[15,18],[16,26],[13,14],[23,28],[22,25],[2,4],[18,25],[11,18],[10,20],[13,15],[22,24],[4,14],[23,29],[13,20],[7,17],[15,20],[23,30],[7,12],[12,17],[3,10]],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-850415-Sector-12.cct\",\"type\":\"Array Jumping Game\",\"data\":[1,7,6,0,0,1,0],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-78160-CyberSec.cct\",\"type\":\"Array Jumping Game\",\"data\":[8,3,0,1,4],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"80.0.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":162,\"hackDifficulty\":162,\"minDifficulty\":54,\"moneyAvailable\":554393338.5,\"moneyMax\":27719666925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":891,\"serverGrowth\":58}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-128466-FourSigma.cct\",\"type\":\"Total Ways to Sum\",\"data\":62,\"reward\":{\"name\":\"Four Sigma\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"47.6.8.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":172,\"hackDifficulty\":172,\"minDifficulty\":57,\"moneyAvailable\":451800354.5,\"moneyMax\":22590017725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":898,\"serverGrowth\":69}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-277791.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-8,-1,-1,9,-5,-7,-7,-6,0,-6,4,8,6,-7,-1,-2,10,8,-4,-9,-1,2,4,4,9,-7,7,-7,1,3,8,9,0,4],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"77.7.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":114,\"hackDifficulty\":114,\"minDifficulty\":38,\"moneyAvailable\":460241562,\"moneyMax\":23012078100,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":803,\"serverGrowth\":68}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-463791-MegaCorp.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":927664897,\"reward\":{\"name\":\"MegaCorp\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-130800.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[33,2,38],[4,26,42],[26,33,5],[11,5,26],[11,36,14],[23,13,38],[46,10,16],[37,10,6],[6,41,15],[27,45,42]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-357538.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[17,169,5,178,138,49,136,95,60,125,132,196,3,150,7,100,54,29,103],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"83.8.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":132,\"hackDifficulty\":132,\"minDifficulty\":44,\"moneyAvailable\":498973249,\"moneyMax\":24948662450,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":802,\"serverGrowth\":70}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"80.0.7.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":154,\"hackDifficulty\":154,\"minDifficulty\":51,\"moneyAvailable\":397566974.5,\"moneyMax\":19878348725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":808,\"serverGrowth\":75}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-686275.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[12,7],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-131592.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":851869028,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"9.6.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"icarus\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":160,\"hackDifficulty\":160,\"minDifficulty\":53,\"moneyAvailable\":701988494,\"moneyMax\":35099424700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":801,\"serverGrowth\":61}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-436808-CarmichaelSecurity.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":345653441,\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-902416.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[15,22],[24,25],[14,18],[13,16],[22,30],[16,23],[11,17],[25,32],[5,12],[19,28],[10,11],[25,26],[3,7]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"43.7.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":162,\"hackDifficulty\":162,\"minDifficulty\":54,\"moneyAvailable\":782720497.5,\"moneyMax\":39136024875,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":770,\"serverGrowth\":86}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-767675.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[11,3],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-950953.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[18,27],[23,26],[10,20],[21,22]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-993089-TheBlackHand.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[6,3,9,7,-6,-4,4,7,-5,-4,3,9,-7,-6,3,2],\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-1525-CarmichaelSecurity.cct\",\"type\":\"Total Ways to Sum\",\"data\":94,\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"85.1.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":122,\"hackDifficulty\":122,\"minDifficulty\":41,\"moneyAvailable\":594534943.5,\"moneyMax\":29726747175,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":845,\"serverGrowth\":85}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-42804-CyberSec.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[93,44,56,7,104,63,78,22,49,137,21,179,108,175,125,17,89,100,131,64,60,123,134,171,69,162,34,103,77,111,64,94,117,195,111,76,103,16,145,15,138,186,80,110,175,132,180,81],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-982281.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a)a)((()a))())a)\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-420416-NationalSecurityAgency.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[191,20,89,196,188,60,144,178,135,59,21,133,107,65,92,121],\"reward\":{\"name\":\"National Security Agency\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-551862.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0,0,0],[0,1,0,0,0,0,0],[0,0,0,0,1,0,0],[0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"79.0.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":150,\"hackDifficulty\":150,\"minDifficulty\":50,\"moneyAvailable\":710144020.5,\"moneyMax\":35507201025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":824,\"serverGrowth\":70}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-156413.cct\",\"type\":\"Array Jumping Game\",\"data\":[10,0,4,6,9,2,3,8,0,2,1,0],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"78.5.5.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":142,\"hackDifficulty\":142,\"minDifficulty\":47,\"moneyAvailable\":533322323,\"moneyMax\":26666116150,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":814,\"serverGrowth\":72}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"2.8.4.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":130,\"hackDifficulty\":130,\"minDifficulty\":43,\"moneyAvailable\":351108457,\"moneyMax\":17555422850,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":726,\"serverGrowth\":59}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-42705-NiteSec.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[6,6,7,9,-1,0,7,-7,10,-6,8,8,7,-10,2],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-70068.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[9,7],[9,9,8],[9,6,9,8],[4,3,5,4,2],[6,8,5,8,5,8]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"61.5.6.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":320520413,\"moneyMax\":16026020650,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":498,\"serverGrowth\":56}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-136286-FourSigma.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[6],[1,9],[7,5,7],[5,1,4,4],[3,7,7,1,9],[5,3,4,2,7,4],[5,7,7,4,5,3,1],[8,8,7,9,9,9,6,7],[7,8,8,4,5,5,3,2,8]],\"reward\":{\"name\":\"Four Sigma\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"85.1.4.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":104,\"hackDifficulty\":104,\"minDifficulty\":35,\"moneyAvailable\":362392197.5,\"moneyMax\":18119609875,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":561,\"serverGrowth\":59}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-724562-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[2,[187,162,96,111,54,98,139,188,3,187,86,157,92,154,176,29,150,167,159,106,152,37,19,1,111,141,194,200,151,191,99,53,101,124,1,124,13,108,186,158,111,65,68,52,15,45]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-292238.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[4,4],[6,5,5],[5,2,2,8],[7,1,9,8,6]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-775400-CarmichaelSecurity.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[9,42,102,139,99,163,39,44,55,41,64,178,161,188,99,77],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"63.6.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"aevum-police\",26,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":175398.72000000963,\"onlineMoneyMade\":103790360,\"onlineRunningTime\":121201.8099987992,\"pid\":2841077,\"ramUsage\":6.05,\"server\":\"aevum-police\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000004,\"pid\":4773671,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":368949}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":368950}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":368951}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"aevum-police\",\"moduleSequenceNumber\":402953}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///efddad72-4a44-4bab-8df5-9218dbeace2c\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///efddad72-4a44-4bab-8df5-9218dbeace2c\"}],\"ramUsage\":6.05,\"server\":\"aevum-police\",\"moduleSequenceNumber\":403052}}],\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":146,\"hackDifficulty\":49.004,\"minDifficulty\":49,\"moneyAvailable\":7236809500,\"moneyMax\":7236809500,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":405,\"serverGrowth\":48}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-998015.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[117,78,64,50,42,121,112,190,153,59,199,115,23,39,74,62,5,147,140,138,112,52,127],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-397432.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[37,137,59,17,117,77,26,11,110,77,182,151,58,102,103,134,131,163,90,1,125,113,193,27],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-157085.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[18,24,10,28,38,31,15,18,39,36],[35,4,49,8,3,26,29,31,15,28],[15,10,47,48,25,17,46,16,42,23],[48,10,21,41,38,38,7,31,41,27],[28,7,31,44,10,22,6,8,47,31],[49,49,1,5,7,29,46,30,34,30],[12,36,8,44,47,10,1,49,34,20],[16,42,32,33,39,45,9,40,25,25],[42,13,12,32,38,8,35,18,26,7]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-31571-Sector-12.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[2,9],[4,9,5],[2,1,1,3],[3,7,8,2,6],[1,7,1,3,7,8]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"67.0.1.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":101.49999999999999,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"rothman-uni\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3678.299999999989,\"onlineMoneyMade\":0,\"onlineRunningTime\":121201.8099987992,\"pid\":2841090,\"ramUsage\":6.05,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"rothman-uni\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3766.5599999999995,\"onlineMoneyMade\":0,\"onlineRunningTime\":121201.8099987992,\"pid\":2841091,\"ramUsage\":6.05,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"rothman-uni\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4127.760000000009,\"onlineMoneyMade\":3955177,\"onlineRunningTime\":121201.8099987992,\"pid\":2841092,\"ramUsage\":6.05,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"rothman-uni\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4433.714999999987,\"onlineMoneyMade\":3001315,\"onlineRunningTime\":121201.8099987992,\"pid\":2841093,\"ramUsage\":6.05,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"rothman-uni\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6383.895000000026,\"onlineMoneyMade\":40969330,\"onlineRunningTime\":121201.8099987992,\"pid\":2841094,\"ramUsage\":6.05,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"rothman-uni\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4581.719999999982,\"onlineMoneyMade\":9363099,\"onlineRunningTime\":121201.8099987992,\"pid\":2841095,\"ramUsage\":6.05,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"rothman-uni\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6673.821000000008,\"onlineMoneyMade\":62225774,\"onlineRunningTime\":121201.8099987992,\"pid\":2841096,\"ramUsage\":6.05,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"rothman-uni\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4577.148000000015,\"onlineMoneyMade\":621460,\"onlineRunningTime\":121201.8099987992,\"pid\":2841097,\"ramUsage\":6.05,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"rothman-uni\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10435.623000000147,\"onlineMoneyMade\":88754511,\"onlineRunningTime\":121201.8099987992,\"pid\":2841098,\"ramUsage\":6.05,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"rothman-uni\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8250.606000000013,\"onlineMoneyMade\":31712514,\"onlineRunningTime\":121201.8099987992,\"pid\":2841099,\"ramUsage\":6.05,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"rothman-uni\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10313.17499999997,\"onlineMoneyMade\":14342524,\"onlineRunningTime\":121201.8099987992,\"pid\":2841100,\"ramUsage\":6.05,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1098.2100000001126,\"pid\":4754159,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":988.0100000000876,\"pid\":4756207,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":988.0100000000876,\"pid\":4756208,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":857.810000000058,\"pid\":4758644,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":857.810000000058,\"pid\":4758645,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":847.8100000000558,\"pid\":4758840,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":747.6100000000331,\"pid\":4760555,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":747.6100000000331,\"pid\":4760556,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":507.20999999997974,\"pid\":4764540,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":507.20999999997974,\"pid\":4764541,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":507.20999999997974,\"pid\":4764543,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":326.80999999999,\"pid\":4767928,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":326.80999999999,\"pid\":4767929,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":236.80999999999509,\"pid\":4769527,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":236.80999999999509,\"pid\":4769528,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":156.80999999999963,\"pid\":4770982,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":156.80999999999963,\"pid\":4770983,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.81000000000041,\"pid\":4772591,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.81000000000041,\"pid\":4772592,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.81000000000041,\"pid\":4772593,\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":268793}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":268794}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":268795}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":402961}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///d64a70d8-5431-4244-b68c-eb2614238c4b\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///d64a70d8-5431-4244-b68c-eb2614238c4b\"}],\"ramUsage\":6.05,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":403075}}],\"serversOnNetwork\":[\"avmnite-02h\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":30.021999999999988,\"minDifficulty\":30,\"moneyAvailable\":5924666118,\"moneyMax\":5929140800,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":391,\"serverGrowth\":39}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-889702-Netburners.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[22,21,23,7,13,5,49,12,3,37,14,31],[22,36,31,21,1,39,24,42,30,48,17,44],[28,44,24,33,49,24,3,46,12,12,15,28],[3,3,39,24,48,35,42,33,44,17,19,31],[33,34,4,14,40,4,7,13,41,48,3,17],[10,33,8,35,14,41,20,20,25,40,8,28],[18,49,1,7,16,22,25,26,6,12,20,42],[39,31,9,35,20,45,37,47,32,41,2,9]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"65.1.8.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":142,\"hackDifficulty\":142,\"minDifficulty\":47,\"moneyAvailable\":452026298.5,\"moneyMax\":22601314925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":729,\"serverGrowth\":84}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-712076.cct\",\"type\":\"Total Ways to Sum\",\"data\":39,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-356747.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[76,171,45,48,31,20,23,62,180,159,98,146,155,79,38,86,94,164,192,86,40,187,126,120,174,144,13,16,2,61,71,83,181,34],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-805423.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[6,4],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-773214.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[5,9,41,39,22,15,24,44,30,42],[8,43,27,22,41,7,29,1,40,33],[37,34,18,16,10,25,4,20,43,6],[49,26,1,14,15,6,19,14,6,19],[31,24,30,38,29,20,49,20,9,11],[27,5,7,33,24,18,14,25,45,18],[42,6,33,47,41,6,13,3,49,9]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-765111.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,1,0,0,0],[0,0,0,0,1,1,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-890811-FourSigma.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"46736070\",84],\"reward\":{\"name\":\"Four Sigma\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"98.5.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"summit-uni\",10,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":74067.84000000636,\"onlineMoneyMade\":107849644,\"onlineRunningTime\":121201.8099987992,\"pid\":2841089,\"ramUsage\":6.05,\"server\":\"summit-uni\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000004,\"pid\":4773672,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":368959}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":368960}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":368961}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"summit-uni\",\"moduleSequenceNumber\":402957}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///047f7e02-6981-4b74-b020-aa9b015248ed\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///047f7e02-6981-4b74-b020-aa9b015248ed\"}],\"ramUsage\":6.05,\"server\":\"summit-uni\",\"moduleSequenceNumber\":403064}}],\"serversOnNetwork\":[\"comptek\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112,\"hackDifficulty\":37.026000000000025,\"minDifficulty\":37,\"moneyAvailable\":6094964400,\"moneyMax\":6094964400,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":431,\"serverGrowth\":49}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-956337-NiteSec.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((()))())))(()((()(\",\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"10.7.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":158,\"hackDifficulty\":158,\"minDifficulty\":53,\"moneyAvailable\":253770803.5,\"moneyMax\":12688540175,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":612,\"serverGrowth\":64}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-294959-CyberSec.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":111265001,\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-586202.cct\",\"type\":\"Array Jumping Game\",\"data\":[10,0,10,8,0,4,0,2,6,0,0,3,9,6,2,4,5,9,6,3,3,2,10],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"40.3.8.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":44.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"catalyst\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3696.3899999999885,\"onlineMoneyMade\":230487,\"onlineRunningTime\":121201.8099987992,\"pid\":2841072,\"ramUsage\":6.05,\"server\":\"catalyst\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"catalyst\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3773.286,\"onlineMoneyMade\":0,\"onlineRunningTime\":121201.8099987992,\"pid\":2841073,\"ramUsage\":6.05,\"server\":\"catalyst\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"catalyst\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4068.7920000000104,\"onlineMoneyMade\":3176799,\"onlineRunningTime\":121201.8099987992,\"pid\":2841074,\"ramUsage\":6.05,\"server\":\"catalyst\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"catalyst\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4528.160999999991,\"onlineMoneyMade\":3690071,\"onlineRunningTime\":121201.8099987992,\"pid\":2841075,\"ramUsage\":6.05,\"server\":\"catalyst\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"catalyst\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6299.970000000026,\"onlineMoneyMade\":37063931,\"onlineRunningTime\":121201.8099987992,\"pid\":2841076,\"ramUsage\":6.05,\"server\":\"catalyst\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1378.8100000001766,\"pid\":4749190,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1098.2100000001126,\"pid\":4754153,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":988.2100000000877,\"pid\":4756201,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":988.2100000000877,\"pid\":4756202,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":847.8100000000558,\"pid\":4758833,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":847.8100000000558,\"pid\":4758834,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":747.6100000000331,\"pid\":4760549,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":747.6100000000331,\"pid\":4760550,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":368944}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":368945}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":368946}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"catalyst\",\"moduleSequenceNumber\":402951}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ffc67603-134a-42d6-bf66-4e5e83273f49\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ffc67603-134a-42d6-bf66-4e5e83273f49\"}],\"ramUsage\":6.05,\"server\":\"catalyst\",\"moduleSequenceNumber\":403051}}],\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":130,\"hackDifficulty\":43.01400000000002,\"minDifficulty\":43,\"moneyAvailable\":7862616628,\"moneyMax\":7864230450,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":420,\"serverGrowth\":36}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-247746-TheBlackHand.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[7,17],[23,27],[24,29],[4,5],[6,9],[24,28],[4,12],[18,20],[3,13],[21,23],[3,6],[22,28],[9,13]],\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"94.2.2.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":44.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"the-hub\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3678.299999999989,\"onlineMoneyMade\":0,\"onlineRunningTime\":121201.8099987992,\"pid\":2841101,\"ramUsage\":6.05,\"server\":\"the-hub\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"the-hub\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3813.642,\"onlineMoneyMade\":557706,\"onlineRunningTime\":121201.8099987992,\"pid\":2841102,\"ramUsage\":6.05,\"server\":\"the-hub\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"the-hub\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4009.8240000000096,\"onlineMoneyMade\":2382582,\"onlineRunningTime\":121201.8099987992,\"pid\":2841103,\"ramUsage\":6.05,\"server\":\"the-hub\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"the-hub\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4417.9739999999865,\"onlineMoneyMade\":2847816,\"onlineRunningTime\":121201.8099987992,\"pid\":2841104,\"ramUsage\":6.05,\"server\":\"the-hub\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"the-hub\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6148.905000000024,\"onlineMoneyMade\":30193845,\"onlineRunningTime\":121201.8099987992,\"pid\":2841105,\"ramUsage\":6.05,\"server\":\"the-hub\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1378.8100000001766,\"pid\":4749193,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1098.2100000001126,\"pid\":4754162,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":998.0100000000899,\"pid\":4756092,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":998.0100000000899,\"pid\":4756093,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":857.810000000058,\"pid\":4758647,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":857.810000000058,\"pid\":4758648,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":747.6100000000331,\"pid\":4760558,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":747.6100000000331,\"pid\":4760559,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":207424}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":207425}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":207426}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"the-hub\",\"moduleSequenceNumber\":402963}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///faf2f13f-fcc9-4128-928f-5f0a7abb9a18\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///faf2f13f-fcc9-4128-928f-5f0a7abb9a18\"}],\"ramUsage\":6.05,\"server\":\"the-hub\",\"moduleSequenceNumber\":403080}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":24.004,\"minDifficulty\":24,\"moneyAvailable\":4044835929.859406,\"moneyMax\":4045563300,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":316,\"serverGrowth\":52}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-796666.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[133,10,160,160,176,32,44,46,107,69,109,33,199,121,96,68,106,7,6,28,86],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-688471.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[14,6],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"47.6.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":207414}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":207415}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":207416}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"comptek\",\"moduleSequenceNumber\":402959}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"comptek\",\"moduleSequenceNumber\":402960}}],\"serversOnNetwork\":[\"omega-net\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":120,\"hackDifficulty\":40.02200000000001,\"minDifficulty\":40,\"moneyAvailable\":6041084875,\"moneyMax\":6041084875,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":317,\"serverGrowth\":57}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-185993.cct\",\"type\":\"Total Ways to Sum\",\"data\":29,\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-211078.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((a()a(((a))\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-561056.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[45,63,167,178,91,99,12,193,17,122,79,140,161,123,45,11,200,1,137,81,134,113,170,140,99,133,21,190],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-735520-NationalSecurityAgency.cct\",\"type\":\"Array Jumping Game\",\"data\":[8,5,1,0,0,0,0,0,0,2,2,2,7,7,0,4,0,7],\"reward\":{\"name\":\"National Security Agency\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"92.6.7.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":99.74999999999999,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"netlink\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3678.299999999989,\"onlineMoneyMade\":0,\"onlineRunningTime\":121201.8099987992,\"pid\":2841078,\"ramUsage\":6.05,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"netlink\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3766.5599999999995,\"onlineMoneyMade\":0,\"onlineRunningTime\":121201.8099987992,\"pid\":2841079,\"ramUsage\":6.05,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"netlink\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4068.7920000000104,\"onlineMoneyMade\":3139843,\"onlineRunningTime\":121201.8099987992,\"pid\":2841080,\"ramUsage\":6.05,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"netlink\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4433.714999999987,\"onlineMoneyMade\":2947887,\"onlineRunningTime\":121201.8099987992,\"pid\":2841081,\"ramUsage\":6.05,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"netlink\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6216.045000000025,\"onlineMoneyMade\":33241134,\"onlineRunningTime\":121201.8099987992,\"pid\":2841082,\"ramUsage\":6.05,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"netlink\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4620.329999999982,\"onlineMoneyMade\":10507243,\"onlineRunningTime\":121201.8099987992,\"pid\":2841083,\"ramUsage\":6.05,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"netlink\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6761.496000000004,\"onlineMoneyMade\":66825877,\"onlineRunningTime\":121201.8099987992,\"pid\":2841084,\"ramUsage\":6.05,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"netlink\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4373.352000000013,\"onlineMoneyMade\":306772,\"onlineRunningTime\":121201.8099987992,\"pid\":2841085,\"ramUsage\":6.05,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"netlink\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10575.609000000146,\"onlineMoneyMade\":95344194,\"onlineRunningTime\":121201.8099987992,\"pid\":2841086,\"ramUsage\":6.05,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"netlink\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8104.752000000013,\"onlineMoneyMade\":29276795,\"onlineRunningTime\":121201.8099987992,\"pid\":2841087,\"ramUsage\":6.05,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"netlink\",6,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10256.459999999968,\"onlineMoneyMade\":11306980,\"onlineRunningTime\":121201.8099987992,\"pid\":2841088,\"ramUsage\":6.05,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1098.2100000001126,\"pid\":4754156,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":988.2100000000877,\"pid\":4756204,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":988.2100000000877,\"pid\":4756205,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":857.810000000058,\"pid\":4758641,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":857.810000000058,\"pid\":4758642,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":847.8100000000558,\"pid\":4758837,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":747.6100000000331,\"pid\":4760552,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":747.6100000000331,\"pid\":4760553,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":537.2099999999853,\"pid\":4764044,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":507.20999999997974,\"pid\":4764537,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":327.00999999999,\"pid\":4767925,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":327.00999999999,\"pid\":4767926,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":236.80999999999509,\"pid\":4769525,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":236.80999999999509,\"pid\":4769526,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":156.80999999999963,\"pid\":4770979,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":156.80999999999963,\"pid\":4770980,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.81000000000041,\"pid\":4772587,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.81000000000041,\"pid\":4772588,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.81000000000041,\"pid\":4772589,\"ramUsage\":1.7,\"server\":\"netlink\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":368954}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":368955}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":368956}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"netlink\",\"moduleSequenceNumber\":402955}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///cb53684b-67d8-4977-b5d3-6cdccb9af33b\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///cb53684b-67d8-4977-b5d3-6cdccb9af33b\"}],\"ramUsage\":6.05,\"server\":\"netlink\",\"moduleSequenceNumber\":403063}}],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":142,\"hackDifficulty\":47.004000000000005,\"minDifficulty\":47,\"moneyAvailable\":6874449420,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":405,\"serverGrowth\":64}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-731111.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[18,26],[12,21],[13,16],[4,5],[3,6],[3,4],[21,26],[22,27],[4,6],[13,15],[1,8],[14,21],[18,27],[2,7]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-281335.cct\",\"type\":\"Total Ways to Sum\",\"data\":11,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"10.1.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":156062}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":156063}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":156064}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":402965}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":402966}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":118,\"hackDifficulty\":39,\"minDifficulty\":39,\"moneyAvailable\":2000806800,\"moneyMax\":2000806800,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":292,\"serverGrowth\":49}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-657915.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"591413781372\",-76],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-328019.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,8,5,7,8,1,10,4],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-185367-FourSigma.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-2,8,7,10,-3,8,-4,-6,4,-5,-5,-8,2,2,-8,8,-10,9],\"reward\":{\"name\":\"Four Sigma\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"78.8.9.1\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":222}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":223}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":224}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"n00dles\",\"moduleSequenceNumber\":402995}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"n00dles\",\"moduleSequenceNumber\":402996}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":2,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-518178.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[184,200,114,12,45,166,117,173,50,92,8,131,138,196,59,104,66,129,171,70,8,116,35]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-905769-TheBlackHand.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[5,[155,53,181,98,197,194,91,136,82,200,15,181,47,139,102,135,153,177,78,45]],\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"17.8.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":11.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"foodnstuff\",10,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":91869.12000000941,\"onlineMoneyMade\":161507234,\"onlineRunningTime\":121201.8099987992,\"pid\":2841122,\"ramUsage\":6.05,\"server\":\"foodnstuff\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.409999999999975,\"pid\":4773508,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.409999999999975,\"pid\":4773509,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":227}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":228}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":229}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///e18cd87e-8d95-4e51-998d-3e6528662921\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///e18cd87e-8d95-4e51-998d-3e6528662921\"}],\"ramUsage\":5.5,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":402993}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///cfaac2e2-6b9d-4b69-bffd-bba8868d2a4f\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///cfaac2e2-6b9d-4b69-bffd-bba8868d2a4f\"}],\"ramUsage\":6.05,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":403097}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":49711208.487935774,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-588673.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[88,120,121,102,17,3],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"55.3.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":6.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"sigma-cosmetics\",10,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":79033.92000000791,\"onlineMoneyMade\":121762446,\"onlineRunningTime\":121201.8099987992,\"pid\":2841121,\"ramUsage\":6.05,\"server\":\"sigma-cosmetics\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":232}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":233}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":234}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///46d4fedb-f02d-44c4-a70c-b450dbbb6e1a\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///46d4fedb-f02d-44c4-a70c-b450dbbb6e1a\"}],\"ramUsage\":5.5,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":402991}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///b06cc6fc-68fb-443d-b63a-de93d9625fea\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///b06cc6fc-68fb-443d-b63a-de93d9625fea\"}],\"ramUsage\":6.05,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":403096}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":57470957.29405839,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-112152.cct\",\"type\":\"Total Ways to Sum\",\"data\":54,\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-900822.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0],[0,0,0,0,1,1,0,0],[0,0,0,0,0,1,0,1],[0,0,0,0,0,0,0,0],[0,0,0,1,0,1,0,0],[0,0,1,1,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-816278-CyberSec.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()(a((a()()\",\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"54.6.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"joesguns\",10,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":61871.040000004934,\"onlineMoneyMade\":56699784,\"onlineRunningTime\":121201.8099987992,\"pid\":2841120,\"ramUsage\":6.05,\"server\":\"joesguns\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.610000000000004,\"pid\":4773678,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":237}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":238}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":239}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///e6e8b4c0-20bc-4f3c-87fe-4faf7236afd0\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///e6e8b4c0-20bc-4f3c-87fe-4faf7236afd0\"}],\"ramUsage\":5.5,\"server\":\"joesguns\",\"moduleSequenceNumber\":402989}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///089a3d94-8663-467a-b386-1575aa50f9e9\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///089a3d94-8663-467a-b386-1575aa50f9e9\"}],\"ramUsage\":6.05,\"server\":\"joesguns\",\"moduleSequenceNumber\":403095}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":61511810.279133946,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-899976.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[112,13,94,64,38,92,20,127,15,145,34,111,33,90,19,41,144,161,105,185,63,156,117,51,39,171,111,6,66,186,38,43,132,63,62,160,125]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-932943-NationalSecurityAgency.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[108,20,90,192,24,146,102,117,91,97,187,75,153,26,130,78,80,158,51,136,68,127,151,90,69,160,73,46,79,125,102,8,168],\"reward\":{\"name\":\"National Security Agency\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-220549.cct\",\"type\":\"Total Ways to Sum\",\"data\":24,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"27.1.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":27.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"zer0\",26,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":227115.84000001862,\"onlineMoneyMade\":160193268,\"onlineRunningTime\":121201.8099987992,\"pid\":2841115,\"ramUsage\":6.05,\"server\":\"zer0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.609999999999975,\"pid\":4773499,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.609999999999975,\"pid\":4773500,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":11}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":242}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":243}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":244}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///41f67501-adb0-474d-8a22-dfec2f435eca\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///41f67501-adb0-474d-8a22-dfec2f435eca\"}],\"ramUsage\":5.5,\"server\":\"zer0\",\"moduleSequenceNumber\":402979}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///3ecfb0eb-060a-41ae-8fde-a2493de2d65a\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///3ecfb0eb-060a-41ae-8fde-a2493de2d65a\"}],\"ramUsage\":6.05,\"server\":\"zer0\",\"moduleSequenceNumber\":403090}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":17,\"minDifficulty\":17,\"moneyAvailable\":187500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-131270-TheBlackHand.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[12,2],\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"50.1.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":11.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"nectar-net\",10,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":81829.44000000836,\"onlineMoneyMade\":117397958,\"onlineRunningTime\":121201.8099987992,\"pid\":2841119,\"ramUsage\":6.05,\"server\":\"nectar-net\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.609999999999975,\"pid\":4773505,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.609999999999975,\"pid\":4773506,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":247}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":248}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":249}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///4a9327b3-de08-4a10-a5f9-1d8a8addc012\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///4a9327b3-de08-4a10-a5f9-1d8a8addc012\"}],\"ramUsage\":5.5,\"server\":\"nectar-net\",\"moduleSequenceNumber\":402987}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///bc497a57-bb5c-49aa-b113-e780db19134a\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///bc497a57-bb5c-49aa-b113-e780db19134a\"}],\"ramUsage\":6.05,\"server\":\"nectar-net\",\"moduleSequenceNumber\":403094}}],\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":13.004000000000001,\"minDifficulty\":13,\"moneyAvailable\":68006278,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-138561.cct\",\"type\":\"Total Ways to Sum\",\"data\":37,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-602399.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[4,3],[5,4,9],[7,6,8,8],[9,9,4,1,4],[5,7,3,7,2,3],[6,9,1,5,7,1,8],[8,8,5,9,4,6,5,6],[9,3,8,5,8,7,1,7,2],[9,5,3,8,7,7,6,8,5,1],[8,4,3,7,3,7,1,7,2,6,5]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-831965-NationalSecurityAgency.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,1,0,0,0,0,1],[1,0,1,0,0,0,0,0,0,0,1],[0,0,1,0,0,0,0,0,0,0,1],[0,0,0,0,0,1,1,0,0,1,0],[0,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,1,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,0,1],[1,0,1,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"National Security Agency\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"28.0.6.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"neo-net\",26,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":140797.4400000042,\"onlineMoneyMade\":57106622,\"onlineRunningTime\":121201.8099987992,\"pid\":2841116,\"ramUsage\":6.05,\"server\":\"neo-net\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.610000000000004,\"pid\":4773676,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":252}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":253}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":254}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///76b286fb-812f-4cb2-afd5-b9265585e29e\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///76b286fb-812f-4cb2-afd5-b9265585e29e\"}],\"ramUsage\":5.5,\"server\":\"neo-net\",\"moduleSequenceNumber\":402981}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///eb94d9ca-0de3-4774-82d2-33898293158f\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///eb94d9ca-0de3-4774-82d2-33898293158f\"}],\"ramUsage\":6.05,\"server\":\"neo-net\",\"moduleSequenceNumber\":403091}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":17,\"minDifficulty\":17,\"moneyAvailable\":124798975,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-397589.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"7010784183\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"96.1.3.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":44.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"silver-helix\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3696.3899999999885,\"onlineMoneyMade\":230472,\"onlineRunningTime\":121201.8099987992,\"pid\":2841107,\"ramUsage\":6.05,\"server\":\"silver-helix\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"silver-helix\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3813.642,\"onlineMoneyMade\":552359,\"onlineRunningTime\":121201.8099987992,\"pid\":2841108,\"ramUsage\":6.05,\"server\":\"silver-helix\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"silver-helix\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3950.8560000000098,\"onlineMoneyMade\":1577755,\"onlineRunningTime\":121201.8099987992,\"pid\":2841109,\"ramUsage\":6.05,\"server\":\"silver-helix\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"silver-helix\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4449.455999999988,\"onlineMoneyMade\":3059668,\"onlineRunningTime\":121201.8099987992,\"pid\":2841110,\"ramUsage\":6.05,\"server\":\"silver-helix\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"silver-helix\",7,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6299.970000000027,\"onlineMoneyMade\":37097988,\"onlineRunningTime\":121201.8099987992,\"pid\":2841111,\"ramUsage\":6.05,\"server\":\"silver-helix\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1378.8100000001766,\"pid\":4749196,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1098.2100000001126,\"pid\":4754165,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":988.0100000000876,\"pid\":4756210,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":988.0100000000876,\"pid\":4756211,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":847.8100000000558,\"pid\":4758843,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":847.8100000000558,\"pid\":4758844,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":747.6100000000331,\"pid\":4760561,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":747.6100000000331,\"pid\":4760562,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":257}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":258}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":259}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///42d263cd-d2df-4b2d-9ada-54567e8a1929\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///42d263cd-d2df-4b2d-9ada-54567e8a1929\"}],\"ramUsage\":5.5,\"server\":\"silver-helix\",\"moduleSequenceNumber\":402971}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///5c390c52-285f-43db-ac78-32410b5e2fda\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///5c390c52-285f-43db-ac78-32410b5e2fda\"}],\"ramUsage\":6.05,\"server\":\"silver-helix\",\"moduleSequenceNumber\":403086}}],\"serversOnNetwork\":[\"zer0\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":20.008000000000003,\"minDifficulty\":20,\"moneyAvailable\":1123686748.0205326,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-262516.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[10,6],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-616136-Netburners.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[12],[33],[45],[5],[3],[40],[7],[39],[9],[2],[38]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-348213-CyberSec.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"7077325738\",92],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"70.0.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":11.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"hong-fang-tea\",10,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":81137.28000000822,\"onlineMoneyMade\":115785768,\"onlineRunningTime\":121201.8099987992,\"pid\":2841118,\"ramUsage\":6.05,\"server\":\"hong-fang-tea\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.609999999999975,\"pid\":4773502,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.609999999999975,\"pid\":4773503,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":262}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":263}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":264}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///42bda810-6e30-442c-a6c4-c6755fef8337\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///42bda810-6e30-442c-a6c4-c6755fef8337\"}],\"ramUsage\":5.5,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":402985}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///2d672124-1610-4596-b433-45d178a5d9f5\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///2d672124-1610-4596-b433-45d178a5d9f5\"}],\"ramUsage\":6.05,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":403093}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":75000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-701508.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-4,-1,0,-9,2,-3,8,-6,-2,9,-1,-9,-9,9,7,1,1,3,-3,-9,9,-1,0,7,-2,2,3,-9,0,-3,-8,-9,-10,6,-4],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-551714.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,1,0],[0,0,0,0,1,1,0,0,0,0,0],[0,0,0,0,0,1,0,0,0,0,0],[1,0,0,0,1,0,0,0,0,0,0],[0,1,0,0,1,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-188012.cct\",\"type\":\"Total Ways to Sum\",\"data\":89,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"8.3.4.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"harakiri-sushi\",10,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":62475.84000000505,\"onlineMoneyMade\":55785662,\"onlineRunningTime\":121201.8099987992,\"pid\":2841117,\"ramUsage\":6.05,\"server\":\"harakiri-sushi\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.610000000000004,\"pid\":4773677,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":267}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":268}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":269}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///50c6e86a-2519-43f2-b2d3-f49791574170\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///50c6e86a-2519-43f2-b2d3-f49791574170\"}],\"ramUsage\":5.5,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":402983}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///44fc382b-1472-47f5-acd0-e2cbf4b20f0a\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///44fc382b-1472-47f5-acd0-e2cbf4b20f0a\"}],\"ramUsage\":6.05,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":403092}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":99821302,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-60794.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"1391\",38],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-16360.cct\",\"type\":\"Total Ways to Sum\",\"data\":9,\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-910196-NiteSec.cct\",\"type\":\"Total Ways to Sum\",\"data\":23,\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"28.0.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":27.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"phantasy\",26,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":226255.6800000186,\"onlineMoneyMade\":162833046,\"onlineRunningTime\":121201.8099987992,\"pid\":2841112,\"ramUsage\":6.05,\"server\":\"phantasy\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.609999999999975,\"pid\":4773496,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.609999999999975,\"pid\":4773497,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":11}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":272}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":273}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":274}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///f3d5a2b1-2b26-4d44-95c9-ea0914db22ae\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///f3d5a2b1-2b26-4d44-95c9-ea0914db22ae\"}],\"ramUsage\":5.5,\"server\":\"phantasy\",\"moduleSequenceNumber\":402973}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///39eae66a-4ce4-4f6a-a64e-67b272b818cc\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///39eae66a-4ce4-4f6a-a64e-67b272b818cc\"}],\"ramUsage\":6.05,\"server\":\"phantasy\",\"moduleSequenceNumber\":403087}}],\"serversOnNetwork\":[\"max-hardware\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":13.026,\"minDifficulty\":13,\"moneyAvailable\":600000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-651814.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[110,7,79,31,79,60,179,46,131,164,186,55,189,13,105,161,191,80,156,145,58,99,182,69,200,190,123,156,147,88,142,143,165,165,156,139,41,173,59,129,32,76,38,116,164],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"33.8.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"max-hardware\",26,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":176057.28000000995,\"onlineMoneyMade\":110028568,\"onlineRunningTime\":121201.8099987992,\"pid\":2841114,\"ramUsage\":6.05,\"server\":\"max-hardware\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.610000000000004,\"pid\":4773675,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":277}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":278}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":279}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///d01f125b-bb0a-4f8a-a4da-dfd15b2a9e33\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///d01f125b-bb0a-4f8a-a4da-dfd15b2a9e33\"}],\"ramUsage\":5.5,\"server\":\"max-hardware\",\"moduleSequenceNumber\":402977}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///a7364156-4edd-4cf3-9072-657aff63778c\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///a7364156-4edd-4cf3-9072-657aff63778c\"}],\"ramUsage\":6.05,\"server\":\"max-hardware\",\"moduleSequenceNumber\":403089}}],\"serversOnNetwork\":[\"iron-gym\",\"neo-net\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":247846940.6586687,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"94.8.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"omega-net\",26,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":177878.40000001012,\"onlineMoneyMade\":108760658,\"onlineRunningTime\":121201.8099987992,\"pid\":2841106,\"ramUsage\":6.05,\"server\":\"omega-net\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000004,\"pid\":4773673,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":282}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":283}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":284}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///a96f2ab9-ebbe-45ec-bac0-117c0242fd10\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///a96f2ab9-ebbe-45ec-bac0-117c0242fd10\"}],\"ramUsage\":5.5,\"server\":\"omega-net\",\"moduleSequenceNumber\":402967}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///48da3952-4572-4051-a35b-eb34fe881df8\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///48da3952-4572-4051-a35b-eb34fe881df8\"}],\"ramUsage\":6.05,\"server\":\"omega-net\",\"moduleSequenceNumber\":403081}}],\"serversOnNetwork\":[\"CSEC\",\"comptek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":23,\"minDifficulty\":23,\"moneyAvailable\":1539121675,\"moneyMax\":1539121675,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":204,\"serverGrowth\":33}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-732032.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((((a()()a)(()))(\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-330073.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"4305063\",4],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-699737-MegaCorp.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[3,10,10,0,4,-5,-8,0,9,-4,4,-7,3,7,5,-7,2,3,7,4,-5,10,9,2,8,-5,3,-6,10,10,-3,-6,7,-4,5,-2],\"reward\":{\"name\":\"MegaCorp\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"74.2.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":54484}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":54485}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":54486}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":402969}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.05,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":402970}}],\"serversOnNetwork\":[\"silver-helix\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":27.04599999999998,\"minDifficulty\":27,\"moneyAvailable\":1223340838.871708,\"moneyMax\":1227617425,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":262,\"serverGrowth\":29}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-571026.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[9,13],[22,28],[12,15],[19,20],[25,32],[4,14],[14,18],[25,29],[18,26],[17,26],[20,28],[3,13],[4,9],[21,26],[13,18],[22,30],[18,27],[14,23]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"81.9.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"iron-gym\",26,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":176742.72000001004,\"onlineMoneyMade\":110715890,\"onlineRunningTime\":121201.8099987992,\"pid\":2841113,\"ramUsage\":6.05,\"server\":\"iron-gym\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.610000000000004,\"pid\":4773674,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":287}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":288}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":289}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///5ed6c042-be0b-471f-87d8-8f2046d106c4\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///5ed6c042-be0b-471f-87d8-8f2046d106c4\"}],\"ramUsage\":5.5,\"server\":\"iron-gym\",\"moduleSequenceNumber\":402975}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ce599cec-a83d-41a4-b43c-d65ec84b326f\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ce599cec-a83d-41a4-b43c-d65ec84b326f\"}],\"ramUsage\":6.05,\"server\":\"iron-gym\",\"moduleSequenceNumber\":403088}}],\"serversOnNetwork\":[\"home\",\"max-hardware\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":20.012000000000004,\"minDifficulty\":20,\"moneyAvailable\":498329154.35333794,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"13.7.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":106,\"hackDifficulty\":106,\"minDifficulty\":35,\"moneyAvailable\":125000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":476,\"serverGrowth\":26}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-157967.cct\",\"type\":\"Array Jumping Game\",\"data\":[1,7,0,0,3,10,0,10,3,0,8,7,0,10,0,5,8,7,7,10],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"64.5.7.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":118,\"hackDifficulty\":118,\"minDifficulty\":39,\"moneyAvailable\":450000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1093,\"serverGrowth\":51}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-280530.cct\",\"type\":\"Array Jumping Game\",\"data\":[9,10,9,2,5,0,10,0,0,0,10,0,2,2,1,2,4,0,6,5,7,3,5,4,7],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-500954-MegaCorp.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"3121205223\",\"reward\":{\"name\":\"MegaCorp\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-128141-NationalSecurityAgency.cct\",\"type\":\"Array Jumping Game\",\"data\":[4,10,0,0,7,2,10,9,7,4,5,0,7,0,5,0],\"reward\":{\"name\":\"National Security Agency\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-979080-Netburners.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0],[1,0,0,0,1,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,1,0,0,0],[0,1,0,0,0,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,0]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-625102.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0,0,0,0,0,0,0,1,0],[0,1,0,0,1,1,0,1,0,0,0],[0,0,0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0],[0,0,0,0,0,1,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-638179-MegaCorp.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[154,51,38,182,63,148,108,128,75,86,74,25,82,114,156,85,108,129,35,170,14,4,27,14,27,68,16,30,84,164,96,119,197],\"reward\":{\"name\":\"MegaCorp\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-259136.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[54,97,30],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"67.6.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":225000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":693,\"serverGrowth\":45}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"58.8.8.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":524,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-621416-CarmichaelSecurity.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,1,1],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0],[0,0,0,0,0,0,1,0],[0,0,0,1,1,1,0,0],[0,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1],[0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0],[0,0,1,0,0,0,0,0],[0,0,0,0,1,0,0,0]],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"11.4.4.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":365,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-179303.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"23818275195\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-259421-FourSigma.cct\",\"type\":\"Array Jumping Game\",\"data\":[8,4,0],\"reward\":{\"name\":\"Four Sigma\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-135384.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[138,77,130,168,125,38,97,197,110,78,69,123,90,144,189,175,183,16,116,40,189,54,103,173,3,26,19,16,54,166,128,143,197,58,96,30,41,164,87,77,170]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"66.4.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":215,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-425059-NiteSec.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0],[0,0],[0,0],[0,0],[0,0]],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-434358-MegaCorp.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-4,-2,0,-1,-8,-5,3,3,3,-5,6],\"reward\":{\"name\":\"MegaCorp\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"78.4.7.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":515,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-795218.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[8,5],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-46754-NationalSecurityAgency.cct\",\"type\":\"Total Ways to Sum\",\"data\":92,\"reward\":{\"name\":\"National Security Agency\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"0.3.4.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"iron-gym\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":53,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-421148.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[7,6],[9,1,1],[9,3,4,8],[5,4,6,6,9]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-828000.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"2242124225\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-593984-CyberSec.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-10,0,6,8,2,2,4,7,7,-5,-9,3,4,6,8,-7,2,9,2,-5,6,-5,-9,2,-4,2],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"45.7.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"5.7.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":4500,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-824722.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":887156728,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"43.9.9.5\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-0\",\"httpPortOpen\":false,\"ip\":\"40.3.2.8\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":210.74999999999994,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3696.3899999999885,\"onlineMoneyMade\":230531,\"onlineRunningTime\":121201.8099987992,\"pid\":2841123,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3806.9159999999997,\"onlineMoneyMade\":278767,\"onlineRunningTime\":121201.8099987992,\"pid\":2841124,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4429.152000000005,\"onlineMoneyMade\":3705522,\"onlineRunningTime\":121201.8099987992,\"pid\":2841125,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4355.009999999987,\"onlineMoneyMade\":2437249,\"onlineRunningTime\":121201.8099987992,\"pid\":2841126,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6154.5000000000255,\"onlineMoneyMade\":31696476,\"onlineRunningTime\":121201.8099987992,\"pid\":2841127,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5229.509999999976,\"onlineMoneyMade\":20226900,\"onlineRunningTime\":121201.8099987992,\"pid\":2841128,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6694.863000000003,\"onlineMoneyMade\":63414882,\"onlineRunningTime\":121201.8099987992,\"pid\":2841129,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6890.508000000021,\"onlineMoneyMade\":16742157,\"onlineRunningTime\":121201.8099987992,\"pid\":2841130,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10548.94500000015,\"onlineMoneyMade\":92453037,\"onlineRunningTime\":121201.8099987992,\"pid\":2841131,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7962.840000000013,\"onlineMoneyMade\":25415648,\"onlineRunningTime\":121201.8099987992,\"pid\":2841132,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12539.985000000062,\"onlineMoneyMade\":90378673,\"onlineRunningTime\":121201.8099987992,\"pid\":2841133,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21088.664999998728,\"onlineMoneyMade\":210250926,\"onlineRunningTime\":121201.8099987992,\"pid\":2841134,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16799.580000000184,\"onlineMoneyMade\":42451116,\"onlineRunningTime\":121201.8099987992,\"pid\":2841135,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25505.76000000089,\"onlineMoneyMade\":159862779,\"onlineRunningTime\":121201.8099987992,\"pid\":2841136,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21947.850000000864,\"onlineMoneyMade\":35285355,\"onlineRunningTime\":121201.8099987992,\"pid\":2841137,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":27866.400000001286,\"onlineMoneyMade\":18099304,\"onlineRunningTime\":121201.8099987992,\"pid\":2841138,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26423.04000000104,\"onlineMoneyMade\":25547618,\"onlineRunningTime\":121201.8099987992,\"pid\":2841139,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26490.240000001053,\"onlineMoneyMade\":9578485,\"onlineRunningTime\":121201.8099987992,\"pid\":2841140,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":63238.499999994354,\"onlineMoneyMade\":89677788,\"onlineRunningTime\":121201.8099987992,\"pid\":2841141,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":58309.440000006565,\"onlineMoneyMade\":79027622,\"onlineRunningTime\":121201.8099987992,\"pid\":2841142,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":37917.720000000816,\"onlineMoneyMade\":38873241,\"onlineRunningTime\":121201.8099987992,\"pid\":2841143,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":45487.32000000568,\"onlineMoneyMade\":17177399,\"onlineRunningTime\":121201.8099987992,\"pid\":2841144,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17888.640000001076,\"onlineMoneyMade\":1609245,\"onlineRunningTime\":121201.8099987992,\"pid\":2841145,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1228.2100000001421,\"pid\":4751753,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":987.8100000000876,\"pid\":4756214,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":987.8100000000876,\"pid\":4756215,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":987.8100000000876,\"pid\":4756217,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":937.8100000000762,\"pid\":4757248,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":937.8100000000762,\"pid\":4757249,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":446.8099999999832,\"pid\":4765704,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":446.8099999999832,\"pid\":4765705,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":446.8099999999832,\"pid\":4765707,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":446.8099999999832,\"pid\":4765708,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":386.8099999999866,\"pid\":4766850,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":386.8099999999866,\"pid\":4766851,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":376.80999999998716,\"pid\":4767116,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":376.80999999998716,\"pid\":4767117,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":376.80999999998716,\"pid\":4767118,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.61000000000078,\"pid\":4771320,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.61000000000078,\"pid\":4771321,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.61000000000078,\"pid\":4771322,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.4100000000007,\"pid\":4772205,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.61000000000041,\"pid\":4772600,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.61000000000041,\"pid\":4772601,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.41000000000041,\"pid\":4772603,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.41000000000041,\"pid\":4772604,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.41000000000027,\"pid\":4772805,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.41000000000027,\"pid\":4772806,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.40999999999998,\"pid\":4773186,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.40999999999998,\"pid\":4773187,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.40999999999998,\"pid\":4773188,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.409999999999975,\"pid\":4773511,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.409999999999975,\"pid\":4773512,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.409999999999975,\"pid\":4773514,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.409999999999975,\"pid\":4773515,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":4773517,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":4773518,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"pid\":4773679,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"pid\":4773680,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"pid\":4773681,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"pid\":4773682,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"pid\":4773683,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.2100000000000035,\"pid\":4773684,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.2100000000000035,\"pid\":4773685,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"moduleSequenceNumber\":207361}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0\",\"moduleSequenceNumber\":207362}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-0\",\"moduleSequenceNumber\":207363}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-0\",\"moduleSequenceNumber\":402997}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///c217f560-63be-47a9-9a65-3032b33e57a6\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///c217f560-63be-47a9-9a65-3032b33e57a6\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0\",\"moduleSequenceNumber\":403120}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-1\",\"httpPortOpen\":false,\"ip\":\"66.9.2.4\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":210.74999999999994,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3696.3899999999885,\"onlineMoneyMade\":230398,\"onlineRunningTime\":121201.8099987992,\"pid\":2841146,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3847.272,\"onlineMoneyMade\":552251,\"onlineRunningTime\":121201.8099987992,\"pid\":2841147,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4409.496000000006,\"onlineMoneyMade\":3451277,\"onlineRunningTime\":121201.8099987992,\"pid\":2841148,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4417.973999999987,\"onlineMoneyMade\":2848749,\"onlineRunningTime\":121201.8099987992,\"pid\":2841149,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6238.425000000025,\"onlineMoneyMade\":35661595,\"onlineRunningTime\":121201.8099987992,\"pid\":2841150,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5216.639999999976,\"onlineMoneyMade\":19917490,\"onlineRunningTime\":121201.8099987992,\"pid\":2841151,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6631.7370000000055,\"onlineMoneyMade\":59499380,\"onlineRunningTime\":121201.8099987992,\"pid\":2841152,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6890.508000000021,\"onlineMoneyMade\":16721064,\"onlineRunningTime\":121201.8099987992,\"pid\":2841153,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10678.93200000015,\"onlineMoneyMade\":98539965,\"onlineRunningTime\":121201.8099987992,\"pid\":2841154,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8069.274000000013,\"onlineMoneyMade\":27855450,\"onlineRunningTime\":121201.8099987992,\"pid\":2841155,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12626.550000000068,\"onlineMoneyMade\":94694622,\"onlineRunningTime\":121201.8099987992,\"pid\":2841156,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19087.874999998934,\"onlineMoneyMade\":141177745,\"onlineRunningTime\":121201.8099987992,\"pid\":2841157,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16124.970000000223,\"onlineMoneyMade\":45595694,\"onlineRunningTime\":121201.8099987992,\"pid\":2841158,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25940.88000000097,\"onlineMoneyMade\":164486973,\"onlineRunningTime\":121201.8099987992,\"pid\":2841159,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21975.90000000088,\"onlineMoneyMade\":36587792,\"onlineRunningTime\":121201.8099987992,\"pid\":2841160,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":27927.600000001294,\"onlineMoneyMade\":19512840,\"onlineRunningTime\":121201.8099987992,\"pid\":2841161,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26631.360000001077,\"onlineMoneyMade\":28450017,\"onlineRunningTime\":121201.8099987992,\"pid\":2841162,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26436.480000001044,\"onlineMoneyMade\":10547179,\"onlineRunningTime\":121201.8099987992,\"pid\":2841163,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":63350.59499999435,\"onlineMoneyMade\":90543417,\"onlineRunningTime\":121201.8099987992,\"pid\":2841164,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":58148.16000000654,\"onlineMoneyMade\":81724373,\"onlineRunningTime\":121201.8099987992,\"pid\":2841165,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38540.220000001216,\"onlineMoneyMade\":44190357,\"onlineRunningTime\":121201.8099987992,\"pid\":2841166,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":43719.420000004546,\"onlineMoneyMade\":16606818,\"onlineRunningTime\":121201.8099987992,\"pid\":2841167,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-1\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19139.736000002278,\"onlineMoneyMade\":2503541,\"onlineRunningTime\":121201.8099987992,\"pid\":2841168,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1238.0100000001444,\"pid\":4751651,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":997.6100000000898,\"pid\":4756104,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":977.6100000000853,\"pid\":4756501,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":977.6100000000853,\"pid\":4756502,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":967.610000000083,\"pid\":4756670,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":967.610000000083,\"pid\":4756671,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":536.8099999999852,\"pid\":4764060,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":536.8099999999852,\"pid\":4764061,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":436.80999999998375,\"pid\":4765930,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":436.80999999998375,\"pid\":4765931,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":386.8099999999866,\"pid\":4766855,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":386.8099999999866,\"pid\":4766856,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":386.8099999999866,\"pid\":4766857,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":386.6099999999866,\"pid\":4766858,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":386.6099999999866,\"pid\":4766859,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":96.21000000000083,\"pid\":4772082,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":96.21000000000083,\"pid\":4772083,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":96.21000000000083,\"pid\":4772084,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.21000000000069,\"pid\":4772212,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.21000000000069,\"pid\":4772213,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.210000000000264,\"pid\":4772815,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.210000000000264,\"pid\":4772816,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.210000000000264,\"pid\":4772818,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.210000000000264,\"pid\":4772819,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.210000000000264,\"pid\":4772820,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.210000000000264,\"pid\":4772821,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.00999999999998,\"pid\":4773192,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.20999999999994,\"pid\":4773302,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.009999999999977,\"pid\":4773519,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.009999999999977,\"pid\":4773520,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.009999999999977,\"pid\":4773522,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.009999999999977,\"pid\":4773523,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.009999999999977,\"pid\":4773525,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.009999999999977,\"pid\":4773526,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.2100000000000035,\"pid\":4773686,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.2100000000000035,\"pid\":4773687,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.2100000000000035,\"pid\":4773688,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.2100000000000035,\"pid\":4773689,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.2100000000000035,\"pid\":4773690,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":4773691,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":4773692,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"moduleSequenceNumber\":207370}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1\",\"moduleSequenceNumber\":207371}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-1\",\"moduleSequenceNumber\":207372}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-1\",\"moduleSequenceNumber\":402999}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///0680e15a-d9bb-4d6f-a1a9-07970995bcff\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///0680e15a-d9bb-4d6f-a1a9-07970995bcff\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1\",\"moduleSequenceNumber\":403143}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-2\",\"httpPortOpen\":false,\"ip\":\"81.2.6.1\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":205.54999999999995,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3714.479999999988,\"onlineMoneyMade\":460973,\"onlineRunningTime\":121201.8099987992,\"pid\":2841169,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3827.094,\"onlineMoneyMade\":273452,\"onlineRunningTime\":121201.8099987992,\"pid\":2841170,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4409.496000000006,\"onlineMoneyMade\":3393062,\"onlineRunningTime\":121201.8099987992,\"pid\":2841171,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4386.4919999999875,\"onlineMoneyMade\":2642727,\"onlineRunningTime\":121201.8099987992,\"pid\":2841172,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6137.715000000025,\"onlineMoneyMade\":30994770,\"onlineRunningTime\":121201.8099987992,\"pid\":2841173,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5113.679999999977,\"onlineMoneyMade\":16733877,\"onlineRunningTime\":121201.8099987992,\"pid\":2841174,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6600.174000000003,\"onlineMoneyMade\":57504701,\"onlineRunningTime\":121201.8099987992,\"pid\":2841175,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6774.840000000018,\"onlineMoneyMade\":14563072,\"onlineRunningTime\":121201.8099987992,\"pid\":2841176,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7812.55200000008,\"onlineMoneyMade\":41544740,\"onlineRunningTime\":121201.8099987992,\"pid\":2841177,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8081.100000000013,\"onlineMoneyMade\":28153591,\"onlineRunningTime\":121201.8099987992,\"pid\":2841178,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13554.885000000117,\"onlineMoneyMade\":124373993,\"onlineRunningTime\":121201.8099987992,\"pid\":2841179,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19817.549999998853,\"onlineMoneyMade\":174468457,\"onlineRunningTime\":121201.8099987992,\"pid\":2841180,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16318.99500000023,\"onlineMoneyMade\":49430135,\"onlineRunningTime\":121201.8099987992,\"pid\":2841181,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25982.88000000098,\"onlineMoneyMade\":165867628,\"onlineRunningTime\":121201.8099987992,\"pid\":2841182,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22200.300000000887,\"onlineMoneyMade\":36856337,\"onlineRunningTime\":121201.8099987992,\"pid\":2841183,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":27728.700000001278,\"onlineMoneyMade\":18708218,\"onlineRunningTime\":121201.8099987992,\"pid\":2841184,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":27746.88000000127,\"onlineMoneyMade\":32791973,\"onlineRunningTime\":121201.8099987992,\"pid\":2841185,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":37685.76000000299,\"onlineMoneyMade\":48510613,\"onlineRunningTime\":121201.8099987992,\"pid\":2841186,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":59516.09999999474,\"onlineMoneyMade\":72670844,\"onlineRunningTime\":121201.8099987992,\"pid\":2841187,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":49976.64000000512,\"onlineMoneyMade\":50485694,\"onlineRunningTime\":121201.8099987992,\"pid\":2841188,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":39919.6800000021,\"onlineMoneyMade\":35419014,\"onlineRunningTime\":121201.8099987992,\"pid\":2841189,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":42823.02000000397,\"onlineMoneyMade\":18939137,\"onlineRunningTime\":121201.8099987992,\"pid\":2841190,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-2\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19304.208000002436,\"onlineMoneyMade\":2496468,\"onlineRunningTime\":121201.8099987992,\"pid\":2841191,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1217.6100000001397,\"pid\":4752027,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":987.4100000000875,\"pid\":4756230,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":987.4100000000875,\"pid\":4756231,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":987.4100000000875,\"pid\":4756233,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":967.410000000083,\"pid\":4756675,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":967.410000000083,\"pid\":4756676,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":446.6099999999832,\"pid\":4765714,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":446.6099999999832,\"pid\":4765715,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":436.60999999998376,\"pid\":4765943,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":436.60999999998376,\"pid\":4765944,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":436.60999999998376,\"pid\":4765946,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":436.60999999998376,\"pid\":4765947,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":376.4099999999872,\"pid\":4767135,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":376.4099999999872,\"pid\":4767136,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":376.4099999999872,\"pid\":4767137,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":306.40999999999116,\"pid\":4768356,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":306.40999999999116,\"pid\":4768357,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":216.40999999999624,\"pid\":4769929,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":216.40999999999624,\"pid\":4769930,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":156.20999999999967,\"pid\":4770995,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":106.21000000000097,\"pid\":4771902,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.01000000000069,\"pid\":4772220,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.01000000000069,\"pid\":4772221,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.01000000000069,\"pid\":4772222,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.01000000000069,\"pid\":4772223,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.01000000000026,\"pid\":4772831,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.01000000000026,\"pid\":4772832,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.01000000000012,\"pid\":4773027,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.01000000000012,\"pid\":4773028,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.809999999999974,\"pid\":4773196,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.809999999999977,\"pid\":4773527,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.809999999999977,\"pid\":4773528,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.809999999999977,\"pid\":4773530,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.809999999999977,\"pid\":4773531,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.809999999999977,\"pid\":4773533,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.809999999999977,\"pid\":4773534,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":4773536,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":4773537,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"moduleSequenceNumber\":214411}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2\",\"moduleSequenceNumber\":214412}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-2\",\"moduleSequenceNumber\":214413}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-2\",\"moduleSequenceNumber\":403001}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///565b2fb7-fc36-4193-844c-aecb5eb030ac\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///565b2fb7-fc36-4193-844c-aecb5eb030ac\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2\",\"moduleSequenceNumber\":403166}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-3\",\"httpPortOpen\":false,\"ip\":\"59.6.2.6\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":215.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3744.6299999999883,\"onlineMoneyMade\":230442,\"onlineRunningTime\":121201.8099987992,\"pid\":2841192,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3847.272,\"onlineMoneyMade\":546883,\"onlineRunningTime\":121201.8099987992,\"pid\":2841193,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4370.184000000007,\"onlineMoneyMade\":2879221,\"onlineRunningTime\":121201.8099987992,\"pid\":2841194,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4449.455999999988,\"onlineMoneyMade\":3072126,\"onlineRunningTime\":121201.8099987992,\"pid\":2841195,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6244.020000000026,\"onlineMoneyMade\":37135236,\"onlineRunningTime\":121201.8099987992,\"pid\":2841196,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5190.899999999977,\"onlineMoneyMade\":19003366,\"onlineRunningTime\":121201.8099987992,\"pid\":2841197,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6684.342000000005,\"onlineMoneyMade\":62813643,\"onlineRunningTime\":121201.8099987992,\"pid\":2841198,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6923.556000000021,\"onlineMoneyMade\":17353980,\"onlineRunningTime\":121201.8099987992,\"pid\":2841199,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10578.942000000148,\"onlineMoneyMade\":93767739,\"onlineRunningTime\":121201.8099987992,\"pid\":2841200,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8104.752000000013,\"onlineMoneyMade\":28674257,\"onlineRunningTime\":121201.8099987992,\"pid\":2841201,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11886.270000000037,\"onlineMoneyMade\":93027475,\"onlineRunningTime\":121201.8099987992,\"pid\":2841202,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15443.729999999283,\"onlineMoneyMade\":17032730,\"onlineRunningTime\":121201.8099987992,\"pid\":2841203,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15814.530000000208,\"onlineMoneyMade\":45351268,\"onlineRunningTime\":121201.8099987992,\"pid\":2841204,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19170.479999999792,\"onlineMoneyMade\":75864639,\"onlineRunningTime\":121201.8099987992,\"pid\":2841205,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22715.400000000915,\"onlineMoneyMade\":39006191,\"onlineRunningTime\":121201.8099987992,\"pid\":2841206,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28254.00000000131,\"onlineMoneyMade\":21242673,\"onlineRunningTime\":121201.8099987992,\"pid\":2841207,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":33075.840000002194,\"onlineMoneyMade\":77047912,\"onlineRunningTime\":121201.8099987992,\"pid\":2841208,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":44976.960000004256,\"onlineMoneyMade\":96411783,\"onlineRunningTime\":121201.8099987992,\"pid\":2841209,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":59645.11499999472,\"onlineMoneyMade\":73511521,\"onlineRunningTime\":121201.8099987992,\"pid\":2841210,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":50144.64000000515,\"onlineMoneyMade\":53661869,\"onlineRunningTime\":121201.8099987992,\"pid\":2841211,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38500.38000000119,\"onlineMoneyMade\":33087577,\"onlineRunningTime\":121201.8099987992,\"pid\":2841212,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":43091.94000000414,\"onlineMoneyMade\":19979847,\"onlineRunningTime\":121201.8099987992,\"pid\":2841213,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-3\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18951.240000002097,\"onlineMoneyMade\":2477722,\"onlineRunningTime\":121201.8099987992,\"pid\":2841214,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1207.6100000001375,\"pid\":4752247,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":997.2100000000897,\"pid\":4756117,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":987.2100000000875,\"pid\":4756240,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":987.2100000000875,\"pid\":4756241,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":967.2100000000829,\"pid\":4756678,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":967.2100000000829,\"pid\":4756679,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":436.2099999999838,\"pid\":4765958,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":436.2099999999838,\"pid\":4765959,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.4099999999849,\"pid\":4766303,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.4099999999849,\"pid\":4766304,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":406.2099999999855,\"pid\":4766519,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":406.2099999999855,\"pid\":4766520,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":356.2099999999883,\"pid\":4767464,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":356.2099999999883,\"pid\":4767465,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":356.2099999999883,\"pid\":4767466,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":216.20999999999626,\"pid\":4769937,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":216.20999999999626,\"pid\":4769938,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":156.00999999999968,\"pid\":4770999,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.01000000000082,\"pid\":4771359,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.01000000000082,\"pid\":4771360,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.01000000000082,\"pid\":4771361,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":85.81000000000068,\"pid\":4772227,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.810000000000116,\"pid\":4773033,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.810000000000116,\"pid\":4773034,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.810000000000116,\"pid\":4773035,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.810000000000116,\"pid\":4773036,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.609999999999943,\"pid\":4773305,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.609999999999943,\"pid\":4773306,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":4773538,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":4773539,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":4773541,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":4773542,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":4773544,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":4773545,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":4773547,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":4773548,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000003,\"pid\":4773693,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000003,\"pid\":4773694,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000003,\"pid\":4773695,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000003,\"pid\":4773696,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000003,\"pid\":4773697,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000003,\"pid\":4773698,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000003,\"pid\":4773699,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000003,\"pid\":4773700,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-3\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"moduleSequenceNumber\":227953}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3\",\"moduleSequenceNumber\":227954}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-3\",\"moduleSequenceNumber\":227955}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-3\",\"moduleSequenceNumber\":403003}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///34f9e604-3599-43aa-9394-eb28ed8afdfd\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///34f9e604-3599-43aa-9394-eb28ed8afdfd\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3\",\"moduleSequenceNumber\":403189}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-4\",\"httpPortOpen\":false,\"ip\":\"63.1.5.1\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":203.79999999999995,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3744.6299999999883,\"onlineMoneyMade\":230383,\"onlineRunningTime\":121201.8099987992,\"pid\":2841215,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3847.272,\"onlineMoneyMade\":552240,\"onlineRunningTime\":121201.8099987992,\"pid\":2841216,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4429.1520000000055,\"onlineMoneyMade\":3678875,\"onlineRunningTime\":121201.8099987992,\"pid\":2841217,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4260.563999999984,\"onlineMoneyMade\":1742307,\"onlineRunningTime\":121201.8099987992,\"pid\":2841218,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6221.640000000028,\"onlineMoneyMade\":34788772,\"onlineRunningTime\":121201.8099987992,\"pid\":2841219,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5062.199999999977,\"onlineMoneyMade\":15113084,\"onlineRunningTime\":121201.8099987992,\"pid\":2841220,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6810.594000000007,\"onlineMoneyMade\":70717070,\"onlineRunningTime\":121201.8099987992,\"pid\":2841221,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6873.984000000022,\"onlineMoneyMade\":16433195,\"onlineRunningTime\":121201.8099987992,\"pid\":2841222,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7782.55500000008,\"onlineMoneyMade\":43933348,\"onlineRunningTime\":121201.8099987992,\"pid\":2841223,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8128.404000000013,\"onlineMoneyMade\":29243990,\"onlineRunningTime\":121201.8099987992,\"pid\":2841224,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13972.785000000136,\"onlineMoneyMade\":127809045,\"onlineRunningTime\":121201.8099987992,\"pid\":2841225,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16979.21999999912,\"onlineMoneyMade\":75949550,\"onlineRunningTime\":121201.8099987992,\"pid\":2841226,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15414.540000000192,\"onlineMoneyMade\":44934818,\"onlineRunningTime\":121201.8099987992,\"pid\":2841227,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25139.520000000826,\"onlineMoneyMade\":154485224,\"onlineRunningTime\":121201.8099987992,\"pid\":2841228,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22603.200000000903,\"onlineMoneyMade\":40211353,\"onlineRunningTime\":121201.8099987992,\"pid\":2841229,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28738.50000000134,\"onlineMoneyMade\":19717824,\"onlineRunningTime\":121201.8099987992,\"pid\":2841230,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22512.000000000364,\"onlineMoneyMade\":29694370,\"onlineRunningTime\":121201.8099987992,\"pid\":2841231,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31120.320000001855,\"onlineMoneyMade\":48873527,\"onlineRunningTime\":121201.8099987992,\"pid\":2841232,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":59169.239999994774,\"onlineMoneyMade\":72519391,\"onlineRunningTime\":121201.8099987992,\"pid\":2841233,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":58571.52000000661,\"onlineMoneyMade\":86213765,\"onlineRunningTime\":121201.8099987992,\"pid\":2841234,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38878.860000001434,\"onlineMoneyMade\":39034481,\"onlineRunningTime\":121201.8099987992,\"pid\":2841235,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":41702.52000000325,\"onlineMoneyMade\":14989369,\"onlineRunningTime\":121201.8099987992,\"pid\":2841236,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-4\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18969.720000002115,\"onlineMoneyMade\":2415889,\"onlineRunningTime\":121201.8099987992,\"pid\":2841237,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1207.6100000001375,\"pid\":4752256,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":997.2100000000897,\"pid\":4756123,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":967.2100000000829,\"pid\":4756684,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":967.2100000000829,\"pid\":4756685,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":967.2100000000829,\"pid\":4756687,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":967.2100000000829,\"pid\":4756688,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":466.2099999999821,\"pid\":4765331,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":466.2099999999821,\"pid\":4765332,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":446.2099999999832,\"pid\":4765724,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":446.2099999999832,\"pid\":4765725,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":436.2099999999838,\"pid\":4765970,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":436.2099999999838,\"pid\":4765971,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":376.2099999999872,\"pid\":4767156,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":376.2099999999872,\"pid\":4767157,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":376.2099999999872,\"pid\":4767158,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":306.0099999999912,\"pid\":4768370,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":306.0099999999912,\"pid\":4768371,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":196.0099999999974,\"pid\":4770321,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":196.0099999999974,\"pid\":4770322,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.01000000000082,\"pid\":4771370,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.01000000000082,\"pid\":4771371,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.01000000000082,\"pid\":4771372,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":116.01000000000111,\"pid\":4771692,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":85.81000000000068,\"pid\":4772232,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.61000000000011,\"pid\":4773041,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.61000000000011,\"pid\":4773042,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.61000000000011,\"pid\":4773043,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.61000000000011,\"pid\":4773044,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.61000000000011,\"pid\":4773046,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.60999999999997,\"pid\":4773202,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.609999999999943,\"pid\":4773308,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":4773549,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":4773550,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":4773552,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":4773553,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":4773555,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":4773556,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"moduleSequenceNumber\":239398}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4\",\"moduleSequenceNumber\":239399}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-4\",\"moduleSequenceNumber\":239400}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-4\",\"moduleSequenceNumber\":403005}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///bd199e6d-6db5-4747-b8c0-a880f0eb8198\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///bd199e6d-6db5-4747-b8c0-a880f0eb8198\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4\",\"moduleSequenceNumber\":403212}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-5\",\"httpPortOpen\":false,\"ip\":\"28.5.4.0\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":202.04999999999995,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3744.6299999999883,\"onlineMoneyMade\":230368,\"onlineRunningTime\":121201.8099987992,\"pid\":2841238,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3827.094,\"onlineMoneyMade\":278766,\"onlineRunningTime\":121201.8099987992,\"pid\":2841239,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4448.8080000000045,\"onlineMoneyMade\":3943050,\"onlineRunningTime\":121201.8099987992,\"pid\":2841240,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4512.419999999989,\"onlineMoneyMade\":3560739,\"onlineRunningTime\":121201.8099987992,\"pid\":2841241,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6221.640000000027,\"onlineMoneyMade\":34810263,\"onlineRunningTime\":121201.8099987992,\"pid\":2841242,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5139.419999999976,\"onlineMoneyMade\":17492342,\"onlineRunningTime\":121201.8099987992,\"pid\":2841243,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6715.905000000005,\"onlineMoneyMade\":64825520,\"onlineRunningTime\":121201.8099987992,\"pid\":2841244,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7006.176000000022,\"onlineMoneyMade\":18901957,\"onlineRunningTime\":121201.8099987992,\"pid\":2841245,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9775.689000000122,\"onlineMoneyMade\":72613060,\"onlineRunningTime\":121201.8099987992,\"pid\":2841246,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8092.926000000013,\"onlineMoneyMade\":28433678,\"onlineRunningTime\":121201.8099987992,\"pid\":2841247,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13584.73500000012,\"onlineMoneyMade\":113402942,\"onlineRunningTime\":121201.8099987992,\"pid\":2841248,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20809.48499999875,\"onlineMoneyMade\":210337450,\"onlineRunningTime\":121201.8099987992,\"pid\":2841249,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17733.885000000097,\"onlineMoneyMade\":69258848,\"onlineRunningTime\":121201.8099987992,\"pid\":2841250,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24969.840000000804,\"onlineMoneyMade\":150945450,\"onlineRunningTime\":121201.8099987992,\"pid\":2841251,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22478.2500000009,\"onlineMoneyMade\":41418581,\"onlineRunningTime\":121201.8099987992,\"pid\":2841252,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":30543.900000001464,\"onlineMoneyMade\":33357855,\"onlineRunningTime\":121201.8099987992,\"pid\":2841253,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20596.800000000032,\"onlineMoneyMade\":23682170,\"onlineRunningTime\":121201.8099987992,\"pid\":2841254,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18332.15999999964,\"onlineMoneyMade\":5436056,\"onlineRunningTime\":121201.8099987992,\"pid\":2841255,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":63392.89499999434,\"onlineMoneyMade\":91989285,\"onlineRunningTime\":121201.8099987992,\"pid\":2841256,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":36664.320000002816,\"onlineMoneyMade\":21041743,\"onlineRunningTime\":121201.8099987992,\"pid\":2841257,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":39053.160000001546,\"onlineMoneyMade\":39514516,\"onlineRunningTime\":121201.8099987992,\"pid\":2841258,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":44700.48000000518,\"onlineMoneyMade\":27232347,\"onlineRunningTime\":121201.8099987992,\"pid\":2841259,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-5\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17258.47200000047,\"onlineMoneyMade\":1467544,\"onlineRunningTime\":121201.8099987992,\"pid\":2841260,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1207.4100000001374,\"pid\":4752260,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":977.0100000000851,\"pid\":4756540,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":967.0100000000829,\"pid\":4756690,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":967.0100000000829,\"pid\":4756691,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":967.0100000000829,\"pid\":4756693,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":967.0100000000829,\"pid\":4756694,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":486.20999999998094,\"pid\":4765016,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":486.20999999998094,\"pid\":4765017,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.20999999998435,\"pid\":4766113,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.20999999998435,\"pid\":4766114,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.2099999999849,\"pid\":4766317,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.2099999999849,\"pid\":4766318,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":386.2099999999866,\"pid\":4766878,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":356.00999999998834,\"pid\":4767481,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":356.00999999998834,\"pid\":4767482,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":356.00999999998834,\"pid\":4767483,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":195.80999999999742,\"pid\":4770326,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":195.80999999999742,\"pid\":4770327,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":125.81000000000125,\"pid\":4771547,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":125.81000000000125,\"pid\":4771548,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":125.81000000000125,\"pid\":4771549,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":85.81000000000068,\"pid\":4772235,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":75.81000000000054,\"pid\":4772474,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":75.81000000000054,\"pid\":4772475,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":65.8100000000004,\"pid\":4772608,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":65.8100000000004,\"pid\":4772609,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.61000000000011,\"pid\":4773048,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.61000000000011,\"pid\":4773049,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.61000000000011,\"pid\":4773051,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.60999999999997,\"pid\":4773205,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":4773557,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":4773558,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":4773560,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":4773701,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":4773702,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":4773703,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"moduleSequenceNumber\":250563}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5\",\"moduleSequenceNumber\":250564}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-5\",\"moduleSequenceNumber\":250565}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-5\",\"moduleSequenceNumber\":403007}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///5bda241d-419d-48dc-83aa-9dd6acb267e9\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///5bda241d-419d-48dc-83aa-9dd6acb267e9\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5\",\"moduleSequenceNumber\":403235}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-6\",\"httpPortOpen\":false,\"ip\":\"86.1.5.1\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":210.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3696.3899999999885,\"onlineMoneyMade\":230427,\"onlineRunningTime\":121201.8099987992,\"pid\":2841261,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3806.916,\"onlineMoneyMade\":0,\"onlineRunningTime\":121201.8099987992,\"pid\":2841262,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4527.4320000000025,\"onlineMoneyMade\":5006959,\"onlineRunningTime\":121201.8099987992,\"pid\":2841263,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4386.491999999987,\"onlineMoneyMade\":2672342,\"onlineRunningTime\":121201.8099987992,\"pid\":2841264,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6154.500000000025,\"onlineMoneyMade\":31749419,\"onlineRunningTime\":121201.8099987992,\"pid\":2841265,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5190.899999999976,\"onlineMoneyMade\":19015371,\"onlineRunningTime\":121201.8099987992,\"pid\":2841266,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6800.07300000001,\"onlineMoneyMade\":70112623,\"onlineRunningTime\":121201.8099987992,\"pid\":2841267,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6824.412000000019,\"onlineMoneyMade\":15482853,\"onlineRunningTime\":121201.8099987992,\"pid\":2841268,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8805.786000000106,\"onlineMoneyMade\":40171142,\"onlineRunningTime\":121201.8099987992,\"pid\":2841269,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8199.360000000013,\"onlineMoneyMade\":30846898,\"onlineRunningTime\":121201.8099987992,\"pid\":2841270,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13429.515000000116,\"onlineMoneyMade\":118173982,\"onlineRunningTime\":121201.8099987992,\"pid\":2841271,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13476.779999999484,\"onlineMoneyMade\":62696790,\"onlineRunningTime\":121201.8099987992,\"pid\":2841272,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15429.465000000191,\"onlineMoneyMade\":38327617,\"onlineRunningTime\":121201.8099987992,\"pid\":2841273,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25529.280000000894,\"onlineMoneyMade\":160300160,\"onlineRunningTime\":121201.8099987992,\"pid\":2841274,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25788.15000000111,\"onlineMoneyMade\":68952501,\"onlineRunningTime\":121201.8099987992,\"pid\":2841275,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31237.50000000151,\"onlineMoneyMade\":34224057,\"onlineRunningTime\":121201.8099987992,\"pid\":2841276,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22733.760000000402,\"onlineMoneyMade\":30434917,\"onlineRunningTime\":121201.8099987992,\"pid\":2841277,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31066.560000001846,\"onlineMoneyMade\":5759568,\"onlineRunningTime\":121201.8099987992,\"pid\":2841278,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":62876.83499999439,\"onlineMoneyMade\":90002225,\"onlineRunningTime\":121201.8099987992,\"pid\":2841279,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":48041.28000000479,\"onlineMoneyMade\":53843435,\"onlineRunningTime\":121201.8099987992,\"pid\":2841280,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38868.90000000143,\"onlineMoneyMade\":42839386,\"onlineRunningTime\":121201.8099987992,\"pid\":2841281,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":44501.28000000505,\"onlineMoneyMade\":27021488,\"onlineRunningTime\":121201.8099987992,\"pid\":2841282,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-6\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25112.472000008016,\"onlineMoneyMade\":4419120,\"onlineRunningTime\":121201.8099987992,\"pid\":2841283,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1197.4100000001351,\"pid\":4752430,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":987.0100000000874,\"pid\":4756258,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":987.0100000000874,\"pid\":4756259,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":977.0100000000851,\"pid\":4756550,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":967.0100000000829,\"pid\":4756698,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":967.0100000000829,\"pid\":4756699,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":486.20999999998094,\"pid\":4765023,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":486.20999999998094,\"pid\":4765024,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":436.0099999999838,\"pid\":4765981,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":436.0099999999838,\"pid\":4765982,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":436.0099999999838,\"pid\":4765984,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":436.0099999999838,\"pid\":4765985,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":366.00999999998777,\"pid\":4767291,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":356.00999999998834,\"pid\":4767487,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":356.00999999998834,\"pid\":4767488,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":356.00999999998834,\"pid\":4767489,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":215.80999999999628,\"pid\":4769961,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":215.80999999999628,\"pid\":4769962,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":85.61000000000068,\"pid\":4772241,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":85.61000000000068,\"pid\":4772242,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":85.61000000000068,\"pid\":4772243,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":75.61000000000054,\"pid\":4772478,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.610000000000255,\"pid\":4772859,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.610000000000255,\"pid\":4772860,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.610000000000255,\"pid\":4772862,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.610000000000255,\"pid\":4772863,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.61000000000011,\"pid\":4773054,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.40999999999997,\"pid\":4773210,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.409999999999943,\"pid\":4773311,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":4773561,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":4773562,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.409999999999979,\"pid\":4773564,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.409999999999979,\"pid\":4773565,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":4773704,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":4773705,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":4773706,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":4773707,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":4773708,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":4773709,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":4773710,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":4773711,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-6\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"moduleSequenceNumber\":250571}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6\",\"moduleSequenceNumber\":250572}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-6\",\"moduleSequenceNumber\":250573}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-6\",\"moduleSequenceNumber\":403009}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///8c0823d5-e37d-4aab-902c-968c57ba0fd7\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///8c0823d5-e37d-4aab-902c-968c57ba0fd7\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6\",\"moduleSequenceNumber\":403258}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-7\",\"httpPortOpen\":false,\"ip\":\"2.7.1.1\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":214.19999999999993,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3678.299999999989,\"onlineMoneyMade\":0,\"onlineRunningTime\":121201.8099987992,\"pid\":2841284,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3806.9159999999997,\"onlineMoneyMade\":273389,\"onlineRunningTime\":121201.8099987992,\"pid\":2841285,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4488.1200000000035,\"onlineMoneyMade\":4504002,\"onlineRunningTime\":121201.8099987992,\"pid\":2841286,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4370.750999999987,\"onlineMoneyMade\":2536942,\"onlineRunningTime\":121201.8099987992,\"pid\":2841287,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6322.350000000026,\"onlineMoneyMade\":39490301,\"onlineRunningTime\":121201.8099987992,\"pid\":2841288,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5255.249999999976,\"onlineMoneyMade\":20904513,\"onlineRunningTime\":121201.8099987992,\"pid\":2841289,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5534.045999999998,\"onlineMoneyMade\":37478817,\"onlineRunningTime\":121201.8099987992,\"pid\":2841290,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7039.224000000022,\"onlineMoneyMade\":19511981,\"onlineRunningTime\":121201.8099987992,\"pid\":2841291,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8872.446000000109,\"onlineMoneyMade\":46278729,\"onlineRunningTime\":121201.8099987992,\"pid\":2841292,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8223.012000000013,\"onlineMoneyMade\":31396531,\"onlineRunningTime\":121201.8099987992,\"pid\":2841293,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10363.919999999971,\"onlineMoneyMade\":60890020,\"onlineRunningTime\":121201.8099987992,\"pid\":2841294,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13400.639999999492,\"onlineMoneyMade\":75338384,\"onlineRunningTime\":121201.8099987992,\"pid\":2841295,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17945.820000000065,\"onlineMoneyMade\":58707883,\"onlineRunningTime\":121201.8099987992,\"pid\":2841296,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25079.04000000082,\"onlineMoneyMade\":151610954,\"onlineRunningTime\":121201.8099987992,\"pid\":2841297,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22822.500000000895,\"onlineMoneyMade\":41998715,\"onlineRunningTime\":121201.8099987992,\"pid\":2841298,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":30202.20000000145,\"onlineMoneyMade\":30949976,\"onlineRunningTime\":121201.8099987992,\"pid\":2841299,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":30945.600000001825,\"onlineMoneyMade\":71354809,\"onlineRunningTime\":121201.8099987992,\"pid\":2841300,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25656.96000000091,\"onlineMoneyMade\":5528422,\"onlineRunningTime\":121201.8099987992,\"pid\":2841301,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":62976.23999999438,\"onlineMoneyMade\":90806999,\"onlineRunningTime\":121201.8099987992,\"pid\":2841302,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":60621.120000006966,\"onlineMoneyMade\":94747350,\"onlineRunningTime\":121201.8099987992,\"pid\":2841303,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":29820.23999999776,\"onlineMoneyMade\":19745793,\"onlineRunningTime\":121201.8099987992,\"pid\":2841304,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":50253.180000008746,\"onlineMoneyMade\":34676677,\"onlineRunningTime\":121201.8099987992,\"pid\":2841305,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-7\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25077.360000007982,\"onlineMoneyMade\":4455806,\"onlineRunningTime\":121201.8099987992,\"pid\":2841306,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1212.8100000001386,\"pid\":4752077,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1022.6100000000955,\"pid\":4755512,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1022.6100000000955,\"pid\":4755513,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":972.4100000000841,\"pid\":4756558,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":942.4100000000773,\"pid\":4757076,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":942.4100000000773,\"pid\":4757077,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":601.81,\"pid\":4762958,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":601.81,\"pid\":4762959,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":431.60999999998404,\"pid\":4765989,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":431.60999999998404,\"pid\":4765990,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":361.40999999998803,\"pid\":4767298,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":351.4099999999886,\"pid\":4767490,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":351.4099999999886,\"pid\":4767491,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":351.4099999999886,\"pid\":4767492,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":341.40999999998917,\"pid\":4767688,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":171.20999999999881,\"pid\":4770667,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.01000000000062,\"pid\":4772250,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.01000000000062,\"pid\":4772251,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.01000000000062,\"pid\":4772252,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":71.01000000000047,\"pid\":4772481,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":71.01000000000047,\"pid\":4772482,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":71.01000000000047,\"pid\":4772484,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":71.01000000000047,\"pid\":4772485,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.01000000000033,\"pid\":4772620,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.01000000000005,\"pid\":4773059,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.01000000000005,\"pid\":4773060,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.009999999999923,\"pid\":4773215,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.009999999999923,\"pid\":4773216,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.00999999999996,\"pid\":4773316,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.00999999999996,\"pid\":4773317,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.00999999999996,\"pid\":4773319,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.009999999999994,\"pid\":4773567,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.009999999999994,\"pid\":4773568,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.009999999999994,\"pid\":4773570,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.009999999999994,\"pid\":4773571,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":4773712,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":4773713,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":4773714,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":4773715,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":4773716,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":4773717,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":4773718,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":4773719,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-7\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"moduleSequenceNumber\":250579}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7\",\"moduleSequenceNumber\":250580}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-7\",\"moduleSequenceNumber\":250581}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-7\",\"moduleSequenceNumber\":403011}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///b7b34543-59fe-4b48-b03d-8086606012af\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///b7b34543-59fe-4b48-b03d-8086606012af\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7\",\"moduleSequenceNumber\":403281}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-8\",\"httpPortOpen\":false,\"ip\":\"12.1.2.8\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":212.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3696.3899999999885,\"onlineMoneyMade\":230576,\"onlineRunningTime\":121201.8099987992,\"pid\":2841307,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3786.738,\"onlineMoneyMade\":0,\"onlineRunningTime\":121201.8099987992,\"pid\":2841308,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4606.056000000002,\"onlineMoneyMade\":6059986,\"onlineRunningTime\":121201.8099987992,\"pid\":2841309,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4370.7509999999875,\"onlineMoneyMade\":2519569,\"onlineRunningTime\":121201.8099987992,\"pid\":2841310,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6339.135000000024,\"onlineMoneyMade\":40258155,\"onlineRunningTime\":121201.8099987992,\"pid\":2841311,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5190.899999999977,\"onlineMoneyMade\":19039903,\"onlineRunningTime\":121201.8099987992,\"pid\":2841312,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6715.905000000006,\"onlineMoneyMade\":64761706,\"onlineRunningTime\":121201.8099987992,\"pid\":2841313,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6907.03200000002,\"onlineMoneyMade\":17024493,\"onlineRunningTime\":121201.8099987992,\"pid\":2841314,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10125.654000000135,\"onlineMoneyMade\":79216014,\"onlineRunningTime\":121201.8099987992,\"pid\":2841315,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8270.316000000012,\"onlineMoneyMade\":32460546,\"onlineRunningTime\":121201.8099987992,\"pid\":2841316,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10996.740000000002,\"onlineMoneyMade\":57819627,\"onlineRunningTime\":121201.8099987992,\"pid\":2841317,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14745.779999999353,\"onlineMoneyMade\":71177441,\"onlineRunningTime\":121201.8099987992,\"pid\":2841318,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18480.135000000013,\"onlineMoneyMade\":66976545,\"onlineRunningTime\":121201.8099987992,\"pid\":2841319,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20618.64000000004,\"onlineMoneyMade\":76853328,\"onlineRunningTime\":121201.8099987992,\"pid\":2841320,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25352.10000000107,\"onlineMoneyMade\":65141080,\"onlineRunningTime\":121201.8099987992,\"pid\":2841321,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31849.50000000156,\"onlineMoneyMade\":39305153,\"onlineRunningTime\":121201.8099987992,\"pid\":2841322,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28405.440000001385,\"onlineMoneyMade\":31490550,\"onlineRunningTime\":121201.8099987992,\"pid\":2841323,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18688.3199999997,\"onlineMoneyMade\":5898758,\"onlineRunningTime\":121201.8099987992,\"pid\":2841324,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":61199.639999994564,\"onlineMoneyMade\":84318421,\"onlineRunningTime\":121201.8099987992,\"pid\":2841325,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":46220.16000000447,\"onlineMoneyMade\":30484644,\"onlineRunningTime\":121201.8099987992,\"pid\":2841326,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":35074.13999999899,\"onlineMoneyMade\":36494176,\"onlineRunningTime\":121201.8099987992,\"pid\":2841327,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":51806.940000009745,\"onlineMoneyMade\":35436539,\"onlineRunningTime\":121201.8099987992,\"pid\":2841328,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-8\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19895.568000003004,\"onlineMoneyMade\":1423612,\"onlineRunningTime\":121201.8099987992,\"pid\":2841329,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1262.61000000015,\"pid\":4751108,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1002.2100000000909,\"pid\":4755956,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1002.2100000000909,\"pid\":4755957,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":962.2100000000818,\"pid\":4756711,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":942.2100000000772,\"pid\":4757086,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":942.2100000000772,\"pid\":4757087,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":461.20999999998236,\"pid\":4765354,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":461.20999999998236,\"pid\":4765355,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":431.20999999998406,\"pid\":4765997,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":431.20999999998406,\"pid\":4765998,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":411.2099999999852,\"pid\":4766340,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":411.2099999999852,\"pid\":4766343,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":411.2099999999852,\"pid\":4766344,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":351.2099999999886,\"pid\":4767497,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":351.2099999999886,\"pid\":4767498,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":351.2099999999886,\"pid\":4767499,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":80.81000000000061,\"pid\":4772267,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":80.81000000000061,\"pid\":4772268,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":80.81000000000061,\"pid\":4772269,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":80.81000000000061,\"pid\":4772270,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":80.81000000000061,\"pid\":4772271,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":70.81000000000047,\"pid\":4772489,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":70.81000000000047,\"pid\":4772490,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":70.81000000000047,\"pid\":4772492,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":70.81000000000047,\"pid\":4772493,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000019,\"pid\":4772878,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000019,\"pid\":4772879,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000019,\"pid\":4772880,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.809999999999924,\"pid\":4773219,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.809999999999924,\"pid\":4773220,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"pid\":4773328,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.809999999999995,\"pid\":4773573,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.809999999999995,\"pid\":4773574,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.609999999999996,\"pid\":4773576,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.609999999999996,\"pid\":4773577,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.609999999999996,\"pid\":4773578,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.609999999999996,\"pid\":4773579,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":4773720,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":4773721,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":4773722,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":4773723,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":4773724,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"moduleSequenceNumber\":255877}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8\",\"moduleSequenceNumber\":255878}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-8\",\"moduleSequenceNumber\":255879}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-8\",\"moduleSequenceNumber\":403013}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///d6f54c4b-b031-4b33-81d8-0c334278b618\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///d6f54c4b-b031-4b33-81d8-0c334278b618\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8\",\"moduleSequenceNumber\":403304}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-9\",\"httpPortOpen\":false,\"ip\":\"33.2.2.7\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":221.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3678.299999999989,\"onlineMoneyMade\":0,\"onlineRunningTime\":121201.8099987992,\"pid\":2841330,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3806.9159999999997,\"onlineMoneyMade\":278788,\"onlineRunningTime\":121201.8099987992,\"pid\":2841331,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4435.704000000003,\"onlineMoneyMade\":4244397,\"onlineRunningTime\":121201.8099987992,\"pid\":2841332,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4339.268999999986,\"onlineMoneyMade\":2259625,\"onlineRunningTime\":121201.8099987992,\"pid\":2841333,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6154.500000000025,\"onlineMoneyMade\":31722068,\"onlineRunningTime\":121201.8099987992,\"pid\":2841334,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5242.379999999976,\"onlineMoneyMade\":20722963,\"onlineRunningTime\":121201.8099987992,\"pid\":2841335,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6757.989000000009,\"onlineMoneyMade\":67462250,\"onlineRunningTime\":121201.8099987992,\"pid\":2841336,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7105.320000000024,\"onlineMoneyMade\":20754805,\"onlineRunningTime\":121201.8099987992,\"pid\":2841337,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9322.401000000107,\"onlineMoneyMade\":75613442,\"onlineRunningTime\":121201.8099987992,\"pid\":2841338,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8128.404000000013,\"onlineMoneyMade\":29213330,\"onlineRunningTime\":121201.8099987992,\"pid\":2841339,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11232.555000000008,\"onlineMoneyMade\":60853130,\"onlineRunningTime\":121201.8099987992,\"pid\":2841340,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14563.889999999372,\"onlineMoneyMade\":69967633,\"onlineRunningTime\":121201.8099987992,\"pid\":2841341,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16486.15500000023,\"onlineMoneyMade\":61107591,\"onlineRunningTime\":121201.8099987992,\"pid\":2841342,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25520.880000000892,\"onlineMoneyMade\":159613434,\"onlineRunningTime\":121201.8099987992,\"pid\":2841343,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25653.000000001084,\"onlineMoneyMade\":66629691,\"onlineRunningTime\":121201.8099987992,\"pid\":2841344,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":29679.450000001412,\"onlineMoneyMade\":26806796,\"onlineRunningTime\":121201.8099987992,\"pid\":2841345,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":33794.88000000232,\"onlineMoneyMade\":80096880,\"onlineRunningTime\":121201.8099987992,\"pid\":2841346,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":44923.200000004246,\"onlineMoneyMade\":95283511,\"onlineRunningTime\":121201.8099987992,\"pid\":2841347,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":37790.81999999698,\"onlineMoneyMade\":23602064,\"onlineRunningTime\":121201.8099987992,\"pid\":2841348,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":45084.480000004274,\"onlineMoneyMade\":27434885,\"onlineRunningTime\":121201.8099987992,\"pid\":2841349,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":34227.539999998444,\"onlineMoneyMade\":29077822,\"onlineRunningTime\":121201.8099987992,\"pid\":2841350,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":54097.74000001122,\"onlineMoneyMade\":42690196,\"onlineRunningTime\":121201.8099987992,\"pid\":2841351,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-9\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19389.216000002518,\"onlineMoneyMade\":1331668,\"onlineRunningTime\":121201.8099987992,\"pid\":2841352,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1232.6100000001431,\"pid\":4751678,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1002.0100000000908,\"pid\":4755965,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1002.0100000000908,\"pid\":4755966,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":972.010000000084,\"pid\":4756576,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":942.0100000000772,\"pid\":4757091,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":942.0100000000772,\"pid\":4757092,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":511.2099999999795,\"pid\":4764443,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":511.2099999999795,\"pid\":4764444,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":451.2099999999829,\"pid\":4765612,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":451.2099999999829,\"pid\":4765613,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":421.00999999998464,\"pid\":4766135,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":421.00999999998464,\"pid\":4766136,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":351.0099999999886,\"pid\":4767504,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":351.0099999999886,\"pid\":4767505,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":351.0099999999886,\"pid\":4767506,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.61000000000104,\"pid\":4771710,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.61000000000104,\"pid\":4771711,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":80.61000000000061,\"pid\":4772275,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":80.61000000000061,\"pid\":4772276,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":80.61000000000061,\"pid\":4772277,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":80.61000000000061,\"pid\":4772278,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":80.61000000000061,\"pid\":4772279,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.610000000000184,\"pid\":4772890,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.610000000000184,\"pid\":4772891,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.610000000000184,\"pid\":4772892,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.610000000000184,\"pid\":4772893,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.610000000000184,\"pid\":4772895,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.610000000000184,\"pid\":4772896,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.61000000000004,\"pid\":4773070,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.61000000000004,\"pid\":4773071,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.61000000000004,\"pid\":4773072,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.60999999999996,\"pid\":4773332,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.60999999999996,\"pid\":4773333,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.609999999999996,\"pid\":4773580,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.609999999999996,\"pid\":4773581,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.609999999999996,\"pid\":4773582,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.409999999999997,\"pid\":4773583,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.409999999999997,\"pid\":4773584,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.409999999999997,\"pid\":4773585,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":4773725,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":4773726,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":4773727,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":4773728,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":4773729,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":4773730,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":4773731,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":4773732,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"moduleSequenceNumber\":260965}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9\",\"moduleSequenceNumber\":260966}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-9\",\"moduleSequenceNumber\":260967}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-9\",\"moduleSequenceNumber\":403015}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///8c0aeac7-39e7-4d6e-be46-2eef2a2267bb\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///8c0aeac7-39e7-4d6e-be46-2eef2a2267bb\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9\",\"moduleSequenceNumber\":403327}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-10\",\"httpPortOpen\":false,\"ip\":\"33.8.3.0\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":212.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3678.299999999989,\"onlineMoneyMade\":0,\"onlineRunningTime\":121201.8099987992,\"pid\":2841353,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3773.2859999999996,\"onlineMoneyMade\":546799,\"onlineRunningTime\":121201.8099987992,\"pid\":2841354,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4435.704000000004,\"onlineMoneyMade\":4201793,\"onlineRunningTime\":121201.8099987992,\"pid\":2841355,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4449.455999999988,\"onlineMoneyMade\":3113629,\"onlineRunningTime\":121201.8099987992,\"pid\":2841356,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6355.920000000026,\"onlineMoneyMade\":41010959,\"onlineRunningTime\":121201.8099987992,\"pid\":2841357,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5139.419999999976,\"onlineMoneyMade\":17530998,\"onlineRunningTime\":121201.8099987992,\"pid\":2841358,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6705.384000000009,\"onlineMoneyMade\":64157495,\"onlineRunningTime\":121201.8099987992,\"pid\":2841359,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6857.46000000002,\"onlineMoneyMade\":16098651,\"onlineRunningTime\":121201.8099987992,\"pid\":2841360,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10195.647000000135,\"onlineMoneyMade\":82446301,\"onlineRunningTime\":121201.8099987992,\"pid\":2841361,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6610.73400000001,\"onlineMoneyMade\":21570432,\"onlineRunningTime\":121201.8099987992,\"pid\":2841362,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11853.435000000043,\"onlineMoneyMade\":88665264,\"onlineRunningTime\":121201.8099987992,\"pid\":2841363,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16304.53499999919,\"onlineMoneyMade\":62718647,\"onlineRunningTime\":121201.8099987992,\"pid\":2841364,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17850.300000000076,\"onlineMoneyMade\":55893668,\"onlineRunningTime\":121201.8099987992,\"pid\":2841365,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25389.840000000873,\"onlineMoneyMade\":158998293,\"onlineRunningTime\":121201.8099987992,\"pid\":2841366,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25933.500000001117,\"onlineMoneyMade\":69045485,\"onlineRunningTime\":121201.8099987992,\"pid\":2841367,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":33981.30000000126,\"onlineMoneyMade\":55657072,\"onlineRunningTime\":121201.8099987992,\"pid\":2841368,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28150.08000000134,\"onlineMoneyMade\":31349920,\"onlineRunningTime\":121201.8099987992,\"pid\":2841369,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":44909.760000004244,\"onlineMoneyMade\":95317807,\"onlineRunningTime\":121201.8099987992,\"pid\":2841370,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":61343.45999999455,\"onlineMoneyMade\":84204450,\"onlineRunningTime\":121201.8099987992,\"pid\":2841371,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":45628.80000000437,\"onlineMoneyMade\":26973269,\"onlineRunningTime\":121201.8099987992,\"pid\":2841372,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":34157.8199999984,\"onlineMoneyMade\":30650602,\"onlineRunningTime\":121201.8099987992,\"pid\":2841373,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":56209.260000012575,\"onlineMoneyMade\":43448252,\"onlineRunningTime\":121201.8099987992,\"pid\":2841374,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-10\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19370.7360000025,\"onlineMoneyMade\":1331677,\"onlineRunningTime\":121201.8099987992,\"pid\":2841375,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1202.4100000001363,\"pid\":4752301,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1012.0100000000931,\"pid\":4755753,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1012.0100000000931,\"pid\":4755754,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":951.8100000000794,\"pid\":4756921,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":911.8100000000703,\"pid\":4757654,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":521.2099999999816,\"pid\":4764307,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":521.2099999999816,\"pid\":4764308,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":421.00999999998464,\"pid\":4766140,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":421.00999999998464,\"pid\":4766141,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":411.0099999999852,\"pid\":4766365,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":350.80999999998863,\"pid\":4767509,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":350.80999999998863,\"pid\":4767510,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":350.80999999998863,\"pid\":4767511,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":350.80999999998863,\"pid\":4767512,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":210.60999999999657,\"pid\":4769995,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":210.60999999999657,\"pid\":4769996,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":160.60999999999942,\"pid\":4770867,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.610000000000326,\"pid\":4772633,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.610000000000326,\"pid\":4772634,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.610000000000326,\"pid\":4772635,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.41000000000018,\"pid\":4772899,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.41000000000018,\"pid\":4772900,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.41000000000018,\"pid\":4772902,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.41000000000004,\"pid\":4773078,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.41000000000004,\"pid\":4773079,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.40999999999996,\"pid\":4773341,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.40999999999996,\"pid\":4773342,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.40999999999996,\"pid\":4773343,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.409999999999997,\"pid\":4773586,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.409999999999997,\"pid\":4773587,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.409999999999997,\"pid\":4773588,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.409999999999997,\"pid\":4773589,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.409999999999997,\"pid\":4773590,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.409999999999997,\"pid\":4773591,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.409999999999997,\"pid\":4773592,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":4773733,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":4773734,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":4773735,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":4773736,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":4773737,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":4773738,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":4773739,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"moduleSequenceNumber\":265782}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10\",\"moduleSequenceNumber\":265783}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-10\",\"moduleSequenceNumber\":265784}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-10\",\"moduleSequenceNumber\":403017}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///a2dcc834-61ba-47c4-b1d5-f6e3a2a15155\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///a2dcc834-61ba-47c4-b1d5-f6e3a2a15155\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10\",\"moduleSequenceNumber\":403350}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-0-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-0-0\",\"httpPortOpen\":false,\"ip\":\"0.9.3.8\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":212.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3696.3899999999885,\"onlineMoneyMade\":230576,\"onlineRunningTime\":121201.8099987992,\"pid\":2841376,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3847.2719999999995,\"onlineMoneyMade\":825481,\"onlineRunningTime\":121201.8099987992,\"pid\":2841377,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4422.600000000006,\"onlineMoneyMade\":4460773,\"onlineRunningTime\":121201.8099987992,\"pid\":2841378,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4328.774999999987,\"onlineMoneyMade\":3032666,\"onlineRunningTime\":121201.8099987992,\"pid\":2841379,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6339.135000000027,\"onlineMoneyMade\":40220863,\"onlineRunningTime\":121201.8099987992,\"pid\":2841380,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5255.249999999975,\"onlineMoneyMade\":21003870,\"onlineRunningTime\":121201.8099987992,\"pid\":2841381,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5558.594999999997,\"onlineMoneyMade\":33132128,\"onlineRunningTime\":121201.8099987992,\"pid\":2841382,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6807.888000000018,\"onlineMoneyMade\":15161215,\"onlineRunningTime\":121201.8099987992,\"pid\":2841383,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10145.652000000135,\"onlineMoneyMade\":80065124,\"onlineRunningTime\":121201.8099987992,\"pid\":2841384,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6449.11200000001,\"onlineMoneyMade\":19669676,\"onlineRunningTime\":121201.8099987992,\"pid\":2841385,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13987.710000000141,\"onlineMoneyMade\":136118874,\"onlineRunningTime\":121201.8099987992,\"pid\":2841386,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14695.019999999357,\"onlineMoneyMade\":57061317,\"onlineRunningTime\":121201.8099987992,\"pid\":2841387,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16710.030000000206,\"onlineMoneyMade\":63564739,\"onlineRunningTime\":121201.8099987992,\"pid\":2841388,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20356.559999999998,\"onlineMoneyMade\":72736523,\"onlineRunningTime\":121201.8099987992,\"pid\":2841389,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25545.900000001093,\"onlineMoneyMade\":66563551,\"onlineRunningTime\":121201.8099987992,\"pid\":2841390,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":34827.90000000102,\"onlineMoneyMade\":59668846,\"onlineRunningTime\":121201.8099987992,\"pid\":2841391,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":27800.64000000128,\"onlineMoneyMade\":32626571,\"onlineRunningTime\":121201.8099987992,\"pid\":2841392,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38317.4400000031,\"onlineMoneyMade\":53953365,\"onlineRunningTime\":121201.8099987992,\"pid\":2841393,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":40582.61999999669,\"onlineMoneyMade\":33545566,\"onlineRunningTime\":121201.8099987992,\"pid\":2841394,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":47335.680000004664,\"onlineMoneyMade\":29922909,\"onlineRunningTime\":121201.8099987992,\"pid\":2841395,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":35567.159999999305,\"onlineMoneyMade\":28077970,\"onlineRunningTime\":121201.8099987992,\"pid\":2841396,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":57504.06000001341,\"onlineMoneyMade\":42442434,\"onlineRunningTime\":121201.8099987992,\"pid\":2841397,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-0-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19307.90400000244,\"onlineMoneyMade\":1228824,\"onlineRunningTime\":121201.8099987992,\"pid\":2841398,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1292.2100000001567,\"pid\":4750685,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1001.8100000000908,\"pid\":4755975,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1001.8100000000908,\"pid\":4755976,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":951.8100000000794,\"pid\":4756931,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":931.8100000000749,\"pid\":4757321,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":931.8100000000749,\"pid\":4757322,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":451.00999999998294,\"pid\":4765623,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":451.00999999998294,\"pid\":4765624,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":410.8099999999852,\"pid\":4766381,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":350.80999999998863,\"pid\":4767519,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":350.80999999998863,\"pid\":4767520,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":350.80999999998863,\"pid\":4767521,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":350.80999999998863,\"pid\":4767522,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":350.80999999998863,\"pid\":4767523,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":350.60999999998864,\"pid\":4767524,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":240.60999999999487,\"pid\":4769431,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.41000000000103,\"pid\":4771728,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.41000000000103,\"pid\":4771729,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"pid\":4772643,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"pid\":4772644,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"pid\":4772645,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.41000000000018,\"pid\":4772909,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999926,\"pid\":4773229,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999926,\"pid\":4773230,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999926,\"pid\":4773231,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999926,\"pid\":4773232,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.40999999999996,\"pid\":4773350,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.40999999999996,\"pid\":4773351,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.40999999999996,\"pid\":4773352,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.409999999999997,\"pid\":4773593,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.409999999999997,\"pid\":4773594,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.409999999999997,\"pid\":4773595,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.409999999999997,\"pid\":4773596,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.409999999999997,\"pid\":4773597,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.409999999999997,\"pid\":4773598,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.409999999999997,\"pid\":4773599,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.409999999999997,\"pid\":4773600,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.409999999999997,\"pid\":4773601,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":4773740,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":4773741,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":4773742,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":4773743,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"moduleSequenceNumber\":368964}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-0-0\",\"moduleSequenceNumber\":368965}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-0-0\",\"moduleSequenceNumber\":368966}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-0-0\",\"moduleSequenceNumber\":403019}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///8b47bfaa-c0bc-42f7-8e17-0c9153e1b5d3\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///8b47bfaa-c0bc-42f7-8e17-0c9153e1b5d3\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-0-0\",\"moduleSequenceNumber\":403373}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-1-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-1-0\",\"httpPortOpen\":false,\"ip\":\"93.5.6.3\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":210.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3690.3599999999883,\"onlineMoneyMade\":460913,\"onlineRunningTime\":121201.8099987992,\"pid\":2841399,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3827.0939999999996,\"onlineMoneyMade\":552070,\"onlineRunningTime\":121201.8099987992,\"pid\":2841400,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4239.1440000000075,\"onlineMoneyMade\":2910290,\"onlineRunningTime\":121201.8099987992,\"pid\":2841401,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4402.232999999987,\"onlineMoneyMade\":2772107,\"onlineRunningTime\":121201.8099987992,\"pid\":2841402,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6221.640000000028,\"onlineMoneyMade\":34731927,\"onlineRunningTime\":121201.8099987992,\"pid\":2841403,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5113.679999999978,\"onlineMoneyMade\":16631500,\"onlineRunningTime\":121201.8099987992,\"pid\":2841404,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6589.653000000005,\"onlineMoneyMade\":56833891,\"onlineRunningTime\":121201.8099987992,\"pid\":2841405,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7072.272000000024,\"onlineMoneyMade\":20134096,\"onlineRunningTime\":121201.8099987992,\"pid\":2841406,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7239.276000000067,\"onlineMoneyMade\":40626606,\"onlineRunningTime\":121201.8099987992,\"pid\":2841407,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8211.186000000012,\"onlineMoneyMade\":31122023,\"onlineRunningTime\":121201.8099987992,\"pid\":2841408,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10056.464999999955,\"onlineMoneyMade\":62976823,\"onlineRunningTime\":121201.8099987992,\"pid\":2841409,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18971.54999999894,\"onlineMoneyMade\":138369654,\"onlineRunningTime\":121201.8099987992,\"pid\":2841410,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17444.34000000012,\"onlineMoneyMade\":49355587,\"onlineRunningTime\":121201.8099987992,\"pid\":2841411,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25030.32000000081,\"onlineMoneyMade\":152725559,\"onlineRunningTime\":121201.8099987992,\"pid\":2841412,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25604.550000001094,\"onlineMoneyMade\":66820403,\"onlineRunningTime\":121201.8099987992,\"pid\":2841413,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":33647.25000000137,\"onlineMoneyMade\":55639896,\"onlineRunningTime\":121201.8099987992,\"pid\":2841414,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":30972.48000000183,\"onlineMoneyMade\":71271990,\"onlineRunningTime\":121201.8099987992,\"pid\":2841415,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":30952.320000001826,\"onlineMoneyMade\":6852324,\"onlineRunningTime\":121201.8099987992,\"pid\":2841416,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":51498.134999995564,\"onlineMoneyMade\":60992365,\"onlineRunningTime\":121201.8099987992,\"pid\":2841417,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":59646.7200000068,\"onlineMoneyMade\":88783048,\"onlineRunningTime\":121201.8099987992,\"pid\":2841418,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":37504.38000000055,\"onlineMoneyMade\":44113540,\"onlineRunningTime\":121201.8099987992,\"pid\":2841419,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":57713.22000001354,\"onlineMoneyMade\":42757766,\"onlineRunningTime\":121201.8099987992,\"pid\":2841420,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-1-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25572.624000008458,\"onlineMoneyMade\":4700764,\"onlineRunningTime\":121201.8099987992,\"pid\":2841421,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1191.8100000001339,\"pid\":4752461,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":981.6100000000862,\"pid\":4756300,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":981.6100000000862,\"pid\":4756301,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":921.4100000000725,\"pid\":4757435,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":921.4100000000725,\"pid\":4757436,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":911.4100000000702,\"pid\":4757678,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":430.8099999999841,\"pid\":4766021,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":430.8099999999841,\"pid\":4766022,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.80999999998465,\"pid\":4766148,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.80999999998465,\"pid\":4766149,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":390.80999999998636,\"pid\":4766747,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":390.80999999998636,\"pid\":4766748,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":380.60999999998694,\"pid\":4766925,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":340.6099999999892,\"pid\":4767711,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":180.4099999999983,\"pid\":4770484,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"pid\":4772651,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"pid\":4772652,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"pid\":4772653,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"pid\":4772654,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"pid\":4772655,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.41000000000018,\"pid\":4772915,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.41000000000018,\"pid\":4772916,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999926,\"pid\":4773239,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999926,\"pid\":4773240,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.40999999999996,\"pid\":4773353,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.40999999999996,\"pid\":4773354,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.40999999999996,\"pid\":4773355,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.40999999999996,\"pid\":4773356,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.20999999999996,\"pid\":4773357,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.20999999999996,\"pid\":4773358,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.20999999999996,\"pid\":4773360,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.20999999999996,\"pid\":4773361,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.20999999999996,\"pid\":4773363,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.20999999999996,\"pid\":4773364,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999998,\"pid\":4773602,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999998,\"pid\":4773603,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999998,\"pid\":4773604,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999998,\"pid\":4773605,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":4773744,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":4773745,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":4773746,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-1-0\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"moduleSequenceNumber\":368969}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-1-0\",\"moduleSequenceNumber\":368970}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-1-0\",\"moduleSequenceNumber\":368971}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-1-0\",\"moduleSequenceNumber\":403021}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///9db454eb-144d-4eac-b42a-1cd9800b1fd6\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///9db454eb-144d-4eac-b42a-1cd9800b1fd6\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-1-0\",\"moduleSequenceNumber\":403396}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-2-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-2-0\",\"httpPortOpen\":false,\"ip\":\"11.1.1.2\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":205.54999999999995,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3678.299999999989,\"onlineMoneyMade\":0,\"onlineRunningTime\":121201.8099987992,\"pid\":2841422,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3732.93,\"onlineMoneyMade\":0,\"onlineRunningTime\":121201.8099987992,\"pid\":2841423,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4285.008000000008,\"onlineMoneyMade\":3153991,\"onlineRunningTime\":121201.8099987992,\"pid\":2841424,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4370.750999999987,\"onlineMoneyMade\":2519063,\"onlineRunningTime\":121201.8099987992,\"pid\":2841425,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6288.780000000025,\"onlineMoneyMade\":37925015,\"onlineRunningTime\":121201.8099987992,\"pid\":2841426,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5306.729999999976,\"onlineMoneyMade\":22584515,\"onlineRunningTime\":121201.8099987992,\"pid\":2841427,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6736.947000000005,\"onlineMoneyMade\":66014295,\"onlineRunningTime\":121201.8099987992,\"pid\":2841428,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6923.556000000021,\"onlineMoneyMade\":17318891,\"onlineRunningTime\":121201.8099987992,\"pid\":2841429,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9632.370000000126,\"onlineMoneyMade\":65996730,\"onlineRunningTime\":121201.8099987992,\"pid\":2841430,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8211.186000000012,\"onlineMoneyMade\":31079205,\"onlineRunningTime\":121201.8099987992,\"pid\":2841431,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11904.180000000044,\"onlineMoneyMade\":85115066,\"onlineRunningTime\":121201.8099987992,\"pid\":2841432,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19381.85999999889,\"onlineMoneyMade\":146272572,\"onlineRunningTime\":121201.8099987992,\"pid\":2841433,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17907.015000000076,\"onlineMoneyMade\":67575213,\"onlineRunningTime\":121201.8099987992,\"pid\":2841434,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24832.080000000773,\"onlineMoneyMade\":149751897,\"onlineRunningTime\":121201.8099987992,\"pid\":2841435,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21529.650000000842,\"onlineMoneyMade\":30721478,\"onlineRunningTime\":121201.8099987992,\"pid\":2841436,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28335.600000001312,\"onlineMoneyMade\":29396119,\"onlineRunningTime\":121201.8099987992,\"pid\":2841437,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":27814.080000001282,\"onlineMoneyMade\":32799670,\"onlineRunningTime\":121201.8099987992,\"pid\":2841438,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":44748.480000004216,\"onlineMoneyMade\":95196821,\"onlineRunningTime\":121201.8099987992,\"pid\":2841439,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":61225.01999999456,\"onlineMoneyMade\":83891907,\"onlineRunningTime\":121201.8099987992,\"pid\":2841440,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":53639.040000005756,\"onlineMoneyMade\":60345117,\"onlineRunningTime\":121201.8099987992,\"pid\":2841441,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":36483.479999999894,\"onlineMoneyMade\":43718745,\"onlineRunningTime\":121201.8099987992,\"pid\":2841442,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":55820.820000012325,\"onlineMoneyMade\":42603623,\"onlineRunningTime\":121201.8099987992,\"pid\":2841443,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-2-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19690.440000002807,\"onlineMoneyMade\":1435894,\"onlineRunningTime\":121201.8099987992,\"pid\":2841444,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1211.4100000001383,\"pid\":4752128,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1011.0100000000929,\"pid\":4755794,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1011.0100000000929,\"pid\":4755795,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":951.0100000000792,\"pid\":4756950,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":921.0100000000724,\"pid\":4757452,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":400.00999999998584,\"pid\":4766576,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":400.00999999998584,\"pid\":4766577,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":400.00999999998584,\"pid\":4766579,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":390.0099999999864,\"pid\":4766755,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":390.0099999999864,\"pid\":4766756,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":360.0099999999881,\"pid\":4767333,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":360.0099999999881,\"pid\":4767334,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":340.00999999998925,\"pid\":4767718,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.80999999999776,\"pid\":4770366,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.80999999999776,\"pid\":4770367,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":109.81000000000103,\"pid\":4771753,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":89.81000000000074,\"pid\":4772145,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":89.81000000000074,\"pid\":4772146,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":89.81000000000074,\"pid\":4772148,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":89.81000000000074,\"pid\":4772149,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.810000000000315,\"pid\":4772663,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.810000000000315,\"pid\":4772664,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.810000000000315,\"pid\":4772665,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.81000000000003,\"pid\":4773090,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.81000000000003,\"pid\":4773091,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.609999999999964,\"pid\":4773369,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.609999999999964,\"pid\":4773370,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.609999999999964,\"pid\":4773372,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.609999999999964,\"pid\":4773373,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.61,\"pid\":4773606,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.61,\"pid\":4773607,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.61,\"pid\":4773608,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.61,\"pid\":4773609,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.61,\"pid\":4773610,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.61,\"pid\":4773611,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.61,\"pid\":4773612,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.61,\"pid\":4773613,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.61,\"pid\":4773614,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"moduleSequenceNumber\":368974}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-2-0\",\"moduleSequenceNumber\":368975}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-2-0\",\"moduleSequenceNumber\":368976}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-2-0\",\"moduleSequenceNumber\":403023}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///9cc81ead-1319-4510-bec6-be2b3df2cb1c\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///9cc81ead-1319-4510-bec6-be2b3df2cb1c\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-2-0\",\"moduleSequenceNumber\":403419}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-3-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-3-0\",\"httpPortOpen\":false,\"ip\":\"11.2.4.6\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":205.54999999999995,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3642.1199999999885,\"onlineMoneyMade\":461122,\"onlineRunningTime\":121201.8099987992,\"pid\":2841445,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3732.93,\"onlineMoneyMade\":0,\"onlineRunningTime\":121201.8099987992,\"pid\":2841446,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4206.384000000008,\"onlineMoneyMade\":4260033,\"onlineRunningTime\":121201.8099987992,\"pid\":2841447,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4323.527999999986,\"onlineMoneyMade\":2124269,\"onlineRunningTime\":121201.8099987992,\"pid\":2841448,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6372.705000000028,\"onlineMoneyMade\":41733040,\"onlineRunningTime\":121201.8099987992,\"pid\":2841449,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5165.159999999976,\"onlineMoneyMade\":18290859,\"onlineRunningTime\":121201.8099987992,\"pid\":2841450,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6747.468000000004,\"onlineMoneyMade\":66663265,\"onlineRunningTime\":121201.8099987992,\"pid\":2841451,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6774.840000000018,\"onlineMoneyMade\":14553142,\"onlineRunningTime\":121201.8099987992,\"pid\":2841452,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8812.452000000107,\"onlineMoneyMade\":42047857,\"onlineRunningTime\":121201.8099987992,\"pid\":2841453,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8246.664000000012,\"onlineMoneyMade\":31894439,\"onlineRunningTime\":121201.8099987992,\"pid\":2841454,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11429.56500000002,\"onlineMoneyMade\":79934266,\"onlineRunningTime\":121201.8099987992,\"pid\":2841455,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19320.524999998914,\"onlineMoneyMade\":146804739,\"onlineRunningTime\":121201.8099987992,\"pid\":2841456,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17435.385000000126,\"onlineMoneyMade\":61327631,\"onlineRunningTime\":121201.8099987992,\"pid\":2841457,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25173.120000000836,\"onlineMoneyMade\":153545167,\"onlineRunningTime\":121201.8099987992,\"pid\":2841458,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25255.200000001063,\"onlineMoneyMade\":64814311,\"onlineRunningTime\":121201.8099987992,\"pid\":2841459,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28350.90000000132,\"onlineMoneyMade\":26186870,\"onlineRunningTime\":121201.8099987992,\"pid\":2841460,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":33196.800000002215,\"onlineMoneyMade\":79791776,\"onlineRunningTime\":121201.8099987992,\"pid\":2841461,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":44903.04000000424,\"onlineMoneyMade\":96240426,\"onlineRunningTime\":121201.8099987992,\"pid\":2841462,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":50861.51999999563,\"onlineMoneyMade\":36175485,\"onlineRunningTime\":121201.8099987992,\"pid\":2841463,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":53813.76000000579,\"onlineMoneyMade\":58685810,\"onlineRunningTime\":121201.8099987992,\"pid\":2841464,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38475.480000001175,\"onlineMoneyMade\":48198808,\"onlineRunningTime\":121201.8099987992,\"pid\":2841465,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":55357.68000001203,\"onlineMoneyMade\":41750830,\"onlineRunningTime\":121201.8099987992,\"pid\":2841466,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-3-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22113.168000005135,\"onlineMoneyMade\":2170007,\"onlineRunningTime\":121201.8099987992,\"pid\":2841467,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1231.2100000001428,\"pid\":4751706,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1001.0100000000906,\"pid\":4755988,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1001.0100000000906,\"pid\":4755989,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":950.8100000000792,\"pid\":4756958,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":920.8100000000724,\"pid\":4757458,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":400.00999999998584,\"pid\":4766587,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":400.00999999998584,\"pid\":4766588,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":390.0099999999864,\"pid\":4766762,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":390.0099999999864,\"pid\":4766763,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":390.0099999999864,\"pid\":4766765,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":390.0099999999864,\"pid\":4766766,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":350.0099999999887,\"pid\":4767546,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":339.80999999998926,\"pid\":4767723,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":209.80999999999662,\"pid\":4770028,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":209.80999999999662,\"pid\":4770029,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":109.61000000000102,\"pid\":4771769,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.6100000000006,\"pid\":4772310,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.6100000000006,\"pid\":4772311,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.61000000000031,\"pid\":4772674,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.61000000000031,\"pid\":4772675,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.61000000000031,\"pid\":4772676,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.61000000000003,\"pid\":4773093,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.61000000000003,\"pid\":4773094,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.40999999999993,\"pid\":4773251,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.40999999999993,\"pid\":4773252,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.609999999999964,\"pid\":4773375,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.609999999999964,\"pid\":4773376,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.409999999999965,\"pid\":4773378,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.409999999999965,\"pid\":4773379,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"pid\":4773615,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"pid\":4773616,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"pid\":4773617,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"pid\":4773618,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"pid\":4773619,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"pid\":4773620,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"pid\":4773621,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.21,\"pid\":4773622,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.21,\"pid\":4773623,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"moduleSequenceNumber\":368979}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-3-0\",\"moduleSequenceNumber\":368980}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-3-0\",\"moduleSequenceNumber\":368981}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-3-0\",\"moduleSequenceNumber\":403025}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///6b3e1119-669b-4168-8f70-32c51f32fa7d\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///6b3e1119-669b-4168-8f70-32c51f32fa7d\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-3-0\",\"moduleSequenceNumber\":403442}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-4-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-4-0\",\"httpPortOpen\":false,\"ip\":\"35.6.3.7\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":207.29999999999995,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2948.669999999992,\"onlineMoneyMade\":230591,\"onlineRunningTime\":121201.8099987992,\"pid\":2841468,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3887.6279999999997,\"onlineMoneyMade\":1104642,\"onlineRunningTime\":121201.8099987992,\"pid\":2841469,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4494.672000000004,\"onlineMoneyMade\":4479168,\"onlineRunningTime\":121201.8099987992,\"pid\":2841470,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4417.973999999988,\"onlineMoneyMade\":2806937,\"onlineRunningTime\":121201.8099987992,\"pid\":2841471,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6406.275000000028,\"onlineMoneyMade\":43341097,\"onlineRunningTime\":121201.8099987992,\"pid\":2841472,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5023.589999999977,\"onlineMoneyMade\":14045766,\"onlineRunningTime\":121201.8099987992,\"pid\":2841473,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6407.289000000003,\"onlineMoneyMade\":61394700,\"onlineRunningTime\":121201.8099987992,\"pid\":2841474,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7006.176000000022,\"onlineMoneyMade\":18888559,\"onlineRunningTime\":121201.8099987992,\"pid\":2841475,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8715.795000000106,\"onlineMoneyMade\":38737636,\"onlineRunningTime\":121201.8099987992,\"pid\":2841476,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8187.534000000013,\"onlineMoneyMade\":30568821,\"onlineRunningTime\":121201.8099987992,\"pid\":2841477,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11784.780000000037,\"onlineMoneyMade\":82925422,\"onlineRunningTime\":121201.8099987992,\"pid\":2841478,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17213.984999999113,\"onlineMoneyMade\":140086273,\"onlineRunningTime\":121201.8099987992,\"pid\":2841479,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17978.655000000064,\"onlineMoneyMade\":60167758,\"onlineRunningTime\":121201.8099987992,\"pid\":2841480,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24845.52000000078,\"onlineMoneyMade\":148791680,\"onlineRunningTime\":121201.8099987992,\"pid\":2841481,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25352.100000001064,\"onlineMoneyMade\":65531298,\"onlineRunningTime\":121201.8099987992,\"pid\":2841482,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28978.20000000137,\"onlineMoneyMade\":28288353,\"onlineRunningTime\":121201.8099987992,\"pid\":2841483,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":23022.720000000452,\"onlineMoneyMade\":32381649,\"onlineRunningTime\":121201.8099987992,\"pid\":2841484,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":44849.28000000423,\"onlineMoneyMade\":96042823,\"onlineRunningTime\":121201.8099987992,\"pid\":2841485,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":50396.21999999568,\"onlineMoneyMade\":37114285,\"onlineRunningTime\":121201.8099987992,\"pid\":2841486,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":58195.200000006545,\"onlineMoneyMade\":79748129,\"onlineRunningTime\":121201.8099987992,\"pid\":2841487,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38321.100000001075,\"onlineMoneyMade\":43357128,\"onlineRunningTime\":121201.8099987992,\"pid\":2841488,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":57409.44000001335,\"onlineMoneyMade\":39088049,\"onlineRunningTime\":121201.8099987992,\"pid\":2841489,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-4-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21118.94400000418,\"onlineMoneyMade\":1863634,\"onlineRunningTime\":121201.8099987992,\"pid\":2841490,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1231.2100000001428,\"pid\":4751715,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1040.8100000000995,\"pid\":4755170,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1040.8100000000995,\"pid\":4755171,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":970.8100000000837,\"pid\":4756611,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":970.8100000000837,\"pid\":4756612,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":970.8100000000837,\"pid\":4756614,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.80999999998414,\"pid\":4766040,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.80999999998414,\"pid\":4766041,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.8099999999847,\"pid\":4766162,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.8099999999847,\"pid\":4766163,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":389.8099999999864,\"pid\":4766777,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":389.8099999999864,\"pid\":4766778,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":379.809999999987,\"pid\":4766957,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":379.809999999987,\"pid\":4766958,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":329.60999999998984,\"pid\":4767898,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":329.60999999998984,\"pid\":4767899,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.60999999999777,\"pid\":4770383,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.60999999999777,\"pid\":4770384,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.41000000000045,\"pid\":4772530,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.41000000000045,\"pid\":4772531,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.41000000000031,\"pid\":4772680,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.41000000000031,\"pid\":4772681,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.41000000000031,\"pid\":4772682,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.210000000000306,\"pid\":4772683,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.210000000000306,\"pid\":4772684,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.21000000000002,\"pid\":4773096,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.21000000000002,\"pid\":4773097,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.20999999999993,\"pid\":4773259,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.20999999999993,\"pid\":4773260,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.209999999999965,\"pid\":4773381,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.209999999999965,\"pid\":4773382,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.21,\"pid\":4773624,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.21,\"pid\":4773625,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.21,\"pid\":4773626,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.21,\"pid\":4773627,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.21,\"pid\":4773628,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.21,\"pid\":4773629,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.010000000000002,\"pid\":4773630,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.010000000000002,\"pid\":4773631,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"moduleSequenceNumber\":368984}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-4-0\",\"moduleSequenceNumber\":368985}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-4-0\",\"moduleSequenceNumber\":368986}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-4-0\",\"moduleSequenceNumber\":403027}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f8254b9d-41e6-491e-833b-83932cbfc450\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f8254b9d-41e6-491e-833b-83932cbfc450\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-4-0\",\"moduleSequenceNumber\":403465}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-5-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-5-0\",\"httpPortOpen\":false,\"ip\":\"78.2.2.9\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":196.79999999999995,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3075.2999999999915,\"onlineMoneyMade\":0,\"onlineRunningTime\":121201.8099987992,\"pid\":2841491,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3786.738,\"onlineMoneyMade\":0,\"onlineRunningTime\":121201.8099987992,\"pid\":2841492,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4514.328000000003,\"onlineMoneyMade\":4727824,\"onlineRunningTime\":121201.8099987992,\"pid\":2841493,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4334.021999999985,\"onlineMoneyMade\":2372170,\"onlineRunningTime\":121201.8099987992,\"pid\":2841494,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6221.640000000024,\"onlineMoneyMade\":34878331,\"onlineRunningTime\":121201.8099987992,\"pid\":2841495,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5268.119999999975,\"onlineMoneyMade\":21387349,\"onlineRunningTime\":121201.8099987992,\"pid\":2841496,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5804.084999999996,\"onlineMoneyMade\":44318322,\"onlineRunningTime\":121201.8099987992,\"pid\":2841497,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6973.1280000000215,\"onlineMoneyMade\":18264574,\"onlineRunningTime\":121201.8099987992,\"pid\":2841498,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8839.116000000107,\"onlineMoneyMade\":43849787,\"onlineRunningTime\":121201.8099987992,\"pid\":2841499,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8128.404000000013,\"onlineMoneyMade\":29266194,\"onlineRunningTime\":121201.8099987992,\"pid\":2841500,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11886.270000000039,\"onlineMoneyMade\":86816544,\"onlineRunningTime\":121201.8099987992,\"pid\":2841501,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14739.434999999356,\"onlineMoneyMade\":14701209,\"onlineRunningTime\":121201.8099987992,\"pid\":2841502,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17975.670000000067,\"onlineMoneyMade\":61045340,\"onlineRunningTime\":121201.8099987992,\"pid\":2841503,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24020.640000000636,\"onlineMoneyMade\":140537941,\"onlineRunningTime\":121201.8099987992,\"pid\":2841504,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24757.950000001023,\"onlineMoneyMade\":62309830,\"onlineRunningTime\":121201.8099987992,\"pid\":2841505,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":27387.00000000125,\"onlineMoneyMade\":25199919,\"onlineRunningTime\":121201.8099987992,\"pid\":2841506,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26577.600000001068,\"onlineMoneyMade\":24519262,\"onlineRunningTime\":121201.8099987992,\"pid\":2841507,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":44768.64000000422,\"onlineMoneyMade\":95624041,\"onlineRunningTime\":121201.8099987992,\"pid\":2841508,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":49313.33999999579,\"onlineMoneyMade\":35944676,\"onlineRunningTime\":121201.8099987992,\"pid\":2841509,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":53887.6800000058,\"onlineMoneyMade\":54517518,\"onlineRunningTime\":121201.8099987992,\"pid\":2841510,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":37434.660000000506,\"onlineMoneyMade\":34058516,\"onlineRunningTime\":121201.8099987992,\"pid\":2841511,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":56154.48000001254,\"onlineMoneyMade\":35176759,\"onlineRunningTime\":121201.8099987992,\"pid\":2841512,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-5-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24399.14400000733,\"onlineMoneyMade\":4340133,\"onlineRunningTime\":121201.8099987992,\"pid\":2841513,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1291.2100000001565,\"pid\":4750709,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1040.6100000000995,\"pid\":4755188,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1040.6100000000995,\"pid\":4755189,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":970.6100000000837,\"pid\":4756626,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":940.6100000000769,\"pid\":4757132,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":940.6100000000769,\"pid\":4757133,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.60999999998245,\"pid\":4765414,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.60999999998245,\"pid\":4765415,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.60999999998415,\"pid\":4766050,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.60999999998415,\"pid\":4766051,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999847,\"pid\":4766167,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999847,\"pid\":4766168,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":379.609999999987,\"pid\":4766968,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":379.609999999987,\"pid\":4766969,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":359.60999999998813,\"pid\":4767352,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.40999999999778,\"pid\":4770394,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.40999999999778,\"pid\":4770395,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.21000000000045,\"pid\":4772538,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.21000000000045,\"pid\":4772539,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.210000000000306,\"pid\":4772691,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.210000000000306,\"pid\":4772692,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.210000000000306,\"pid\":4772693,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000002,\"pid\":4773101,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000002,\"pid\":4773102,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000002,\"pid\":4773103,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.00999999999993,\"pid\":4773265,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.00999999999993,\"pid\":4773266,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.009999999999966,\"pid\":4773387,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.009999999999966,\"pid\":4773388,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.009999999999966,\"pid\":4773390,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.010000000000002,\"pid\":4773632,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.010000000000002,\"pid\":4773633,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.010000000000002,\"pid\":4773634,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-5-0\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"moduleSequenceNumber\":368989}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-5-0\",\"moduleSequenceNumber\":368990}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-5-0\",\"moduleSequenceNumber\":368991}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-5-0\",\"moduleSequenceNumber\":403029}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///6fa84156-5f3f-4085-96dc-c9ea623ab453\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///6fa84156-5f3f-4085-96dc-c9ea623ab453\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-5-0\",\"moduleSequenceNumber\":403488}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-6-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-6-0\",\"httpPortOpen\":false,\"ip\":\"26.2.8.9\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":191.59999999999997,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3696.3899999999885,\"onlineMoneyMade\":230546,\"onlineRunningTime\":121201.8099987992,\"pid\":2841514,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3867.45,\"onlineMoneyMade\":831158,\"onlineRunningTime\":121201.8099987992,\"pid\":2841515,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4376.736000000005,\"onlineMoneyMade\":2927828,\"onlineRunningTime\":121201.8099987992,\"pid\":2841516,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4355.009999999986,\"onlineMoneyMade\":2372083,\"onlineRunningTime\":121201.8099987992,\"pid\":2841517,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6255.210000000025,\"onlineMoneyMade\":36347371,\"onlineRunningTime\":121201.8099987992,\"pid\":2841518,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5139.419999999977,\"onlineMoneyMade\":17617608,\"onlineRunningTime\":121201.8099987992,\"pid\":2841519,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5330.639999999992,\"onlineMoneyMade\":23733926,\"onlineRunningTime\":121201.8099987992,\"pid\":2841520,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6907.03200000002,\"onlineMoneyMade\":17018810,\"onlineRunningTime\":121201.8099987992,\"pid\":2841521,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8719.128000000106,\"onlineMoneyMade\":39166555,\"onlineRunningTime\":121201.8099987992,\"pid\":2841522,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7915.536000000013,\"onlineMoneyMade\":28445209,\"onlineRunningTime\":121201.8099987992,\"pid\":2841523,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12226.560000000056,\"onlineMoneyMade\":74638120,\"onlineRunningTime\":121201.8099987992,\"pid\":2841524,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19675.844999998862,\"onlineMoneyMade\":182987093,\"onlineRunningTime\":121201.8099987992,\"pid\":2841525,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17695.080000000096,\"onlineMoneyMade\":60798693,\"onlineRunningTime\":121201.8099987992,\"pid\":2841526,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20978.16000000011,\"onlineMoneyMade\":79010276,\"onlineRunningTime\":121201.8099987992,\"pid\":2841527,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24865.050000001036,\"onlineMoneyMade\":63034843,\"onlineRunningTime\":121201.8099987992,\"pid\":2841528,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26599.05000000119,\"onlineMoneyMade\":26184768,\"onlineRunningTime\":121201.8099987992,\"pid\":2841529,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25919.040000000954,\"onlineMoneyMade\":23457430,\"onlineRunningTime\":121201.8099987992,\"pid\":2841530,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24951.360000000786,\"onlineMoneyMade\":9211099,\"onlineRunningTime\":121201.8099987992,\"pid\":2841531,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":48120.479999995914,\"onlineMoneyMade\":37526338,\"onlineRunningTime\":121201.8099987992,\"pid\":2841532,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":55083.84000000601,\"onlineMoneyMade\":68297881,\"onlineRunningTime\":121201.8099987992,\"pid\":2841533,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":39924.660000002106,\"onlineMoneyMade\":43334232,\"onlineRunningTime\":121201.8099987992,\"pid\":2841534,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":55671.42000001223,\"onlineMoneyMade\":33219007,\"onlineRunningTime\":121201.8099987992,\"pid\":2841535,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-6-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24271.63200000721,\"onlineMoneyMade\":4357291,\"onlineRunningTime\":121201.8099987992,\"pid\":2841536,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1260.8100000001496,\"pid\":4751173,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1000.4100000000905,\"pid\":4756004,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1000.4100000000905,\"pid\":4756005,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":970.4100000000836,\"pid\":4756629,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":970.4100000000836,\"pid\":4756630,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":900.2100000000677,\"pid\":4757842,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":469.6099999999819,\"pid\":4765256,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":469.6099999999819,\"pid\":4765257,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.60999999998245,\"pid\":4765428,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.60999999998245,\"pid\":4765429,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.40999999998473,\"pid\":4766177,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.40999999998473,\"pid\":4766178,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":349.2099999999887,\"pid\":4767575,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":349.2099999999887,\"pid\":4767576,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":329.20999999998986,\"pid\":4767902,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":329.20999999998986,\"pid\":4767903,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":179.00999999999837,\"pid\":4770522,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":179.00999999999837,\"pid\":4770523,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":109.01000000000101,\"pid\":4771802,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.01000000000059,\"pid\":4772340,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.01000000000059,\"pid\":4772341,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.01000000000059,\"pid\":4772342,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.01000000000059,\"pid\":4772343,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.01000000000045,\"pid\":4772543,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.01000000000045,\"pid\":4772544,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.01000000000016,\"pid\":4772957,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.00999999999993,\"pid\":4773267,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.809999999999967,\"pid\":4773399,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.809999999999967,\"pid\":4773400,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.809999999999967,\"pid\":4773402,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"moduleSequenceNumber\":368994}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-6-0\",\"moduleSequenceNumber\":368995}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-6-0\",\"moduleSequenceNumber\":368996}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-6-0\",\"moduleSequenceNumber\":403031}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///1887df61-174d-4fbc-bc69-4494f8351336\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///1887df61-174d-4fbc-bc69-4494f8351336\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-6-0\",\"moduleSequenceNumber\":403511}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-7-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-7-0\",\"httpPortOpen\":false,\"ip\":\"4.8.9.6\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":203.74999999999994,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3696.3899999999885,\"onlineMoneyMade\":230591,\"onlineRunningTime\":121201.8099987992,\"pid\":2841537,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3827.094,\"onlineMoneyMade\":273474,\"onlineRunningTime\":121201.8099987992,\"pid\":2841538,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4429.1520000000055,\"onlineMoneyMade\":3684313,\"onlineRunningTime\":121201.8099987992,\"pid\":2841539,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4528.16099999999,\"onlineMoneyMade\":3602165,\"onlineRunningTime\":121201.8099987992,\"pid\":2841540,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6271.995000000026,\"onlineMoneyMade\":37129609,\"onlineRunningTime\":121201.8099987992,\"pid\":2841541,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5152.289999999976,\"onlineMoneyMade\":17859341,\"onlineRunningTime\":121201.8099987992,\"pid\":2841542,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6305.586000000003,\"onlineMoneyMade\":56165300,\"onlineRunningTime\":121201.8099987992,\"pid\":2841543,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6940.080000000021,\"onlineMoneyMade\":17651854,\"onlineRunningTime\":121201.8099987992,\"pid\":2841544,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8572.476000000104,\"onlineMoneyMade\":34491835,\"onlineRunningTime\":121201.8099987992,\"pid\":2841545,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8246.664000000013,\"onlineMoneyMade\":31923656,\"onlineRunningTime\":121201.8099987992,\"pid\":2841546,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12223.575000000055,\"onlineMoneyMade\":82663998,\"onlineRunningTime\":121201.8099987992,\"pid\":2841547,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19345.90499999889,\"onlineMoneyMade\":183499798,\"onlineRunningTime\":121201.8099987992,\"pid\":2841548,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17456.28000000012,\"onlineMoneyMade\":60332330,\"onlineRunningTime\":121201.8099987992,\"pid\":2841549,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24548.160000000727,\"onlineMoneyMade\":144689879,\"onlineRunningTime\":121201.8099987992,\"pid\":2841550,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24571.800000001018,\"onlineMoneyMade\":62825729,\"onlineRunningTime\":121201.8099987992,\"pid\":2841551,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24296.400000001035,\"onlineMoneyMade\":20902918,\"onlineRunningTime\":121201.8099987992,\"pid\":2841552,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28667.52000000143,\"onlineMoneyMade\":35828484,\"onlineRunningTime\":121201.8099987992,\"pid\":2841553,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":44607.36000000419,\"onlineMoneyMade\":95184637,\"onlineRunningTime\":121201.8099987992,\"pid\":2841554,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":56089.79999999509,\"onlineMoneyMade\":67701867,\"onlineRunningTime\":121201.8099987992,\"pid\":2841555,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":51999.36000000547,\"onlineMoneyMade\":58614424,\"onlineRunningTime\":121201.8099987992,\"pid\":2841556,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38460.540000001165,\"onlineMoneyMade\":33821707,\"onlineRunningTime\":121201.8099987992,\"pid\":2841557,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":55148.52000001189,\"onlineMoneyMade\":32431784,\"onlineRunningTime\":121201.8099987992,\"pid\":2841558,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-7-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":23031.624000006017,\"onlineMoneyMade\":3900570,\"onlineRunningTime\":121201.8099987992,\"pid\":2841559,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1250.6100000001472,\"pid\":4751442,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1040.2100000000994,\"pid\":4755221,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1040.2100000000994,\"pid\":4755222,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":970.2100000000836,\"pid\":4756632,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":970.2100000000836,\"pid\":4756633,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":880.0100000000631,\"pid\":4758226,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":449.20999999998304,\"pid\":4765664,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":449.20999999998304,\"pid\":4765665,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":389.20999999998645,\"pid\":4766799,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":389.20999999998645,\"pid\":4766800,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":389.20999999998645,\"pid\":4766801,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":379.00999999998703,\"pid\":4766989,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":379.00999999998703,\"pid\":4766990,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":379.00999999998703,\"pid\":4766992,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":379.00999999998703,\"pid\":4766993,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":329.0099999999899,\"pid\":4767906,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":329.0099999999899,\"pid\":4767907,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":218.8099999999961,\"pid\":4769820,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.61000000000115,\"pid\":4771603,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":108.81000000000101,\"pid\":4771814,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":88.61000000000072,\"pid\":4772173,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.61000000000058,\"pid\":4772354,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.61000000000058,\"pid\":4772355,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.61000000000058,\"pid\":4772356,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.61000000000044,\"pid\":4772547,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.61000000000044,\"pid\":4772548,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.610000000000156,\"pid\":4772963,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.610000000000014,\"pid\":4773119,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.610000000000014,\"pid\":4773120,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.609999999999967,\"pid\":4773411,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.609999999999967,\"pid\":4773412,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.609999999999967,\"pid\":4773414,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.609999999999967,\"pid\":4773415,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.609999999999967,\"pid\":4773417,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"pid\":4773635,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"pid\":4773636,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"pid\":4773637,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-7-0\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"moduleSequenceNumber\":368999}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-7-0\",\"moduleSequenceNumber\":369000}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-7-0\",\"moduleSequenceNumber\":369001}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-7-0\",\"moduleSequenceNumber\":403033}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///3ed5db44-bbeb-4edd-977f-0b081f1e5e29\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///3ed5db44-bbeb-4edd-977f-0b081f1e5e29\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-7-0\",\"moduleSequenceNumber\":403534}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-8-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-8-0\",\"httpPortOpen\":false,\"ip\":\"40.5.6.4\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":201.94999999999993,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3678.299999999989,\"onlineMoneyMade\":0,\"onlineRunningTime\":121201.8099987992,\"pid\":2841560,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3827.094,\"onlineMoneyMade\":273516,\"onlineRunningTime\":121201.8099987992,\"pid\":2841561,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4350.528000000006,\"onlineMoneyMade\":2631050,\"onlineRunningTime\":121201.8099987992,\"pid\":2841562,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4465.196999999989,\"onlineMoneyMade\":3196359,\"onlineRunningTime\":121201.8099987992,\"pid\":2841563,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6188.070000000024,\"onlineMoneyMade\":33273300,\"onlineRunningTime\":121201.8099987992,\"pid\":2841564,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5280.989999999975,\"onlineMoneyMade\":21815779,\"onlineRunningTime\":121201.8099987992,\"pid\":2841565,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6252.981000000003,\"onlineMoneyMade\":47462776,\"onlineRunningTime\":121201.8099987992,\"pid\":2841566,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6890.50800000002,\"onlineMoneyMade\":16717339,\"onlineRunningTime\":121201.8099987992,\"pid\":2841567,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7929.207000000089,\"onlineMoneyMade\":27037951,\"onlineRunningTime\":121201.8099987992,\"pid\":2841568,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7765.7400000000125,\"onlineMoneyMade\":26836177,\"onlineRunningTime\":121201.8099987992,\"pid\":2841569,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11740.005000000034,\"onlineMoneyMade\":87409918,\"onlineRunningTime\":121201.8099987992,\"pid\":2841570,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12833.819999999552,\"onlineMoneyMade\":10877560,\"onlineRunningTime\":121201.8099987992,\"pid\":2841571,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16921.965000000175,\"onlineMoneyMade\":51077782,\"onlineRunningTime\":121201.8099987992,\"pid\":2841572,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24647.28000000074,\"onlineMoneyMade\":146343580,\"onlineRunningTime\":121201.8099987992,\"pid\":2841573,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11689.20000000015,\"onlineMoneyMade\":7150179,\"onlineRunningTime\":121201.8099987992,\"pid\":2841574,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":34432.65000000116,\"onlineMoneyMade\":58486889,\"onlineRunningTime\":121201.8099987992,\"pid\":2841575,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26537.28000000106,\"onlineMoneyMade\":44631338,\"onlineRunningTime\":121201.8099987992,\"pid\":2841576,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":44284.800000004136,\"onlineMoneyMade\":94426483,\"onlineRunningTime\":121201.8099987992,\"pid\":2841577,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":56199.77999999508,\"onlineMoneyMade\":67461788,\"onlineRunningTime\":121201.8099987992,\"pid\":2841578,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":44217.600000004124,\"onlineMoneyMade\":28146239,\"onlineRunningTime\":121201.8099987992,\"pid\":2841579,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":39720.480000001975,\"onlineMoneyMade\":38778520,\"onlineRunningTime\":121201.8099987992,\"pid\":2841580,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":54167.46000001126,\"onlineMoneyMade\":30978002,\"onlineRunningTime\":121201.8099987992,\"pid\":2841581,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-8-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21758.352000004794,\"onlineMoneyMade\":3330972,\"onlineRunningTime\":121201.8099987992,\"pid\":2841582,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1240.2100000001449,\"pid\":4751577,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1009.8100000000926,\"pid\":4755854,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1009.8100000000926,\"pid\":4755855,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":999.8100000000903,\"pid\":4756027,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":999.8100000000903,\"pid\":4756028,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":879.610000000063,\"pid\":4758234,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":489.0099999999808,\"pid\":4764955,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":489.0099999999808,\"pid\":4764956,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.0099999999842,\"pid\":4766062,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.0099999999842,\"pid\":4766063,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":388.8099999999865,\"pid\":4766802,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":388.8099999999865,\"pid\":4766803,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":388.8099999999865,\"pid\":4766804,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":368.8099999999876,\"pid\":4767232,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":368.8099999999876,\"pid\":4767233,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":358.6099999999882,\"pid\":4767382,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":218.40999999999613,\"pid\":4769834,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":98.41000000000086,\"pid\":4771989,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.41000000000044,\"pid\":4772550,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.41000000000044,\"pid\":4772551,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.41000000000044,\"pid\":4772552,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.41000000000001,\"pid\":4773129,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.41000000000001,\"pid\":4773130,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.409999999999933,\"pid\":4773268,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.409999999999933,\"pid\":4773269,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.409999999999933,\"pid\":4773270,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.20999999999997,\"pid\":4773426,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.20999999999997,\"pid\":4773427,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.410000000000004,\"pid\":4773638,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.210000000000004,\"pid\":4773639,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.210000000000004,\"pid\":4773640,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.210000000000004,\"pid\":4773641,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.210000000000004,\"pid\":4773642,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.210000000000004,\"pid\":4773643,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.210000000000004,\"pid\":4773644,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.210000000000004,\"pid\":4773645,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"moduleSequenceNumber\":369004}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-8-0\",\"moduleSequenceNumber\":369005}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-8-0\",\"moduleSequenceNumber\":369006}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-8-0\",\"moduleSequenceNumber\":403035}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///3d05eb43-3efc-4211-b7f3-b1719715eed4\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///3d05eb43-3efc-4211-b7f3-b1719715eed4\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-8-0\",\"moduleSequenceNumber\":403557}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-9-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-9-0\",\"httpPortOpen\":false,\"ip\":\"14.3.5.1\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":207.24999999999994,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3714.479999999988,\"onlineMoneyMade\":461077,\"onlineRunningTime\":121201.8099987992,\"pid\":2841583,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3867.45,\"onlineMoneyMade\":831008,\"onlineRunningTime\":121201.8099987992,\"pid\":2841584,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4527.432000000003,\"onlineMoneyMade\":5018148,\"onlineRunningTime\":121201.8099987992,\"pid\":2841585,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4402.232999999987,\"onlineMoneyMade\":2731272,\"onlineRunningTime\":121201.8099987992,\"pid\":2841586,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6171.285000000028,\"onlineMoneyMade\":32439344,\"onlineRunningTime\":121201.8099987992,\"pid\":2841587,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5126.549999999977,\"onlineMoneyMade\":17156174,\"onlineRunningTime\":121201.8099987992,\"pid\":2841588,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5712.902999999997,\"onlineMoneyMade\":27040913,\"onlineRunningTime\":121201.8099987992,\"pid\":2841589,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6956.60400000002,\"onlineMoneyMade\":17974910,\"onlineRunningTime\":121201.8099987992,\"pid\":2841590,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9829.017000000125,\"onlineMoneyMade\":72515110,\"onlineRunningTime\":121201.8099987992,\"pid\":2841591,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8140.230000000013,\"onlineMoneyMade\":29483251,\"onlineRunningTime\":121201.8099987992,\"pid\":2841592,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10662.41999999998,\"onlineMoneyMade\":76787330,\"onlineRunningTime\":121201.8099987992,\"pid\":2841593,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15113.789999999317,\"onlineMoneyMade\":14696530,\"onlineRunningTime\":121201.8099987992,\"pid\":2841594,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17253.300000000145,\"onlineMoneyMade\":56194828,\"onlineRunningTime\":121201.8099987992,\"pid\":2841595,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":23990.40000000063,\"onlineMoneyMade\":139221796,\"onlineRunningTime\":121201.8099987992,\"pid\":2841596,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19321.35000000066,\"onlineMoneyMade\":39618615,\"onlineRunningTime\":121201.8099987992,\"pid\":2841597,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":32645.10000000158,\"onlineMoneyMade\":48171042,\"onlineRunningTime\":121201.8099987992,\"pid\":2841598,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24185.280000000654,\"onlineMoneyMade\":37429115,\"onlineRunningTime\":121201.8099987992,\"pid\":2841599,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":45024.000000004264,\"onlineMoneyMade\":97889926,\"onlineRunningTime\":121201.8099987992,\"pid\":2841600,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":59152.319999994776,\"onlineMoneyMade\":78391015,\"onlineRunningTime\":121201.8099987992,\"pid\":2841601,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":48451.20000000486,\"onlineMoneyMade\":49342461,\"onlineRunningTime\":121201.8099987992,\"pid\":2841602,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":40631.82000000256,\"onlineMoneyMade\":38195522,\"onlineRunningTime\":121201.8099987992,\"pid\":2841603,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":53281.02000001069,\"onlineMoneyMade\":29093227,\"onlineRunningTime\":121201.8099987992,\"pid\":2841604,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-9-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21226.128000004283,\"onlineMoneyMade\":3066800,\"onlineRunningTime\":121201.8099987992,\"pid\":2841605,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1260.0100000001494,\"pid\":4751211,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":999.6100000000903,\"pid\":4756036,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":999.6100000000903,\"pid\":4756037,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":959.6100000000812,\"pid\":4756793,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":959.6100000000812,\"pid\":4756794,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":879.410000000063,\"pid\":4758246,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":458.8099999999825,\"pid\":4765462,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":458.8099999999825,\"pid\":4765463,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":408.80999999998534,\"pid\":4766458,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":408.80999999998534,\"pid\":4766459,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":398.6099999999859,\"pid\":4766635,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":388.6099999999865,\"pid\":4766809,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":388.6099999999865,\"pid\":4766810,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":388.6099999999865,\"pid\":4766811,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":358.6099999999882,\"pid\":4767393,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":358.6099999999882,\"pid\":4767394,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":168.20999999999898,\"pid\":4770765,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.01000000000114,\"pid\":4771621,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":98.21000000000086,\"pid\":4771999,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":98.21000000000086,\"pid\":4772000,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":98.21000000000086,\"pid\":4772001,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.01000000000043,\"pid\":4772560,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.01000000000043,\"pid\":4772561,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.01000000000015,\"pid\":4772971,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.01000000000015,\"pid\":4772972,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.010000000000005,\"pid\":4773138,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.010000000000005,\"pid\":4773139,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.009999999999934,\"pid\":4773274,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.009999999999934,\"pid\":4773275,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.00999999999997,\"pid\":4773435,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.00999999999997,\"pid\":4773436,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.00999999999997,\"pid\":4773438,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.00999999999997,\"pid\":4773439,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.010000000000005,\"pid\":4773646,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.010000000000005,\"pid\":4773647,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.010000000000005,\"pid\":4773648,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.010000000000005,\"pid\":4773649,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.010000000000005,\"pid\":4773650,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.010000000000005,\"pid\":4773651,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"moduleSequenceNumber\":369009}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-9-0\",\"moduleSequenceNumber\":369010}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-9-0\",\"moduleSequenceNumber\":369011}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-9-0\",\"moduleSequenceNumber\":403037}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///a8faf67d-4ec5-4a08-9cca-245720cac530\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///a8faf67d-4ec5-4a08-9cca-245720cac530\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-9-0\",\"moduleSequenceNumber\":403580}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-10-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-10-0\",\"httpPortOpen\":false,\"ip\":\"14.2.5.9\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":203.74999999999994,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3678.299999999989,\"onlineMoneyMade\":0,\"onlineRunningTime\":121201.8099987992,\"pid\":2841606,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3847.272,\"onlineMoneyMade\":552273,\"onlineRunningTime\":121201.8099987992,\"pid\":2841607,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4507.7760000000035,\"onlineMoneyMade\":4753572,\"onlineRunningTime\":121201.8099987992,\"pid\":2841608,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4528.16099999999,\"onlineMoneyMade\":3596202,\"onlineRunningTime\":121201.8099987992,\"pid\":2841609,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6154.500000000022,\"onlineMoneyMade\":31690549,\"onlineRunningTime\":121201.8099987992,\"pid\":2841610,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5203.769999999976,\"onlineMoneyMade\":19448453,\"onlineRunningTime\":121201.8099987992,\"pid\":2841611,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5649.776999999994,\"onlineMoneyMade\":26417539,\"onlineRunningTime\":121201.8099987992,\"pid\":2841612,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6873.984000000021,\"onlineMoneyMade\":16433283,\"onlineRunningTime\":121201.8099987992,\"pid\":2841613,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8509.149000000092,\"onlineMoneyMade\":45031586,\"onlineRunningTime\":121201.8099987992,\"pid\":2841614,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8152.056000000013,\"onlineMoneyMade\":29754621,\"onlineRunningTime\":121201.8099987992,\"pid\":2841615,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12575.80500000007,\"onlineMoneyMade\":87655327,\"onlineRunningTime\":121201.8099987992,\"pid\":2841616,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19005.38999999893,\"onlineMoneyMade\":141265286,\"onlineRunningTime\":121201.8099987992,\"pid\":2841617,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16145.86500000023,\"onlineMoneyMade\":51759916,\"onlineRunningTime\":121201.8099987992,\"pid\":2841618,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17011.67999999942,\"onlineMoneyMade\":72966761,\"onlineRunningTime\":121201.8099987992,\"pid\":2841619,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18992.40000000063,\"onlineMoneyMade\":38480495,\"onlineRunningTime\":121201.8099987992,\"pid\":2841620,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28213.200000001314,\"onlineMoneyMade\":20416319,\"onlineRunningTime\":121201.8099987992,\"pid\":2841621,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22942.08000000044,\"onlineMoneyMade\":34090148,\"onlineRunningTime\":121201.8099987992,\"pid\":2841622,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":45097.92000000428,\"onlineMoneyMade\":97843760,\"onlineRunningTime\":121201.8099987992,\"pid\":2841623,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":57308.039999994966,\"onlineMoneyMade\":66697953,\"onlineRunningTime\":121201.8099987992,\"pid\":2841624,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":48491.520000004864,\"onlineMoneyMade\":47585724,\"onlineRunningTime\":121201.8099987992,\"pid\":2841625,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":43067.040000004126,\"onlineMoneyMade\":55388987,\"onlineRunningTime\":121201.8099987992,\"pid\":2841626,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":52245.18000001003,\"onlineMoneyMade\":27275804,\"onlineRunningTime\":121201.8099987992,\"pid\":2841627,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-10-0\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20416.704000003505,\"onlineMoneyMade\":2645038,\"onlineRunningTime\":121201.8099987992,\"pid\":2841628,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1279.8100000001539,\"pid\":4750904,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":989.2100000000879,\"pid\":4756174,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":989.2100000000879,\"pid\":4756175,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":969.2100000000834,\"pid\":4756643,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":969.2100000000834,\"pid\":4756644,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":879.0100000000629,\"pid\":4758254,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":518.409999999981,\"pid\":4764374,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":518.409999999981,\"pid\":4764375,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":408.20999999998537,\"pid\":4766467,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":388.2099999999865,\"pid\":4766815,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":388.2099999999865,\"pid\":4766816,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":388.2099999999865,\"pid\":4766817,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":388.2099999999865,\"pid\":4766818,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":388.2099999999865,\"pid\":4766819,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":358.2099999999882,\"pid\":4767403,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":358.2099999999882,\"pid\":4767404,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":188.00999999999786,\"pid\":4770413,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":188.00999999999786,\"pid\":4770414,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":168.009999999999,\"pid\":4770772,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.01000000000114,\"pid\":4771634,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":98.01000000000086,\"pid\":4772010,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":98.01000000000086,\"pid\":4772011,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":98.01000000000086,\"pid\":4772012,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":88.01000000000072,\"pid\":4772181,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":88.01000000000072,\"pid\":4772182,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000057,\"pid\":4772383,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000057,\"pid\":4772384,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.80999999999997,\"pid\":4773447,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.80999999999997,\"pid\":4773448,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.80999999999997,\"pid\":4773450,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.80999999999997,\"pid\":4773451,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.810000000000005,\"pid\":4773652,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.810000000000005,\"pid\":4773653,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.810000000000005,\"pid\":4773654,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.810000000000005,\"pid\":4773655,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.610000000000005,\"pid\":4773656,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.610000000000005,\"pid\":4773657,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"moduleSequenceNumber\":369014}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-10-0\",\"moduleSequenceNumber\":369015}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-10-0\",\"moduleSequenceNumber\":369016}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-10-0\",\"moduleSequenceNumber\":403039}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///5c7aaa7b-4093-4203-973d-c2d5ddf2475d\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///5c7aaa7b-4093-4203-973d-c2d5ddf2475d\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-10-0\",\"moduleSequenceNumber\":403603}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-11\",\"httpPortOpen\":false,\"ip\":\"27.2.3.7\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":208.99999999999994,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3678.299999999989,\"onlineMoneyMade\":0,\"onlineRunningTime\":121201.8099987992,\"pid\":2841629,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3806.9159999999997,\"onlineMoneyMade\":273326,\"onlineRunningTime\":121201.8099987992,\"pid\":2841630,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4527.432000000003,\"onlineMoneyMade\":5007632,\"onlineRunningTime\":121201.8099987992,\"pid\":2841631,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4480.937999999988,\"onlineMoneyMade\":3296343,\"onlineRunningTime\":121201.8099987992,\"pid\":2841632,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6238.425000000026,\"onlineMoneyMade\":35595875,\"onlineRunningTime\":121201.8099987992,\"pid\":2841633,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5229.509999999976,\"onlineMoneyMade\":20220305,\"onlineRunningTime\":121201.8099987992,\"pid\":2841634,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5677.832999999995,\"onlineMoneyMade\":27060529,\"onlineRunningTime\":121201.8099987992,\"pid\":2841635,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6824.41200000002,\"onlineMoneyMade\":17050617,\"onlineRunningTime\":121201.8099987992,\"pid\":2841636,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9849.015000000129,\"onlineMoneyMade\":70815752,\"onlineRunningTime\":121201.8099987992,\"pid\":2841637,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8175.708000000013,\"onlineMoneyMade\":30281102,\"onlineRunningTime\":121201.8099987992,\"pid\":2841638,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12145.965000000047,\"onlineMoneyMade\":77229220,\"onlineRunningTime\":121201.8099987992,\"pid\":2841639,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20081.924999998828,\"onlineMoneyMade\":181875803,\"onlineRunningTime\":121201.8099987992,\"pid\":2841640,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15333.945000000193,\"onlineMoneyMade\":51974132,\"onlineRunningTime\":121201.8099987992,\"pid\":2841641,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24731.280000000756,\"onlineMoneyMade\":147960449,\"onlineRunningTime\":121201.8099987992,\"pid\":2841642,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25415.85000000106,\"onlineMoneyMade\":65769202,\"onlineRunningTime\":121201.8099987992,\"pid\":2841643,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":32443.65000000157,\"onlineMoneyMade\":46949409,\"onlineRunningTime\":121201.8099987992,\"pid\":2841644,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":34151.04000000238,\"onlineMoneyMade\":83771924,\"onlineRunningTime\":121201.8099987992,\"pid\":2841645,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20307.839999999982,\"onlineMoneyMade\":12137704,\"onlineRunningTime\":121201.8099987992,\"pid\":2841646,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":57308.039999994966,\"onlineMoneyMade\":67047834,\"onlineRunningTime\":121201.8099987992,\"pid\":2841647,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":49936.320000005115,\"onlineMoneyMade\":55608134,\"onlineRunningTime\":121201.8099987992,\"pid\":2841648,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":43296.12000000427,\"onlineMoneyMade\":59945467,\"onlineRunningTime\":121201.8099987992,\"pid\":2841649,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":50805.9600000091,\"onlineMoneyMade\":25759815,\"onlineRunningTime\":121201.8099987992,\"pid\":2841650,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-11\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20797.39200000387,\"onlineMoneyMade\":2844871,\"onlineRunningTime\":121201.8099987992,\"pid\":2841651,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1269.6100000001516,\"pid\":4751063,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":989.0100000000879,\"pid\":4756177,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":989.0100000000879,\"pid\":4756178,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":898.6100000000673,\"pid\":4757903,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":898.6100000000673,\"pid\":4757904,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":878.6100000000628,\"pid\":4758262,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":508.0099999999797,\"pid\":4764521,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":508.0099999999797,\"pid\":4764522,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":387.80999999998653,\"pid\":4766824,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":387.80999999998653,\"pid\":4766825,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":387.80999999998653,\"pid\":4766826,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":367.80999999998767,\"pid\":4767248,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":367.80999999998767,\"pid\":4767249,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.80999999998824,\"pid\":4767415,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.80999999998824,\"pid\":4767416,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":177.60999999999845,\"pid\":4770566,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":157.6099999999996,\"pid\":4770947,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":157.6099999999996,\"pid\":4770948,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":137.61000000000072,\"pid\":4771249,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":137.61000000000072,\"pid\":4771250,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":137.61000000000072,\"pid\":4771251,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.610000000001,\"pid\":4771843,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.41000000000085,\"pid\":4772021,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.41000000000085,\"pid\":4772022,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.41000000000085,\"pid\":4772023,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.41000000000028,\"pid\":4772759,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.41000000000028,\"pid\":4772760,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.41,\"pid\":4773151,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.41,\"pid\":4773152,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999936,\"pid\":4773281,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999936,\"pid\":4773282,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999936,\"pid\":4773284,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999936,\"pid\":4773285,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.40999999999997,\"pid\":4773460,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.40999999999997,\"pid\":4773461,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.40999999999997,\"pid\":4773463,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.40999999999997,\"pid\":4773464,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.40999999999997,\"pid\":4773466,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.410000000000005,\"pid\":4773658,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.410000000000005,\"pid\":4773659,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"moduleSequenceNumber\":368844}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-11\",\"moduleSequenceNumber\":368845}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-11\",\"moduleSequenceNumber\":368846}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-11\",\"moduleSequenceNumber\":403041}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///fb3a7065-f4e0-4c98-9d70-1bb3d1e5a02e\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///fb3a7065-f4e0-4c98-9d70-1bb3d1e5a02e\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-11\",\"moduleSequenceNumber\":403626}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-12\",\"httpPortOpen\":false,\"ip\":\"88.6.2.8\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":214.14999999999992,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3696.3899999999885,\"onlineMoneyMade\":230516,\"onlineRunningTime\":121201.8099987992,\"pid\":2841652,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3847.272,\"onlineMoneyMade\":557566,\"onlineRunningTime\":121201.8099987992,\"pid\":2841653,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4409.496000000005,\"onlineMoneyMade\":3435549,\"onlineRunningTime\":121201.8099987992,\"pid\":2841654,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4386.491999999987,\"onlineMoneyMade\":2607492,\"onlineRunningTime\":121201.8099987992,\"pid\":2841655,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6221.640000000024,\"onlineMoneyMade\":34782369,\"onlineRunningTime\":121201.8099987992,\"pid\":2841656,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5229.509999999977,\"onlineMoneyMade\":20273774,\"onlineRunningTime\":121201.8099987992,\"pid\":2841657,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6663.300000000004,\"onlineMoneyMade\":61424854,\"onlineRunningTime\":121201.8099987992,\"pid\":2841658,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6940.080000000021,\"onlineMoneyMade\":17673510,\"onlineRunningTime\":121201.8099987992,\"pid\":2841659,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10588.94100000015,\"onlineMoneyMade\":94349748,\"onlineRunningTime\":121201.8099987992,\"pid\":2841660,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8211.186000000012,\"onlineMoneyMade\":31125226,\"onlineRunningTime\":121201.8099987992,\"pid\":2841661,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12659.385000000071,\"onlineMoneyMade\":83859957,\"onlineRunningTime\":121201.8099987992,\"pid\":2841662,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11624.039999999677,\"onlineMoneyMade\":13219300,\"onlineRunningTime\":121201.8099987992,\"pid\":2841663,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17584.635000000108,\"onlineMoneyMade\":51984815,\"onlineRunningTime\":121201.8099987992,\"pid\":2841664,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15311.519999999411,\"onlineMoneyMade\":58989376,\"onlineRunningTime\":121201.8099987992,\"pid\":2841665,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26007.450000001114,\"onlineMoneyMade\":68562253,\"onlineRunningTime\":121201.8099987992,\"pid\":2841666,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":32022.900000001548,\"onlineMoneyMade\":46191065,\"onlineRunningTime\":121201.8099987992,\"pid\":2841667,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22901.76000000043,\"onlineMoneyMade\":34526918,\"onlineRunningTime\":121201.8099987992,\"pid\":2841668,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":45259.200000004304,\"onlineMoneyMade\":97937856,\"onlineRunningTime\":121201.8099987992,\"pid\":2841669,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":57164.21999999498,\"onlineMoneyMade\":66850552,\"onlineRunningTime\":121201.8099987992,\"pid\":2841670,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":47281.920000004655,\"onlineMoneyMade\":47130287,\"onlineRunningTime\":121201.8099987992,\"pid\":2841671,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":41971.44000000342,\"onlineMoneyMade\":53418251,\"onlineRunningTime\":121201.8099987992,\"pid\":2841672,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":48445.440000007584,\"onlineMoneyMade\":23539526,\"onlineRunningTime\":121201.8099987992,\"pid\":2841673,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-12\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22264.70400000528,\"onlineMoneyMade\":3578568,\"onlineRunningTime\":121201.8099987992,\"pid\":2841674,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1239.2100000001446,\"pid\":4751610,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":988.6100000000878,\"pid\":4756186,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":988.6100000000878,\"pid\":4756187,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":958.610000000081,\"pid\":4756819,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":958.610000000081,\"pid\":4756820,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":918.4100000000718,\"pid\":4757548,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":437.6099999999837,\"pid\":4765873,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":437.6099999999837,\"pid\":4765874,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.60999999998427,\"pid\":4766075,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.60999999998427,\"pid\":4766076,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":397.609999999986,\"pid\":4766664,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":397.609999999986,\"pid\":4766665,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":387.60999999998654,\"pid\":4766833,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":387.60999999998654,\"pid\":4766834,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":387.60999999998654,\"pid\":4766835,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":137.21000000000075,\"pid\":4771264,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":137.21000000000075,\"pid\":4771265,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.21000000000099,\"pid\":4771852,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.21000000000085,\"pid\":4772033,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.21000000000085,\"pid\":4772034,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.21000000000085,\"pid\":4772035,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.21000000000042,\"pid\":4772574,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.21000000000042,\"pid\":4772575,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.21000000000042,\"pid\":4772576,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.209999999999994,\"pid\":4773159,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.209999999999994,\"pid\":4773160,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.209999999999937,\"pid\":4773289,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.209999999999937,\"pid\":4773290,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999972,\"pid\":4773472,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999972,\"pid\":4773473,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999972,\"pid\":4773474,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999972,\"pid\":4773475,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999972,\"pid\":4773476,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999972,\"pid\":4773478,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999972,\"pid\":4773479,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.009999999999973,\"pid\":4773481,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.009999999999973,\"pid\":4773484,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.210000000000004,\"pid\":4773660,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.210000000000004,\"pid\":4773661,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.210000000000004,\"pid\":4773662,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.210000000000004,\"pid\":4773663,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.210000000000004,\"pid\":4773664,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.210000000000004,\"pid\":4773665,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"moduleSequenceNumber\":372661}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-12\",\"moduleSequenceNumber\":372662}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-12\",\"moduleSequenceNumber\":372663}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-12\",\"moduleSequenceNumber\":403043}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///e32199ab-8765-4563-8806-0ed0074a55b0\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///e32199ab-8765-4563-8806-0ed0074a55b0\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-12\",\"moduleSequenceNumber\":403649}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096gb-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096gb-13\",\"httpPortOpen\":false,\"ip\":\"75.4.5.1\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":203.74999999999994,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3696.3899999999885,\"onlineMoneyMade\":230501,\"onlineRunningTime\":121201.8099987992,\"pid\":2841675,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3887.6279999999997,\"onlineMoneyMade\":1098974,\"onlineRunningTime\":121201.8099987992,\"pid\":2841676,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4468.464000000004,\"onlineMoneyMade\":4256332,\"onlineRunningTime\":121201.8099987992,\"pid\":2841677,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4417.9739999999865,\"onlineMoneyMade\":2836906,\"onlineRunningTime\":121201.8099987992,\"pid\":2841678,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6238.425000000027,\"onlineMoneyMade\":35590335,\"onlineRunningTime\":121201.8099987992,\"pid\":2841679,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5190.899999999976,\"onlineMoneyMade\":19087975,\"onlineRunningTime\":121201.8099987992,\"pid\":2841680,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6715.905000000003,\"onlineMoneyMade\":64744440,\"onlineRunningTime\":121201.8099987992,\"pid\":2841681,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6758.31600000002,\"onlineMoneyMade\":14264798,\"onlineRunningTime\":121201.8099987992,\"pid\":2841682,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10448.955000000145,\"onlineMoneyMade\":87778906,\"onlineRunningTime\":121201.8099987992,\"pid\":2841683,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8234.83800000001,\"onlineMoneyMade\":31690618,\"onlineRunningTime\":121201.8099987992,\"pid\":2841684,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12525.060000000063,\"onlineMoneyMade\":92107244,\"onlineRunningTime\":121201.8099987992,\"pid\":2841685,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19836.584999998868,\"onlineMoneyMade\":192369148,\"onlineRunningTime\":121201.8099987992,\"pid\":2841686,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17011.515000000167,\"onlineMoneyMade\":56003632,\"onlineRunningTime\":121201.8099987992,\"pid\":2841687,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17974.31999999958,\"onlineMoneyMade\":87258114,\"onlineRunningTime\":121201.8099987992,\"pid\":2841688,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19887.450000000725,\"onlineMoneyMade\":35139268,\"onlineRunningTime\":121201.8099987992,\"pid\":2841689,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":27047.85000000123,\"onlineMoneyMade\":16223234,\"onlineRunningTime\":121201.8099987992,\"pid\":2841690,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":23150.400000000474,\"onlineMoneyMade\":34619430,\"onlineRunningTime\":121201.8099987992,\"pid\":2841691,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31301.760000001887,\"onlineMoneyMade\":50399450,\"onlineRunningTime\":121201.8099987992,\"pid\":2841692,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":57310.154999994964,\"onlineMoneyMade\":67270634,\"onlineRunningTime\":121201.8099987992,\"pid\":2841693,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":51804.48000000544,\"onlineMoneyMade\":48777478,\"onlineRunningTime\":121201.8099987992,\"pid\":2841694,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":39142.8000000016,\"onlineMoneyMade\":42278104,\"onlineRunningTime\":121201.8099987992,\"pid\":2841695,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":47663.58000000708,\"onlineMoneyMade\":23106903,\"onlineRunningTime\":121201.8099987992,\"pid\":2841696,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",\"pserv-4096gb-13\",172,false],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21773.136000004808,\"onlineMoneyMade\":3352540,\"onlineRunningTime\":121201.8099987992,\"pid\":2841697,\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1249.0100000001469,\"pid\":4751469,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":988.4100000000877,\"pid\":4756189,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":988.4100000000877,\"pid\":4756190,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":958.4100000000809,\"pid\":4756833,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":958.4100000000809,\"pid\":4756834,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":948.4100000000786,\"pid\":4757021,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":457.4099999999826,\"pid\":4765509,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":457.4099999999826,\"pid\":4765510,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":437.4099999999837,\"pid\":4765885,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":437.4099999999837,\"pid\":4765886,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.4099999999843,\"pid\":4766081,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.4099999999843,\"pid\":4766082,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":387.40999999998655,\"pid\":4766837,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":387.40999999998655,\"pid\":4766838,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":387.40999999998655,\"pid\":4766839,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":127.01000000000127,\"pid\":4771520,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.01000000000084,\"pid\":4772044,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.01000000000084,\"pid\":4772045,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.01000000000084,\"pid\":4772046,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87.0100000000007,\"pid\":4772196,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87.0100000000007,\"pid\":4772197,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87.0100000000007,\"pid\":4772198,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.01000000000056,\"pid\":4772413,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.01000000000042,\"pid\":4772581,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.01000000000042,\"pid\":4772582,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.01000000000042,\"pid\":4772583,\"ramUsage\":1.7,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.010000000000275,\"pid\":4772781,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.010000000000275,\"pid\":4772782,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.809999999999974,\"pid\":4773487,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.809999999999974,\"pid\":4773488,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.809999999999974,\"pid\":4773490,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.809999999999974,\"pid\":4773493,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.010000000000004,\"pid\":4773666,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.010000000000004,\"pid\":4773667,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000004,\"pid\":4773668,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000004,\"pid\":4773669,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000004,\"pid\":4773670,\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"moduleSequenceNumber\":382536}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096gb-13\",\"moduleSequenceNumber\":382537}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096gb-13\",\"moduleSequenceNumber\":382538}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.nFormat(ns.getServerSecurityLevel(TARGET), '0.000');\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"pserv-4096gb-13\",\"moduleSequenceNumber\":403045}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let FML = ns.formulas;\\n\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(amt) {\\n        ns.print(`'Free RAM: ${DAEMON_RAM} - Amt: ${amt}`);\\n        return DAEMON_RAM > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor(DAEMON_RAM / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __getOptimalGrowThreads__(hackT) {\\n        let currMoney, moneyTillMax, hackPct;\\n\\n        if (hackT) {\\n            hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n            moneyTillMax = hackPct + maxMoney;\\n        } else {\\n            currMoney = ns.getServerMoneyAvailable(TARGET);\\n            moneyTillMax = maxMoney - currMoney;\\n        }\\n\\n        let growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n        let pctNeeded = moneyTillMax / maxMoney;\\n\\n        let growT = Math.ceil(pctNeeded / growPct);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / growRam);\\n\\n        ns.print(growT);\\n        ns.print(maxT);\\n\\n        if (IS_PSERV) {\\n            growT = Math.ceil(growT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(growT, maxT);\\n    }\\n\\n    function __getOptimalHackThreads__() {\\n        let moneyThreshold = maxMoney * 0.6;\\n        let hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n        let hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n        let hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n        let maxT = Math.floor((DAEMON_RAM - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n        if (IS_PSERV) {\\n            hackT = Math.ceil(hackT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(hackT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        growT = __getOptimalGrowThreads__();\\n        weakened = growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let weakened = 0;\\n\\n        hackT = __getOptimalHackThreads__();\\n        growT = __getOptimalGrowThreads__(hackT);\\n\\n        weakened = hackT * 0.002 + growT * 0.004;\\n        weakenT = Math.ceil(weakened / 0.05);\\n\\n        weakenTR = weakenT * weakenRam;\\n        growTR = growT * growRam;\\n        hackTR = hackT * hackRam;\\n\\n        while (!__ramCheck__(weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            growT = __getOptimalGrowThreads__(hackT);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        ns.print('');\\n        ns.print('---');\\n        ns.print('');\\n\\n        let preSec = ns.getServerSecurityLevel(TARGET);\\n        let preMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let postSec = ns.getServerSecurityLevel(TARGET);\\n        let postMoney = ns.getServerMoneyAvailable(TARGET);\\n\\n        if (preSec < postSec) {\\n            ns.print(`Security increased by ${ns.nFormat(postSec - preSec, '0.000')}`);\\n        }\\n\\n        if (preSec > postSec) {\\n            ns.print(`Security decreased by ${ns.nFormat(preSec - postSec, '0.000')}`);\\n        }\\n\\n        if (preMoney < postMoney) {\\n            ns.print(`Money increased by ${ns.nFormat(postMoney - preMoney, '$0.000a')}`);\\n        }\\n\\n        if (preMoney > postMoney) {\\n            ns.print(`Money decreased by ${ns.nFormat(preMoney - postMoney, '$0.000a')}`);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///b11aaa0c-7214-4f06-b4fa-3496319610b6\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///b11aaa0c-7214-4f06-b4fa-3496319610b6\"}],\"ramUsage\":6.05,\"server\":\"pserv-4096gb-13\",\"moduleSequenceNumber\":403672}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":3569.236047815034,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":6.17909661538462,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":19.124439630769192,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":14.617656410256421,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":230852.53038826556}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":123745.6364318085}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":75203.2513156204}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":67098.02059968497}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":157678.4425213731}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{\"c\":\"clear\",\"ch\":\"connect home\"}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":53867.104608434114,\"lastPrice\":53746.87337734946,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.46,\"b\":false,\"otlkMag\":6.54680782662708,\"otlkMagForecast\":28.16573875921911,\"cap\":431120312,\"spreadPerc\":0.4,\"shareTxForMovement\":36488,\"shareTxUntilMovement\":36488,\"totalShares\":117400000,\"maxShares\":23500000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":14924.609718785558,\"lastPrice\":14890.575514714861,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.47,\"b\":true,\"otlkMag\":6.925552366958321,\"otlkMagForecast\":63.393930027167634,\"cap\":446965981,\"spreadPerc\":0.1,\"shareTxForMovement\":57912,\"shareTxUntilMovement\":43048,\"totalShares\":97400000,\"maxShares\":19500000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":97931.39503375436,\"lastPrice\":98283.81452351216,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":false,\"otlkMag\":7.639761750627644,\"otlkMagForecast\":37.763120692226906,\"cap\":133341408,\"spreadPerc\":0.4,\"shareTxForMovement\":81156,\"shareTxUntilMovement\":26302,\"totalShares\":127000000,\"maxShares\":25400000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":2622.855184432618,\"lastPrice\":2614.2103694487273,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":false,\"otlkMag\":7.229042924151599,\"otlkMagForecast\":38.206641004785574,\"cap\":293896689,\"spreadPerc\":0.2,\"shareTxForMovement\":51676,\"shareTxUntilMovement\":31040,\"totalShares\":86600000,\"maxShares\":17300000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":48637.191148089965,\"lastPrice\":48781.47063136897,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":6.136119240562923,\"otlkMagForecast\":62.104180720085495,\"cap\":817845098,\"spreadPerc\":0.3,\"shareTxForMovement\":64148,\"shareTxUntilMovement\":18766,\"totalShares\":54200000,\"maxShares\":10800000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":62890.60302510465,\"lastPrice\":62555.97083874485,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.1,\"b\":true,\"otlkMag\":10.41591904398519,\"otlkMagForecast\":64.75241301406528,\"cap\":1717171020,\"spreadPerc\":0.6,\"shareTxForMovement\":68986,\"shareTxUntilMovement\":5338,\"totalShares\":27400000,\"maxShares\":5500000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":11039.634789652171,\"lastPrice\":11085.267880891495,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.85,\"b\":false,\"otlkMag\":7.221361827667921,\"otlkMagForecast\":37.592050409760475,\"cap\":394657146,\"spreadPerc\":0.3,\"shareTxForMovement\":68474,\"shareTxUntilMovement\":43042,\"totalShares\":108600000,\"maxShares\":21700000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":215301.6509597104,\"lastPrice\":213990.4441906251,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.26,\"b\":true,\"otlkMag\":5.068917978543396,\"otlkMagForecast\":69.30308366057766,\"cap\":442808019,\"spreadPerc\":0.7,\"shareTxForMovement\":32319,\"shareTxUntilMovement\":7944,\"totalShares\":67200000,\"maxShares\":13400000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":57286.98528478419,\"lastPrice\":57512.64147121881,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":false,\"otlkMag\":6.205305462909443,\"otlkMagForecast\":40.04352815040481,\"cap\":272518051,\"spreadPerc\":1,\"shareTxForMovement\":90839,\"shareTxUntilMovement\":90839,\"totalShares\":49700000,\"maxShares\":9900000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":31227.811853448682,\"lastPrice\":31325.00324166413,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":6.456861685309152,\"otlkMagForecast\":58.9941314509884,\"cap\":54400973,\"spreadPerc\":0.5,\"shareTxForMovement\":100202,\"shareTxUntilMovement\":36096,\"totalShares\":70600000,\"maxShares\":14100000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":21817.123202222483,\"lastPrice\":21882.903438769037,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":false,\"otlkMag\":7.766393035856723,\"otlkMagForecast\":42.55347033649609,\"cap\":50279030,\"spreadPerc\":0.9,\"shareTxForMovement\":103636,\"shareTxUntilMovement\":36312,\"totalShares\":57300000,\"maxShares\":11500000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":60358.208220475,\"lastPrice\":60144.69418036579,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":7.910632646911521,\"otlkMagForecast\":65.00205601750001,\"cap\":47047209,\"spreadPerc\":0.9,\"shareTxForMovement\":77235,\"shareTxUntilMovement\":69235,\"totalShares\":75100000,\"maxShares\":15000000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":1825.823538710395,\"lastPrice\":1832.0388530649093,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":6.861366769656411,\"otlkMagForecast\":57.573641161771626,\"cap\":164340130,\"spreadPerc\":0.8,\"shareTxForMovement\":79540,\"shareTxUntilMovement\":79540,\"totalShares\":63700000,\"maxShares\":12700000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":8570.650879963308,\"lastPrice\":8546.959369385877,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":true,\"otlkMag\":7.334594137624539,\"otlkMagForecast\":61.581413993584086,\"cap\":436027960,\"spreadPerc\":0.7,\"shareTxForMovement\":107872,\"shareTxUntilMovement\":31204,\"totalShares\":33200000,\"maxShares\":6600000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":31103.106593197244,\"lastPrice\":31006.603678759067,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":false,\"otlkMag\":6.750104587266872,\"otlkMagForecast\":40.56374891381868,\"cap\":334914975,\"spreadPerc\":0.9,\"shareTxForMovement\":123283,\"shareTxUntilMovement\":123283,\"totalShares\":40900000,\"maxShares\":8200000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":79167.13960652842,\"lastPrice\":79448.18344674795,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":7.029922697656317,\"otlkMagForecast\":57.812424335727876,\"cap\":108139199,\"spreadPerc\":1.1,\"shareTxForMovement\":124742,\"shareTxUntilMovement\":60724,\"totalShares\":59600000,\"maxShares\":11900000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":63589.01213082219,\"lastPrice\":63357.92886713448,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":6.499048062807348,\"otlkMagForecast\":39.919228273949386,\"cap\":273635178,\"spreadPerc\":0.7,\"shareTxForMovement\":48103,\"shareTxUntilMovement\":48103,\"totalShares\":27600000,\"maxShares\":5500000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":14522.058851480137,\"lastPrice\":14563.019086820814,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":true,\"otlkMag\":7.370444016782583,\"otlkMagForecast\":63.67142233241713,\"cap\":359902532,\"spreadPerc\":1,\"shareTxForMovement\":47932,\"shareTxUntilMovement\":21456,\"totalShares\":26100000,\"maxShares\":5200000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":12539.597467650952,\"lastPrice\":12494.633822693311,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":false,\"otlkMag\":6.438838635444123,\"otlkMagForecast\":44.277940594244846,\"cap\":261690797,\"spreadPerc\":0.9,\"shareTxForMovement\":77090,\"shareTxUntilMovement\":77090,\"totalShares\":33100000,\"maxShares\":6600000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":3957.9876445324016,\"lastPrice\":3912.1378442152377,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.41,\"b\":true,\"otlkMag\":5.669990990247286,\"otlkMagForecast\":61.56270724500475,\"cap\":58069506,\"spreadPerc\":0.8,\"shareTxForMovement\":33467,\"shareTxUntilMovement\":15498,\"totalShares\":68200000,\"maxShares\":13600000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":24666.191058596756,\"lastPrice\":24807.73469721605,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.18,\"b\":false,\"otlkMag\":7.29932128916778,\"otlkMagForecast\":39.01414593634842,\"cap\":136968383,\"spreadPerc\":1,\"shareTxForMovement\":102857,\"shareTxUntilMovement\":43530,\"totalShares\":46000000,\"maxShares\":9200000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":8291.700511370753,\"lastPrice\":8263.570362752213,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":1.9526641060093781,\"otlkMagForecast\":47.513883614673674,\"cap\":23778432,\"spreadPerc\":0.8,\"shareTxForMovement\":98011,\"shareTxUntilMovement\":98011,\"totalShares\":40900000,\"maxShares\":8200000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":96360.22913688832,\"lastPrice\":97316.17709244945,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.04,\"b\":true,\"otlkMag\":2.6302155311436834,\"otlkMagForecast\":53.72133328663675,\"cap\":54474217,\"spreadPerc\":1.6,\"shareTxForMovement\":78622,\"shareTxUntilMovement\":16572,\"totalShares\":33800000,\"maxShares\":6800000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":309098.5098413743,\"lastPrice\":306638.0501974059,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.65,\"b\":true,\"otlkMag\":1.1744802742111666,\"otlkMagForecast\":48.17179863362159,\"cap\":78593393,\"spreadPerc\":0.6,\"shareTxForMovement\":22268,\"shareTxUntilMovement\":22268,\"totalShares\":47200000,\"maxShares\":9400000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":426.0457166861954,\"lastPrice\":424.04543855262665,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.97,\"b\":false,\"otlkMag\":2.483932164582562,\"otlkMagForecast\":44.975930928,\"cap\":33173930,\"spreadPerc\":0.9,\"shareTxForMovement\":124668,\"shareTxUntilMovement\":124668,\"totalShares\":93200000,\"maxShares\":18600000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":567220.5787030819,\"lastPrice\":558957.1861425197,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.04,\"b\":false,\"otlkMag\":6.358386843097566,\"otlkMagForecast\":50.98612997124908,\"cap\":27256762,\"spreadPerc\":1.2,\"shareTxForMovement\":21931,\"shareTxUntilMovement\":21931,\"totalShares\":23300000,\"maxShares\":4700000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":43575.16141771698,\"lastPrice\":43357.98504602212,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.03,\"b\":true,\"otlkMag\":6.131172063448083,\"otlkMagForecast\":55.69656374231875,\"cap\":44682903,\"spreadPerc\":1.1,\"shareTxForMovement\":47867,\"shareTxUntilMovement\":47867,\"totalShares\":8800000,\"maxShares\":1800000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":2265.3122039483055,\"lastPrice\":2257.408169105961,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":7.171125081955207,\"otlkMagForecast\":56.46787750855533,\"cap\":48661728,\"spreadPerc\":0.7,\"shareTxForMovement\":166252,\"shareTxUntilMovement\":81208,\"totalShares\":13000000,\"maxShares\":2600000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":270.4258006766157,\"lastPrice\":272.148564237383,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.31,\"b\":false,\"otlkMag\":7.3751184559953575,\"otlkMagForecast\":41.106343209412245,\"cap\":3753620,\"spreadPerc\":0.6,\"shareTxForMovement\":32729,\"shareTxUntilMovement\":28537,\"totalShares\":10200000,\"maxShares\":2000000}},\"Joes Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joes Guns\",\"symbol\":\"JGN\",\"price\":20739.599384794546,\"lastPrice\":21048.222213039695,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.06,\"b\":false,\"otlkMag\":9.13049805412114,\"otlkMagForecast\":34.47515645457809,\"cap\":5626223,\"spreadPerc\":1.3,\"shareTxForMovement\":39393,\"shareTxUntilMovement\":15683,\"totalShares\":66000000,\"maxShares\":13200000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":224.26368109971764,\"lastPrice\":222.7686869652921,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.38,\"b\":true,\"otlkMag\":5.807724169593173,\"otlkMagForecast\":56.25225370151643,\"cap\":5230273,\"spreadPerc\":0.8,\"shareTxForMovement\":68306,\"shareTxUntilMovement\":68306,\"totalShares\":312500000,\"maxShares\":62500000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":83895.65896768139,\"lastPrice\":84209.80853944927,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":5.765284398247172,\"otlkMagForecast\":57.26041869283038,\"cap\":493870332,\"spreadPerc\":0.9,\"shareTxForMovement\":116268,\"shareTxUntilMovement\":116268,\"totalShares\":14300000,\"maxShares\":2900000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":40560.87359040425,\"lastPrice\":40673.30519609772,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":true,\"otlkMag\":8.34745712366178,\"otlkMagForecast\":59.584028757164134,\"cap\":399423274,\"spreadPerc\":0.8,\"shareTxForMovement\":149533,\"shareTxUntilMovement\":8232,\"totalShares\":19500000,\"maxShares\":3900000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":18,\"lastUpdate\":1641566063941,\"ticksUntilCycle\":13}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":20,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":200,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"}}","VersionSave":"7","AllGangsSave":"","LastExportBonus":"1641335450397","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}
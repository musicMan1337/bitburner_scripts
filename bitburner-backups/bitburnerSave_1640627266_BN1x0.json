{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":2861,\"hp\":10,\"max_hp\":10,\"strength\":3,\"defense\":2,\"dexterity\":4,\"agility\":2,\"charisma\":3,\"intelligence\":0,\"hacking_chance_mult\":2.1480552297393305,\"hacking_speed_mult\":2.101381248849062,\"hacking_money_mult\":6.968862131637547,\"hacking_grow_mult\":3.256889417224235,\"hacking_exp\":3921994184.637356,\"strength_exp\":14.690618459315116,\"defense_exp\":14.690618459315116,\"dexterity_exp\":14.690618459315116,\"agility_exp\":14.690618459315116,\"charisma_exp\":14.690618459315116,\"intelligence_exp\":0,\"hacking_mult\":5.646342395823904,\"strength_mult\":1.712193293626455,\"defense_mult\":1.4888637335882218,\"dexterity_mult\":2.3730999049662658,\"agility_mult\":1.5633069202676326,\"charisma_mult\":1.786636480305866,\"hacking_exp_mult\":5.947220510343668,\"strength_exp_mult\":1.8834126229891006,\"defense_exp_mult\":1.8834126229891006,\"dexterity_exp_mult\":1.8834126229891006,\"agility_exp_mult\":1.8834126229891006,\"charisma_exp_mult\":1.8834126229891006,\"company_rep_mult\":1.4888637335882218,\"faction_rep_mult\":1.4888637335882218,\"money\":54841721927338.41,\"city\":\"Ishima\",\"location\":\"Storm Technologies\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-8192gb-0\",\"pserv-8192gb-1\",\"pserv-8192gb-2\",\"pserv-8192gb-3\",\"pserv-8192gb-4\",\"pserv-8192gb-5\",\"pserv-8192gb-6\",\"pserv-8192gb-7\",\"pserv-8192gb-8\",\"pserv-8192gb-9\",\"pserv-8192gb-10\",\"pserv-8192gb-11\",\"pserv-8192gb-12\",\"pserv-8192gb-13\",\"pserv-8192gb-14\",\"pserv-8192gb-15\",\"pserv-8192gb-16\",\"pserv-8192gb-17\",\"pserv-8192gb-18\",\"pserv-8192gb-19\",\"pserv-8192gb-20\",\"pserv-8192gb-21\",\"pserv-8192gb-22\",\"pserv-8192gb-23\",\"pserv-8192gb-24\"],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"CyberSec\",\"The Black Hand\",\"NiteSec\",\"BitRunners\",\"Sector-12\",\"Daedalus\",\"Aevum\",\"Tian Di Hui\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Embedded Netburner Module Core V3 Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Analyze Engine\"},{\"level\":1,\"name\":\"NEMEAN Subdermal Weave\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":41,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":42,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":43,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":44,\"name\":\"NeuroFlux Governor\"},{\"level\":45,\"name\":\"NeuroFlux Governor\"},{\"level\":46,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":40,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Neural Accelerator\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.4888637335882218,\"crime_success_mult\":1.4888637335882218,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":50,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.4888637335882218,\"hacknet_node_money_mult\":3.755053917084519,\"hacknet_node_purchase_cost_mult\":0.5117633953058055,\"hacknet_node_ram_cost_mult\":0.6689717585696803,\"hacknet_node_core_cost_mult\":0.6689717585696803,\"hacknet_node_level_cost_mult\":0.5686259947842283,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1640627265567,\"totalPlaytime\":1091358800,\"playtimeSinceLastAug\":157273000,\"playtimeSinceLastBitnode\":1091358800,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":116035959970576.22,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":331122931941352.56,\"total\":54841720927338.41,\"work\":0,\"servers\":-343126908395228.25,\"other\":-5308200000,\"augmentations\":-49184954389362.01}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-9911000,\"class\":-73920,\"codingcontract\":0,\"corporation\":0,\"crime\":1248360,\"gang\":0,\"hacking\":122330797757328.12,\"hacknet\":98442486628.35947,\"hacknet_expenses\":-27569807757.747864,\"hospitalization\":-1879790.2560754083,\"infiltration\":0,\"sleeves\":0,\"stock\":342263364336363.25,\"total\":56424485844136.09,\"work\":27814789.50816293,\"servers\":-353574322261722.1,\"other\":-16315800000,\"augmentations\":-54649928065140.76}},\"scriptProdSinceLastAug\":445896771807142.44,\"exploits\":[],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":7,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"95.5.4.6\",\"isConnectedTo\":true,\"maxRam\":1048576,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV1.exe\",\"ServerProfiler.exe\",\"AutoLink.exe\",\"Formulas.exe\",\"DeepscanV2.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\ttarget = target || 'foodnstuff';\\n\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.45;\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(target);\\n\\t}\\n\\t\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(target);\\n\\t}\\n\\n\\tns.nuke(target);\\n\\n\\tlet moneyThreshOverride = 0;\\n\\tlet securityThreshOverride = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (!securityThreshOverride && ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tsecurityThreshOverride = 4;\\n\\t\\t} else if (!moneyThreshOverride && ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tlet percentGrowth = await ns.grow(target);\\n\\t\\t\\tif (percentGrowth < 1) {\\n\\t\\t\\t\\tmoneyThreshOverride = 10;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tmoneyThreshOverride = 4;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t\\tif (securityThreshOverride) {\\n\\t\\t\\tsecurityThreshOverride--\\n\\t\\t}\\n\\n\\t\\tif (moneyThreshOverride) {\\n\\t\\t\\tmoneyThreshOverride--\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///a7cf0364-c8b1-4d05-a53e-1ee1dd627301\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///a7cf0364-c8b1-4d05-a53e-1ee1dd627301\"}],\"ramUsage\":2.65,\"server\":\"home\",\"moduleSequenceNumber\":458}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let pserv = false;\\n    let targetLimit = 0;\\n    if (ns.args.length) {\\n        [pserv, targetLimit] = ns.args;\\n    }\\n\\n    let purchased = ns.getPurchasedServers();\\n\\n    function __readNodes__(fPath) {\\n        let nodes = ns.read(fPath);\\n        nodes = nodes.split(',');\\n        return nodes;\\n    }\\n\\n    async function __scanAndWriteAllNodes__() {\\n        let nodes = [];\\n        let newNodes = ['home'];\\n        let newNodes2 = [];\\n        let repeat = true;\\n\\n        while (repeat) {\\n            newNodes2 = [];\\n            repeat = false;\\n\\n            let i, j;\\n            for (i = 0; i < newNodes.length; i++) {\\n                let connected = ns.scan(newNodes[i]);\\n\\n                for (j = 0; j < connected.length; j++) {\\n                    let node = connected[j];\\n                    if (!nodes.includes(node) && !newNodes.includes(node) && !newNodes2.includes(node)) {\\n                        newNodes2.push(node);\\n                        repeat = true;\\n                    }\\n                }\\n            }\\n\\n            nodes = nodes.concat(newNodes);\\n            newNodes = newNodes2;\\n        }\\n\\n        nodes = nodes.concat(purchased);\\n        await ns.write('nodes.txt', nodes, 'w');\\n    }\\n\\n    function __nukeAvailableNodes__() {\\n        let nodes = __readNodes__('nodes.txt');\\n        let myHackLevel = ns.getHackingLevel();\\n\\n        let Programs = [\\n            ns.fileExists('BruteSSH.exe'),\\n            ns.fileExists('FTPCrack.exe'),\\n            ns.fileExists('relaySMTP.exe'),\\n            ns.fileExists('HTTPWorm.exe'),\\n            ns.fileExists('SQLInject.exe')\\n        ];\\n\\n        let availPrograms = Programs.reduce((num, bool) => num + bool, 0);\\n\\n        nodes.forEach((node) => {\\n            if (\\n                !ns.hasRootAccess(node) &&\\n                ns.getServerNumPortsRequired(node) <= availPrograms &&\\n                ns.getServerRequiredHackingLevel(node) <= myHackLevel\\n            ) {\\n                Programs.forEach((exists, i) => {\\n                    if (exists) {\\n                        switch (i) {\\n                            case 0:\\n                                ns.brutessh(node);\\n                                break;\\n                            case 1:\\n                                ns.ftpcrack(node);\\n                                break;\\n                            case 2:\\n                                ns.relaysmtp(node);\\n                                break;\\n                            case 3:\\n                                ns.httpworm(node);\\n                                break;\\n                            case 4:\\n                                ns.sqlinject(node);\\n                                break;\\n                        }\\n                    }\\n                });\\n                ns.nuke(node);\\n            }\\n        });\\n    }\\n\\n    async function __scanAndWriteRootedNodes__() {\\n        let nodes = __readNodes__('nodes.txt');\\n        let rooted = nodes.reduce((arr, node) => {\\n            //don't hack ourselves\\n            if (ns.hasRootAccess(node) && node !== 'home' && !purchased.includes(node)) {\\n                let maxMoney = ns.getServerMaxMoney(node);\\n\\n                arr.push(`${maxMoney} ${node}`);\\n            }\\n            return arr;\\n        }, []);\\n\\n        //lowest max money at the front, filter invalid servers, remove money from name\\n        rooted.sort((a, b) => +b.split(' ')[0] - +a.split(' ')[0]);\\n        rooted = rooted.filter((node) => +node.split(' ')[0] > 0);\\n        await ns.write('money_rooted.txt', rooted, 'w');\\n\\n        rooted = rooted.map((node) => node.split(' ')[1]);\\n\\n        if (targetLimit && targetLimit != 'All') {\\n            rooted = rooted.slice(rooted.length - targetLimit);\\n        }\\n\\n        ns.tprint(`hackable nodes: ${rooted.length}`);\\n        await ns.write('rooted.txt', rooted, 'w');\\n    }\\n\\n    //read the nodes\\n    await __scanAndWriteAllNodes__();\\n    __nukeAvailableNodes__();\\n    await __scanAndWriteRootedNodes__();\\n\\n    //load nodes\\n    let attackNodes = [];\\n    if (pserv) {\\n        attackNodes = purchased;\\n    } else {\\n        attackNodes = __readNodes__('rooted.txt');\\n        if (purchased.length) {\\n            attackNodes = attackNodes.concat(purchased);\\n        }\\n    }\\n    attackNodes.unshift('home');\\n\\n    // spin up attack servers\\n    attackNodes.forEach((attacker) => {\\n        ns.exec('main_hack.js', 'home', 1, attacker, pserv || false, targetLimit || '');\\n    });\\n}\",\"filename\":\"setup_hacks.js\",\"url\":\"blob:file:///2ed347b2-8530-47e8-ac8f-e4d7e26cc1a5\",\"module\":\"\",\"dependencies\":[{\"filename\":\"setup_hacks.js\",\"url\":\"blob:file:///2ed347b2-8530-47e8-ac8f-e4d7e26cc1a5\"}],\"ramUsage\":6.15,\"server\":\"home\",\"moduleSequenceNumber\":459}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet server = ns.args[0];\\n\\n\\tlet maxRam = ns.getServerMaxRam('home');\\n\\tlet usedRam = ns.getServerUsedRam('home');\\n\\tlet scriptRam = ns.getScriptRam('basic_hack.js');\\n\\tlet threads = Math.floor((maxRam - usedRam) / scriptRam);\\n\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t}\\n\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t}\\n\\n\\tns.nuke(server);\\n\\tns.run('basic_hack.js', threads, server);\\n}\",\"filename\":\"home_hack.js\",\"url\":\"blob:file:///e4d5c7e1-2a3e-4351-a242-0862f6f2a700\",\"module\":\"\",\"dependencies\":[{\"filename\":\"home_hack.js\",\"url\":\"blob:file:///e4d5c7e1-2a3e-4351-a242-0862f6f2a700\"}],\"ramUsage\":3.05,\"server\":\"home\",\"moduleSequenceNumber\":460}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":461}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":462}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":463}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [ATTACK_SERVER, pserv, limit] = ns.args;\\n\\n    ns.tprint(ATTACK_SERVER);\\n\\n    function __readNodes__(fPath) {\\n        let nodes = ns.read(fPath);\\n        nodes = nodes.split(',');\\n        return nodes;\\n    }\\n\\n    function __findAttackableNodes__() {\\n        let rooted = __readNodes__('rooted.txt');\\n        let targetNodes = [];\\n\\n        //check which are valid for attacking\\n        for (let i = 0; i < rooted.length; i++) {\\n            if (ns.getServerMaxMoney(rooted[i])) {\\n                targetNodes.push(rooted[i]);\\n            }\\n        }\\n\\n        if (pserv && limit && ATTACK_SERVER.split('-')[0] === 'pserv') {\\n            let pservNum = +ATTACK_SERVER.split('-')[2];\\n            let multiplier = Math.floor(targetNodes.length / 5);\\n\\n            if (pservNum < 5) {\\n                targetNodes = targetNodes.slice(0, multiplier);\\n            } else if (pservNum < 10) {\\n                targetNodes = targetNodes.slice(multiplier, multiplier * 2);\\n            } else if (pservNum < 15) {\\n                targetNodes = targetNodes.slice(multiplier * 2, multiplier * 3);\\n            } else if (pservNum < 20) {\\n                targetNodes = targetNodes.slice(multiplier * 3, multiplier * 4);\\n            } else {\\n                targetNodes = targetNodes.slice(multiplier * 4, -1);\\n            }\\n        }\\n\\n        return targetNodes;\\n    }\\n\\n    //prep attackServer\\n    let files = ['weaken.script', 'grow.script', 'hack.script', 'daemon.js', 'daemon_fml.js'];\\n    await ns.scp(files, 'home', ATTACK_SERVER);\\n\\n    //load nodes\\n    let targetNodes = __findAttackableNodes__();\\n\\n    //calc ram and threads per daemon\\n    let serverRam = ns.getServerMaxRam(ATTACK_SERVER);\\n    let daemonRam = ns.getScriptRam('daemon.js');\\n    let minRamPerDaemon =\\n        ns.getScriptRam('weaken.script') + ns.getScriptRam('grow.script') + ns.getScriptRam('hack.script');\\n\\n    let leftoverRam = serverRam - daemonRam * targetNodes.length;\\n    let ramPerDaemon = leftoverRam / targetNodes.length;\\n\\n    while (ramPerDaemon < minRamPerDaemon) {\\n        targetNodes.pop();\\n        if (!targetNodes.length) {\\n            ns.tprint(`'${ATTACK_SERVER}' - insufficient RAM: exiting`);\\n            return;\\n        }\\n\\n        if (targetNodes.length === 2 && ns.getHackingLevel() >= 10) {\\n            targetNodes = ['joesguns'];\\n        }\\n\\n        leftoverRam = serverRam - daemonRam * targetNodes.length;\\n        ramPerDaemon = leftoverRam / targetNodes.length;\\n    }\\n\\n    ns.scriptKill('daemon.js', ATTACK_SERVER);\\n    ns.scriptKill('daemon_fml.js', ATTACK_SERVER);\\n\\n    //start daemons\\n    let daemonCount = 0;\\n    let daemonFile = ns.fileExists('Formulas.exe') ? 'daemon_fml.js' : 'daemon.js';\\n    targetNodes.forEach((target) => {\\n        let success = ns.exec(\\n            daemonFile,\\n            ATTACK_SERVER,\\n            1,\\n            target,\\n            ATTACK_SERVER,\\n            Math.floor(ramPerDaemon),\\n            limit || false\\n        );\\n        daemonCount += success ? 1 : 0;\\n    });\\n\\n    ns.tprint(`attack server: ${ATTACK_SERVER}`);\\n    ns.tprint(`ram/daemon: ${Math.floor(ramPerDaemon)}`);\\n    ns.tprint(`daemon count: ${daemonCount}`);\\n}\",\"filename\":\"main_hack.js\",\"url\":\"blob:file:///c1a037ce-5ff5-499d-8bd0-aa5c35a5d569\",\"module\":\"\",\"dependencies\":[{\"filename\":\"main_hack.js\",\"url\":\"blob:file:///c1a037ce-5ff5-499d-8bd0-aa5c35a5d569\"}],\"ramUsage\":4.9,\"server\":\"home\",\"moduleSequenceNumber\":464}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///e02417bf-8da6-495a-a554-b9eefbb7a2fe\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///e02417bf-8da6-495a-a554-b9eefbb7a2fe\"}],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":465}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    let size = 64;\\n    let silent = false;\\n    if (ns.args.length > 0) {\\n        [size, silent] = ns.args;\\n    }\\n\\n    if (isNaN(size)) {\\n        size = 64;\\n        silent = true;\\n    }\\n\\n    let files = ['weaken.script', 'grow.script', 'hack.script', 'daemon.js'];\\n    let price = 55000 * size;\\n    let i = ns.getPurchasedServers().length;\\n    while (i < 25) {\\n        let newHostname = 'pserv-' + size + 'gb-' + i;\\n\\n        ns.print('attempt purchase: ' + newHostname);\\n\\n        if (ns.getServerMoneyAvailable('home') > price) {\\n            ns.purchaseServer(newHostname, size);\\n            ns.print('purchased ' + newHostname);\\n            ns.tprint('purchased ' + newHostname);\\n\\n            if (!silent) {\\n                //start scripts on new server\\n                await ns.scp(files, 'home', newHostname);\\n                ns.exec('main_hack.js', 'home', 1, newHostname);\\n            }\\n\\n            ++i;\\n        }\\n\\n        if (ns.getServerMoneyAvailable('home') < price) {\\n            await ns.sleep(10000);\\n        }\\n    }\\n\\n    //upgrade existing servers\\n    let servers = ns.getPurchasedServers();\\n\\n    i = 0;\\n    while (i < 25) {\\n        ns.print('================================================================================');\\n        let server = servers[i];\\n        let serverNumber = server.match(/(\\\\d+)$/)[0] * 1;\\n        let size = ns.getServerMaxRam(server);\\n\\n        let newSize = 0;\\n        if (ns.args.length > 0) {\\n            newSize = ns.args[0];\\n        }\\n\\n        if (isNaN(newSize)) {\\n            newSize = 0;\\n        }\\n\\n        if (!newSize) {\\n            newSize = 2 * size;\\n        }\\n\\n        ns.print(`looking at server: ${server} - current size: ${size} -> ${newSize}`);\\n\\n        let price = 55000 * newSize;\\n        if (size < newSize) {\\n            let newHostname = 'pserv-' + newSize + 'gb-' + serverNumber;\\n\\n            ns.print(`attempt upgrade: ${server} -> ${newHostname} for ${price}`);\\n\\n            if (ns.getServerMoneyAvailable('home') > price) {\\n                if (ns.getServerUsedRam(server) > 0) {\\n                    ns.killall(server);\\n\\n                    while (ns.getServerUsedRam(server) > 0) {\\n                        ns.print('waiting for scripts to be killed');\\n                    }\\n                }\\n\\n                ns.deleteServer(server);\\n                ns.purchaseServer(newHostname, newSize);\\n\\n                ns.print('purchased ' + newHostname);\\n                ns.tprint('purchased ' + newHostname);\\n\\n                if (!silent) {\\n                    //start scripts on new server\\n                    await ns.scp(files, 'home', newHostname);\\n                    ns.exec('main_hack.js', 'home', 1, newHostname);\\n                }\\n\\n                ++i;\\n            }\\n        }\\n\\n        if (size >= newSize) {\\n            i++;\\n        }\\n\\n        if (serverNumber == 24) {\\n            i = 26;\\n        }\\n\\n        if (ns.getServerMoneyAvailable('home') < price) {\\n            await ns.sleep(20000);\\n        }\\n    }\\n}\",\"filename\":\"refresh_servers.js\",\"url\":\"blob:file:///4f751599-2f97-4d69-a4e1-eb523948f2bd\",\"module\":\"\",\"dependencies\":[{\"filename\":\"refresh_servers.js\",\"url\":\"blob:file:///4f751599-2f97-4d69-a4e1-eb523948f2bd\"}],\"ramUsage\":10.95,\"server\":\"home\",\"moduleSequenceNumber\":466}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// ns.disableLog('ALL')\\n\\t// ns.getServerMaxRam('home')\\n\\t// ns.enableLog('exec')\\n\\t// ns.enableLog('weaken')\\n\\t// ns.enableLog('grow')\\n\\t// ns.enableLog('hack')\\n\\t// ns.enableLog('getServerUsedRam')\\n\\t// ns.enableLog('getServerSecurityLevel')\\n\\t// ns.enableLog('getServerMoneyAvailable')\\n\\t// ns.enableLog('hackAnalyze')\\n\\t// ns.enableLog('growthAnalyze')\\n\\t// ns.getServerMaxRam('home')\\n\\n\\tns.tprint(ns.getServerMoneyAvailable('home'))\\n\\n\\t// while (true) {\\n\\t// \\tawait ns.sleep(100000)\\n\\t// }\\n}\",\"filename\":\"test.js\",\"url\":\"blob:file:///b9c939b9-b0f2-4e56-9daa-78354949a51e\",\"module\":\"\",\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///b9c939b9-b0f2-4e56-9daa-78354949a51e\"}],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":467}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getServerMoneyAvailable');\\n\\n    // We will not buy anything if there's less money than this ammount\\n    let reserveMoney = 1000;\\n    let hacknet = ns.hacknet;\\n\\n    // Buy first HacknetNode if there are none\\n    if (hacknet.numNodes() === 0 && ns.getServerMoneyAvailable('home') >= reserveMoney) {\\n        hacknet.purchaseNode();\\n        ns.print('Purchased ' + hacknet.getNodeStats(hacknet.numNodes() - 1).name + ' because there was none.');\\n    }\\n\\n    // If there are no Hacknet Nodes, we can't do anything, so the script ends\\n    let numUpgrades = 1;\\n    while (hacknet.numNodes() > 0) {\\n        // If there is not enough money, we wait for it instead of ending\\n        // the loop.\\n        while (ns.getServerMoneyAvailable('home') >= reserveMoney) {\\n            for (let i = 0; i < hacknet.numNodes(); i++) {\\n                while (\\n                    hacknet.getLevelUpgradeCost(i, numUpgrades) < ns.getServerMoneyAvailable('home') * 0.1 &&\\n                    hacknet.upgradeLevel(i, numUpgrades)\\n                ) {\\n                    ns.print('Upgraded ' + hacknet.getNodeStats(i).name + ' to level ' + hacknet.getNodeStats(i).level);\\n                }\\n\\n                while (\\n                    hacknet.getRamUpgradeCost(i, numUpgrades) < ns.getServerMoneyAvailable('home') * 0.1 &&\\n                    hacknet.upgradeRam(i, numUpgrades)\\n                ) {\\n                    ns.print('Upgraded ' + hacknet.getNodeStats(i).name + ' RAM to ' + hacknet.getNodeStats(i).ram);\\n                }\\n\\n                while (\\n                    hacknet.getCoreUpgradeCost(i, numUpgrades) < ns.getServerMoneyAvailable('home') * 0.1 &&\\n                    hacknet.upgradeCore(i, numUpgrades)\\n                ) {\\n                    ns.print('Upgraded ' + hacknet.getNodeStats(i).name + ' core to ' + hacknet.getNodeStats(i).core);\\n                }\\n            }\\n\\n            // Buy next Hacknet Node if the last one is already fully\\n            // upgraded. If for some reason the last Hacknet Node is fully\\n            // upgraded and the others don't, the loop above will still\\n            // attempt to upgrade them all.\\n            if (\\n                hacknet.getLevelUpgradeCost(hacknet.numNodes() - 1, numUpgrades) === Infinity &&\\n                hacknet.getRamUpgradeCost(hacknet.numNodes() - 1, numUpgrades) === Infinity &&\\n                hacknet.getCoreUpgradeCost(hacknet.numNodes() - 1, numUpgrades) === Infinity &&\\n                hacknet.getPurchaseNodeCost() < ns.getServerMoneyAvailable('home') * 0.1\\n            ) {\\n                hacknet.purchaseNode();\\n                ns.print(\\n                    `Purchased ${hacknet.getNodeStats(hacknet.numNodes() - 1).name\\n                    } because the last one couldn't be upgraded further.`\\n                );\\n            } else if (\\n                // Or buy the next Hacknet Node if the next upgrade is more\\n                // expensive than buying a new Hacknet Node.\\n                hacknet.getLevelUpgradeCost(hacknet.numNodes() - 1, numUpgrades) > hacknet.getPurchaseNodeCost() &&\\n                hacknet.getRamUpgradeCost(hacknet.numNodes() - 1, numUpgrades) > hacknet.getPurchaseNodeCost() &&\\n                hacknet.getCoreUpgradeCost(hacknet.numNodes() - 1, numUpgrades) > hacknet.getPurchaseNodeCost() &&\\n                hacknet.getPurchaseNodeCost() < ns.getServerMoneyAvailable('home') * 0.1\\n            ) {\\n                hacknet.purchaseNode();\\n                ns.print(\\n                    `Purchased ${hacknet.getNodeStats(hacknet.numNodes() - 1).name\\n                    } because it was cheaper than next upgrade.`\\n                );\\n            }\\n\\n            await ns.sleep(1000);\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"hacknet.js\",\"url\":\"blob:file:///db4a34e6-efe4-4edb-b714-0224309f686d\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacknet.js\",\"url\":\"blob:file:///db4a34e6-efe4-4edb-b714-0224309f686d\"}],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":468}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {{\\n *  sym: string;\\n *  shares: number;\\n *  price: number;\\n *  forecast: number;\\n * }[]} Stocks\\n *\\n * @typedef {{\\n *  [sym: string]: {\\n *      profit: string;\\n *      raw: number;\\n *  }\\n * }} Tracker\\n */\\n\\n/** @type {Stocks} */\\nlet stocks = [];\\n/** @type {Stocks} */\\nlet myStocks = [];\\nlet corpus = 0;\\n\\n/** @type {Tracker} */\\nlet profitTracker = {};\\n\\nlet COMMISSION = 100000; //Buy or sell commission\\nlet numCycles = 2; //Each cycle is ~ 5 seconds\\nlet fracL = 0.2; //Fraction of assets to keep as cash in hand\\nlet fracH = 0.2;\\n\\n/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    ns.tail();\\n\\n    let TIX = ns.stock;\\n    let syms = TIX.getSymbols();\\n    syms.forEach((sym) => (profitTracker[sym] = { profit: '$0.00', raw: 0 }));\\n\\n    function __refresh__() {\\n        let newCorpus = ns.getServerMoneyAvailable('home');\\n\\n        stocks = [];\\n        myStocks = [];\\n        syms.forEach((sym) => {\\n            let [shares] = TIX.getPosition(sym);\\n            let price = TIX.getPrice(sym);\\n            let forecast = TIX.getForecast(sym);\\n            newCorpus += price * shares;\\n\\n            if (shares) {\\n                myStocks.push({ sym, shares, price, forecast });\\n            } else {\\n                stocks.push({ sym, shares, price, forecast });\\n            }\\n        });\\n\\n        stocks.sort((a, b) => b.forecast - a.forecast);\\n        corpus = newCorpus;\\n    }\\n\\n    function __format__(profit) {\\n        return ns.nFormat(profit, '($0.00a)');\\n    }\\n\\n    function __buy__(stock, numShares) {\\n        //buy\\n        let pricePer = TIX.buy(stock.sym, numShares);\\n        let price = __format__(pricePer * numShares + COMMISSION);\\n\\n        //track\\n        profitTracker[stock.sym].raw = profitTracker[stock.sym].raw - pricePer * numShares;\\n        profitTracker[stock.sym].profit = __format__(profitTracker[stock.sym].raw);\\n\\n        //log\\n        ns.print(`Bought ${pricePer ? numShares : 0} shares of ${stock.sym} for ${price}`);\\n        ns.print(`Current profit for ${stock.sym}: ${profitTracker[stock.sym].profit}`);\\n    }\\n\\n    function __sell__(stock, numShares) {\\n        //buy\\n        let profitPer = TIX.sell(stock.sym, numShares);\\n        let profit = __format__(profitPer * numShares + COMMISSION);\\n\\n        //track\\n        profitTracker[stock.sym].raw = profitTracker[stock.sym].raw + profitPer * numShares;\\n        profitTracker[stock.sym].profit = __format__(profitTracker[stock.sym].raw);\\n\\n        //log\\n        ns.print(`Sold ${profitPer ? numShares : 0} shares of ${stock.sym} for ${profit}`);\\n        ns.print(`Current profit for ${stock.sym}: ${profitTracker[stock.sym].profit}`);\\n    }\\n\\n    while (true) {\\n        __refresh__();\\n\\n        //Sell underperforming shares\\n        myStocks.forEach((stock) => {\\n            if (stock.forecast < stocks[0].forecast) {\\n                __sell__(stock, stock.shares);\\n                corpus -= COMMISSION;\\n            }\\n        });\\n\\n        //Sell shares if not enough cash in hand\\n        myStocks.forEach((stock) => {\\n            if (ns.getServerMoneyAvailable('home') < fracL * corpus) {\\n                let cashNeeded = corpus * fracH - ns.getServerMoneyAvailable('home') + COMMISSION;\\n                let numShares = Math.floor(cashNeeded / stock.price);\\n\\n                __sell__(stock, numShares);\\n                corpus -= COMMISSION;\\n            }\\n        });\\n\\n        // Buy shares with cash remaining in hand\\n        let cashToSpend = ns.getServerMoneyAvailable('home') - fracH * corpus;\\n        let numShares = Math.floor((cashToSpend - COMMISSION) / stocks[0].price);\\n        let maxShares = TIX.getMaxShares(stocks[0].sym) - stocks[0].shares;\\n\\n        numShares = Math.min(numShares, maxShares);\\n\\n        ns.print('stocks[0].price: ' + stocks[0].price);\\n        ns.print('corpus: ' + corpus);\\n        ns.print('cashToSpend: ' + cashToSpend);\\n\\n        if (numShares * stocks[0].forecast * stocks[0].price * numCycles > COMMISSION) {\\n            __buy__(stocks[0], numShares);\\n        }\\n\\n        await ns.sleep(5 * 1000 * numCycles + 200);\\n    }\\n}\",\"filename\":\"stocks.js\",\"url\":\"blob:file:///845f2096-1668-4ebc-b1a1-b5b0e655b9cd\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stocks.js\",\"url\":\"blob:file:///845f2096-1668-4ebc-b1a1-b5b0e655b9cd\"}],\"ramUsage\":17.2,\"server\":\"home\",\"moduleSequenceNumber\":469}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\n\\t//get the TOR router\\n\\twhile (!ns.purchaseTor()) {\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n\\n\\t//buy programs in this order\\n\\tlet cheapProgramList = [\\n\\t\\t'BruteSSH.exe',\\n\\t\\t'FTPCrack.exe',\\n\\t\\t'AutoLink.exe',\\n\\t\\t'DeepscanV1.exe',\\n\\t\\t'ServerProfiler.exe',\\n\\t\\t'DeepscanV2.exe',\\n\\t];\\n\\tfor (let i = 0; i < cheapProgramList.length; i++) {\\n\\t\\tlet prg = cheapProgramList[i];\\n\\t\\twhile (!ns.purchaseProgram(prg)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\t}\\n\\n\\t//buy baseline 64g servers\\n\\twhile (ns.getServerMoneyAvailable('home') < 88000000) {\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n\\tns.run('refresh_servers.js', 1, 64);\\n\\n\\t//buy programs in this order\\n\\tlet priceyProgramList = ['DeepscanV2.exe', 'relaySMTP.exe', 'HTTPWorm.exe', 'SQLInject.exe'];\\n\\tfor (let i = 0; i < priceyProgramList.length; i++) {\\n\\t\\tlet prg = priceyProgramList[i];\\n\\t\\twhile (!ns.purchaseProgram(prg)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"buy_darkweb.js\",\"url\":\"blob:file:///2a3a7ebd-7bef-459a-9cc1-554a8d433205\",\"module\":\"\",\"dependencies\":[{\"filename\":\"buy_darkweb.js\",\"url\":\"blob:file:///2a3a7ebd-7bef-459a-9cc1-554a8d433205\"}],\"ramUsage\":6.7,\"server\":\"home\",\"moduleSequenceNumber\":470}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n\\r\\n    let COMMISSION = 100000; //Buy or sell commission\\r\\n\\r\\n    if (ns.isRunning('stocks.js', 'home')) {\\r\\n        ns.kill('stocks.js', 'home');\\r\\n    }\\r\\n\\r\\n    function __format__(profit) {\\r\\n        return ns.nFormat(profit, '-$0.00a');\\r\\n    }\\r\\n\\r\\n    let TIX = ns.stock;\\r\\n    let syms = TIX.getSymbols();\\r\\n\\r\\n    syms.forEach((sym) => {\\r\\n        let [numShares] = TIX.getPosition(sym);\\r\\n        if (numShares) {\\r\\n            let profitPer = TIX.sell(sym, numShares);\\r\\n            let profit = __format__(profitPer * numShares - COMMISSION);\\r\\n            ns.tprint(`Sold ${profitPer ? numShares : 0} shares of ${sym} for profit of ${profit}`);\\r\\n        }\\r\\n    });\\r\\n}\",\"filename\":\"sell_stocks.js\",\"url\":\"blob:file:///b7ce5d78-f5ff-4211-8564-8ac8686c35bf\",\"module\":\"\",\"dependencies\":[{\"filename\":\"sell_stocks.js\",\"url\":\"blob:file:///b7ce5d78-f5ff-4211-8564-8ac8686c35bf\"}],\"ramUsage\":8.7,\"server\":\"home\",\"moduleSequenceNumber\":471}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {{\\n *  sym: string;\\n *  shares: number;\\n *  price: number;\\n *  forecast: number;\\n * }[]} Stocks\\n *\\n * @typedef {{\\n *  [sym: string]: {\\n *      profit: string;\\n *      raw: number;\\n *  }\\n * }} Tracker\\n */\\n\\n/** @type {Stocks} */\\nlet stocks = [];\\n/** @type {Stocks} */\\nlet myStocks = [];\\nlet corpus = 0;\\n\\n/** @type {Tracker} */\\nlet profitTracker = {};\\n\\n/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    const TIX = ns.stock;\\n\\n    const KEEP = 0.2;\\n    const BUY_LIMIT = 0.58;\\n    const SELL_LIMIT = 0.5;\\n    const COMMISSION = 100000;\\n\\n    //init stocks\\n    let syms = TIX.getSymbols();\\n    syms.forEach((sym) => {\\n        stocks.push({ sym });\\n        profitTracker[sym] = { profit: '$0.00', raw: 0 };\\n    });\\n\\n    function __updateStockData__() {\\n        let corpus = ns.getServerMoneyAvailable('home');\\n        myStocks.length = 0;\\n\\n        stocks.forEach((stock) => {\\n            let sym = stock.sym;\\n            stock.price = TIX.getPrice(sym);\\n            stock.shares = TIX.getPosition(sym)[0];\\n            stock.forecast = TIX.getForecast(sym);\\n\\n            corpus += stock.price * stock.shares;\\n\\n            if (stock.shares) {\\n                myStocks.push(stock);\\n            }\\n        });\\n\\n        stocks.sort((a, b) => b.forecast - a.forecast);\\n        return corpus;\\n    }\\n\\n    function __format__(profit) {\\n        return ns.nFormat(profit, '-$0.00a');\\n    }\\n\\n    function __buy__(stock, numShares) {\\n        //buy\\n        let pricePer = TIX.buy(stock.sym, numShares);\\n        let price = __format__(pricePer * numShares + COMMISSION);\\n\\n        //track\\n        profitTracker[stock.sym].raw = profitTracker[stock.sym].raw - pricePer * numShares;\\n        profitTracker[stock.sym].profit = __format__(profitTracker[stock.sym].raw);\\n\\n        //log\\n        ns.print(`Bought ${pricePer ? numShares : 0} shares of ${stock.sym} for ${price}`);\\n        ns.print(`Current profit for ${stock.sym}: ${profitTracker[stock.sym].profit}`);\\n    }\\n\\n    function __sell__(stock, numShares) {\\n        //buy\\n        let profitPer = TIX.sell(stock.sym, numShares);\\n        let profit = __format__(profitPer * numShares + COMMISSION);\\n\\n        //track\\n        profitTracker[stock.sym].raw = profitTracker[stock.sym].raw + profitPer * numShares;\\n        profitTracker[stock.sym].profit = __format__(profitTracker[stock.sym].raw);\\n\\n        //log\\n        ns.print(`Sold ${profitPer ? numShares : 0} shares of ${stock.sym} for ${profit}`);\\n        ns.print(`Current profit for ${stock.sym}: ${profitTracker[stock.sym].profit}`);\\n    }\\n\\n    while (true) {\\n        corpus = __updateStockData__();\\n\\n        // Sell bad shares\\n        myStocks.forEach((stock) => {\\n            if (stock.forecast < SELL_LIMIT) {\\n                ns.print(`${stock.sym} no longer valuable - selling.`);\\n                __sell__(stock, stock.shares);\\n            }\\n        });\\n\\n        // Don't do this. Use getStockPurchaseCost for some proportion of corpus,\\n        // then reduce it by a certain % until it's buyable.\\n\\n        let stockIndex = -1;\\n        let cashToSpend = ns.getServerMoneyAvailable('home');\\n        while (cashToSpend > 100 * COMMISSION && cashToSpend > corpus * 0.1) {\\n            stockIndex++;\\n            corpus = __updateStockData__();\\n\\n            let stockToBuy = stocks[stockIndex];\\n            if (!stockToBuy || stockToBuy.forecast < BUY_LIMIT) {\\n                // No more (good) stocks left\\n                break;\\n            }\\n\\n            let availibleShares = TIX.getMaxShares(stockToBuy.sym) - stockToBuy.shares;\\n            if (!availibleShares) {\\n                // We bought all shares of this stock\\n                continue;\\n            }\\n\\n            while (availibleShares) {\\n                let purchaseCost = TIX.getPurchaseCost(stockToBuy.sym, availibleShares, 'Long');\\n                if (purchaseCost <= cashToSpend) {\\n                    __buy__(stockToBuy, availibleShares);\\n                    cashToSpend -= purchaseCost;\\n                    break;\\n                }\\n\\n                availibleShares = Math.floor(availibleShares * 0.9);\\n            }\\n        }\\n\\n        await ns.sleep(6 * 1000);\\n    }\\n}\",\"filename\":\"stocks_V2.js\",\"url\":\"blob:file:///958ebfd2-ae0a-421b-a8d0-582309909ad1\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stocks_V2.js\",\"url\":\"blob:file:///958ebfd2-ae0a-421b-a8d0-582309909ad1\"}],\"ramUsage\":19.2,\"server\":\"home\",\"moduleSequenceNumber\":472}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///2ba559df-dcfe-4531-949c-a0d8290045a6\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///2ba559df-dcfe-4531-949c-a0d8290045a6\"}],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":473}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    let roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n\\n    let nodes = {\\n        home: roots.reduce((obj, node) => {\\n            let maxMoney = ns.nFormat(ns.getServerMaxMoney(node), '$0.00a');\\n            let hackingReq = ns.getServerRequiredHackingLevel(node);\\n            let childName = `${node} - ${maxMoney} - ${hackingReq}`;\\n\\n            obj[childName] = {};\\n            return obj;\\n        }, {})\\n    };\\n\\n    roots.unshift('home');\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        ns.tprint('');\\n        ns.tprint('      rootName: ', rootNode);\\n        ns.tprint('connectedNodes: ', connectedNodes);\\n        ns.tprint('         roots: ', roots);\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let maxMoney = ns.nFormat(ns.getServerMaxMoney(childNode), '$0.00a');\\n                let hackingReq = ns.getServerRequiredHackingLevel(childNode);\\n                let childName = `${childNode} - ${maxMoney} - ${hackingReq}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n    }\\n\\n    Object.keys(nodes.home).forEach((node) => {\\n        traverseNodes(nodes.home[node], node.split(' ')[0]);\\n    });\\n    await ns.write('servers.txt', JSON.stringify(nodes), 'w');\\n    ns.tprint(nodes);\\n}\",\"filename\":\"scan_servers.js\",\"url\":\"blob:file:///fe99bd88-2d52-4be5-be6d-c1e063860026\",\"module\":\"\",\"dependencies\":[{\"filename\":\"scan_servers.js\",\"url\":\"blob:file:///fe99bd88-2d52-4be5-be6d-c1e063860026\"}],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":474}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-8192gb-0\",\"pserv-8192gb-1\",\"pserv-8192gb-2\",\"pserv-8192gb-3\",\"pserv-8192gb-4\",\"pserv-8192gb-5\",\"pserv-8192gb-6\",\"pserv-8192gb-7\",\"pserv-8192gb-8\",\"pserv-8192gb-9\",\"pserv-8192gb-10\",\"pserv-8192gb-11\",\"pserv-8192gb-12\",\"pserv-8192gb-13\",\"pserv-8192gb-14\",\"pserv-8192gb-15\",\"pserv-8192gb-16\",\"pserv-8192gb-17\",\"pserv-8192gb-18\",\"pserv-8192gb-19\",\"pserv-8192gb-20\",\"pserv-8192gb-21\",\"pserv-8192gb-22\",\"pserv-8192gb-23\",\"pserv-8192gb-24\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"nodes.txt\",\"text\":\"home,n00dles,foodnstuff,sigma-cosmetics,joesguns,hong-fang-tea,harakiri-sushi,iron-gym,darkweb,pserv-8192gb-0,pserv-8192gb-1,pserv-8192gb-2,pserv-8192gb-3,pserv-8192gb-4,pserv-8192gb-5,pserv-8192gb-6,pserv-8192gb-7,pserv-8192gb-8,pserv-8192gb-9,pserv-8192gb-10,pserv-8192gb-11,pserv-8192gb-12,pserv-8192gb-13,pserv-8192gb-14,pserv-8192gb-15,pserv-8192gb-16,pserv-8192gb-17,pserv-8192gb-18,pserv-8192gb-19,pserv-8192gb-20,pserv-8192gb-21,pserv-8192gb-22,pserv-8192gb-23,pserv-8192gb-24,zer0,max-hardware,CSEC,nectar-net,phantasy,neo-net,silver-helix,omega-net,avmnite-02h,the-hub,netlink,crush-fitness,comptek,johnson-ortho,zb-institute,catalyst,syscore,rothman-uni,I.I.I.I,summit-uni,aevum-police,millenium-fitness,rho-construction,alpha-ent,lexo-corp,galactic-cyber,snap-fitness,aerocorp,global-pharm,omnia,deltaone,unitalife,defcomm,univ-energy,icarus,solaris,zeus-med,zb-def,infocomm,taiyang-digital,nova-med,titan-labs,microdyne,run4theh111z,applied-energetics,vitalife,fulcrumtech,helios,stormtech,omnitek,kuai-gong,.,4sigma,b-and-a,blade,nwo,clarkinc,powerhouse-fitness,fulcrumassets,The-Cave,ecorp,megacorp,pserv-8192gb-0,pserv-8192gb-1,pserv-8192gb-2,pserv-8192gb-3,pserv-8192gb-4,pserv-8192gb-5,pserv-8192gb-6,pserv-8192gb-7,pserv-8192gb-8,pserv-8192gb-9,pserv-8192gb-10,pserv-8192gb-11,pserv-8192gb-12,pserv-8192gb-13,pserv-8192gb-14,pserv-8192gb-15,pserv-8192gb-16,pserv-8192gb-17,pserv-8192gb-18,pserv-8192gb-19,pserv-8192gb-20,pserv-8192gb-21,pserv-8192gb-22,pserv-8192gb-23,pserv-8192gb-24\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"rooted.txt\",\"text\":\"powerhouse-fitness,taiyang-digital,galactic-cyber,zb-institute,infocomm,titan-labs,lexo-corp,solaris,vitalife,alpha-ent,helios,rho-construction,microdyne,catalyst,syscore,snap-fitness,aevum-police,netlink,millenium-fitness,summit-uni,comptek,rothman-uni,the-hub,johnson-ortho,omega-net,crush-fitness,silver-helix,phantasy,iron-gym,max-hardware,zer0,neo-net,harakiri-sushi,hong-fang-tea,nectar-net,joesguns,sigma-cosmetics,foodnstuff,fulcrumassets,n00dles\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servers.txt\",\"text\":\"{\\\"home\\\":{\\\"n00dles - $1.75m - 1\\\":{\\\"zer0 - $187.50m - 75\\\":{},\\\"CSEC - $0.00 - 51\\\":{\\\"phantasy - $600.00m - 100\\\":{\\\"netlink - $6.88b - 424\\\":{\\\"I.I.I.I - $0.00 - 340\\\":{}},\\\"johnson-ortho - $1.78b - 271\\\":{\\\"catalyst - $12.72b - 415\\\":{\\\"lexo-corp - $18.39b - 651\\\":{\\\"aerocorp - $26.23b - 868\\\":{}},\\\"alpha-ent - $15.30b - 513\\\":{\\\"snap-fitness - $11.25b - 688\\\":{}}}},\\\"crush-fitness - $1.45b - 239\\\":{\\\"summit-uni - $7.21b - 459\\\":{\\\"millenium-fitness - $6.25b - 520\\\":{\\\"galactic-cyber - $20.24b - 862\\\":{\\\"omnia - $23.70b - 929\\\":{\\\"zeus-med - $34.47b - 842\\\":{}},\\\"deltaone - $38.34b - 893\\\":{\\\"univ-energy - $28.33b - 841\\\":{\\\"infocomm - $16.43b - 908\\\":{},\\\"zb-def - $24.41b - 790\\\":{\\\"microdyne - $14.63b - 836\\\":{\\\"stormtech - $28.26b - 969\\\":{\\\"kuai-gong - $698.05b - 1178\\\":{\\\"blade - $937.51b - 960\\\":{\\\"ecorp - $1.30t - 1271\\\":{}},\\\"nwo - $694.05b - 980\\\":{\\\"fulcrumassets - $25.00m - 1205\\\":{}}}},\\\"vitalife - $19.04b - 839\\\":{\\\"omnitek - $542.96b - 970\\\":{\\\"clarkinc - $504.16b - 967\\\":{\\\"megacorp - $1.41t - 1274\\\":{}},\\\"powerhouse-fitness - $22.50b - 1052\\\":{}},\\\"4sigma - $415.83b - 1018\\\":{},\\\". - $0.00 - 543\\\":{\\\"b-and-a - $423.15b - 987\\\":{\\\"The-Cave - $0.00 - 925\\\":{}}}}},\\\"applied-energetics - $21.16b - 807\\\":{}}},\\\"solaris - $21.70b - 754\\\":{\\\"nova-med - $28.00b - 810\\\":{}}}}}}}},\\\"omega-net - $1.53b - 193\\\":{\\\"comptek - $5.74b - 351\\\":{\\\"syscore - $14.64b - 604\\\":{\\\"rho-construction - $13.75b - 516\\\":{\\\"global-pharm - $39.11b - 834\\\":{\\\"unitalife - $26.24b - 822\\\":{\\\"defcomm - $23.18b - 954\\\":{},\\\"icarus - $24.46b - 882\\\":{\\\"taiyang-digital - $21.72b - 865\\\":{\\\"titan-labs - $21.49b - 833\\\":{},\\\"run4theh111z - $0.00 - 527\\\":{\\\"fulcrumtech - $39.17b - 1014\\\":{},\\\"helios - $16.90b - 897\\\":{}}}}}}}}},\\\"avmnite-02h - $0.00 - 208\\\":{\\\"zb-institute - $21.07b - 731\\\":{\\\"aevum-police - $5.45b - 413\\\":{}}}}}},\\\"foodnstuff - $50.00m - 1\\\":{},\\\"sigma-cosmetics - $57.50m - 5\\\":{\\\"nectar-net - $68.75m - 20\\\":{\\\"silver-helix - $1.13b - 150\\\":{\\\"the-hub - $3.93b - 308\\\":{\\\"rothman-uni - $4.60b - 391\\\":{}}}}},\\\"joesguns - $62.50m - 10\\\":{},\\\"hong-fang-tea - $75.00m - 30\\\":{},\\\"harakiri-sushi - $100.00m - 40\\\":{\\\"max-hardware - $250.00m - 80\\\":{\\\"neo-net - $125.00m - 50\\\":{}}},\\\"iron-gym - $500.00m - 100\\\":{},\\\"darkweb - $0.00 - 1\\\":{}}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"money_rooted.txt\",\"text\":\"1480977540475 megacorp,1413874657850 ecorp,750351022225 blade,670578069050 kuai-gong,659166772075 nwo,640042992325 b-and-a,547157625425 clarkinc,420560953000 4sigma,359732818875 omnitek,41889903800 fulcrumtech,39166712850 global-pharm,37042760725 zeus-med,34924308025 deltaone,29490722425 univ-energy,27703034800 nova-med,26855249850 aerocorp,26812581800 unitalife,26745185950 stormtech,24659756975 icarus,24441190275 zb-def,23763395775 applied-energetics,23643377400 omnia,23450067075 defcomm,22500000000 powerhouse-fitness,21359436925 taiyang-digital,20845928400 galactic-cyber,20676750400 zb-institute,20253119775 infocomm,20152165125 titan-labs,19133186475 lexo-corp,18265206625 solaris,17814316375 vitalife,17799287375 alpha-ent,16798968600 helios,14961259150 rho-construction,12752469900 microdyne,12521265350 catalyst,12086823250 syscore,11250000000 snap-fitness,6930717000 aevum-police,6875000000 netlink,6250000000 millenium-fitness,5936008325 summit-uni,5795066675 comptek,5538983150 rothman-uni,4453857500 the-hub,1828826650 johnson-ortho,1635242600 omega-net,1358123625 crush-fitness,1125000000 silver-helix,600000000 phantasy,500000000 iron-gym,250000000 max-hardware,187500000 zer0,125000000 neo-net,100000000 harakiri-sushi,75000000 hong-fang-tea,68750000 nectar-net,62500000 joesguns,57500000 sigma-cosmetics,50000000 foodnstuff,25000000 fulcrumassets,1750000 n00dles\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-201094.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"25018743103\",22],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"39.8.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":475}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":476}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":477}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"ecorp\",\"moduleSequenceNumber\":478}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"ecorp\",\"moduleSequenceNumber\":479}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":33,\"minDifficulty\":33,\"moneyAvailable\":1413874657850,\"moneyMax\":1413874657850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1177,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"50.8.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":480}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":481}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":482}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"megacorp\",\"moduleSequenceNumber\":483}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"megacorp\",\"moduleSequenceNumber\":484}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":33,\"minDifficulty\":33,\"moneyAvailable\":1480977540475,\"moneyMax\":1480977540475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1202,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"86.7.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":485}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":486}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":487}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"b-and-a\",\"moduleSequenceNumber\":488}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"b-and-a\",\"moduleSequenceNumber\":489}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":27,\"minDifficulty\":27,\"moneyAvailable\":640042992325,\"moneyMax\":640042992325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1147,\"serverGrowth\":62}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-411018.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[160,196,176,90,97,111,125,157,146,110,107,93,14,104,29,135,79,134,30,138,85,40,180,71,48,117,106,170,142,36,174,22,96,160,83,20,178,41,38,138],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"48.3.7.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":490}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":491}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":492}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///eb2b4cde-807c-4d8b-86bd-1ba3cab41ec7\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///eb2b4cde-807c-4d8b-86bd-1ba3cab41ec7\"}],\"ramUsage\":5.6,\"server\":\"blade\",\"moduleSequenceNumber\":493}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"blade\",\"moduleSequenceNumber\":494}}],\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":32,\"minDifficulty\":32,\"moneyAvailable\":750351022225,\"moneyMax\":750351022225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":985,\"serverGrowth\":65}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"73.8.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":495}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":496}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":497}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"nwo\",\"moduleSequenceNumber\":498}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"nwo\",\"moduleSequenceNumber\":499}}],\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":33,\"minDifficulty\":33,\"moneyAvailable\":659166772075,\"moneyMax\":659166772075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1033,\"serverGrowth\":66}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"36.2.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":500}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":501}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":502}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"clarkinc\",\"moduleSequenceNumber\":503}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"clarkinc\",\"moduleSequenceNumber\":504}}],\"serversOnNetwork\":[\".\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":547157625425,\"moneyMax\":547157625425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1142,\"serverGrowth\":50}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"24.4.1.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":505}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":506}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":507}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///64bf7600-6cdc-4409-8467-adb5214d9559\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///64bf7600-6cdc-4409-8467-adb5214d9559\"}],\"ramUsage\":5.6,\"server\":\"omnitek\",\"moduleSequenceNumber\":508}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///28a34635-3d5e-42d7-99bb-ac89a363475f\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///28a34635-3d5e-42d7-99bb-ac89a363475f\"}],\"ramUsage\":6.1,\"server\":\"omnitek\",\"moduleSequenceNumber\":509}}],\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":31,\"minDifficulty\":31,\"moneyAvailable\":359732818875,\"moneyMax\":359732818875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":917,\"serverGrowth\":96}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-834354.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()())a)(()((\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-195721.cct\",\"type\":\"Total Ways to Sum\",\"data\":30,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"46.3.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":510}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":511}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":512}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"4sigma\",\"moduleSequenceNumber\":513}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"4sigma\",\"moduleSequenceNumber\":514}}],\"serversOnNetwork\":[\"stormtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":23,\"minDifficulty\":23,\"moneyAvailable\":420560953000,\"moneyMax\":420560953000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":958,\"serverGrowth\":90}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"18.8.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":515}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":516}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":517}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":518}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":519}}],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":32,\"minDifficulty\":32,\"moneyAvailable\":670578069050,\"moneyMax\":670578069050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1107,\"serverGrowth\":99}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"77.2.2.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":520}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":521}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":522}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///897192fc-d8c1-435a-b4fa-51320970db26\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///897192fc-d8c1-435a-b4fa-51320970db26\"}],\"ramUsage\":5.6,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":523}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///55d44455-77dc-43e2-b648-c91ecf471ab9\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///55d44455-77dc-43e2-b648-c91ecf471ab9\"}],\"ramUsage\":6.1,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":524}}],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":31,\"minDifficulty\":31,\"moneyAvailable\":41889903800,\"moneyMax\":41889903800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1114,\"serverGrowth\":99}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"56.4.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":525}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":526}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":527}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":528}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":529}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":33.012000000000015,\"minDifficulty\":33,\"moneyAvailable\":23259717,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1104,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"89.6.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":530}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":531}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":532}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"stormtech\",\"moduleSequenceNumber\":533}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"stormtech\",\"moduleSequenceNumber\":534}}],\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":26745185950,\"moneyMax\":26745185950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1036,\"serverGrowth\":68}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"94.9.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":535}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":536}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":537}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"defcomm\",\"moduleSequenceNumber\":538}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"defcomm\",\"moduleSequenceNumber\":539}}],\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":28,\"minDifficulty\":28,\"moneyAvailable\":23450067075,\"moneyMax\":23450067075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":941,\"serverGrowth\":51}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-699556.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"381915997\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"90.3.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":540}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":541}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":542}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"infocomm\",\"moduleSequenceNumber\":543}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"infocomm\",\"moduleSequenceNumber\":544}}],\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":29.009999999999994,\"minDifficulty\":29,\"moneyAvailable\":18884167638,\"moneyMax\":20253119775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":933,\"serverGrowth\":51}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-412412-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[157,81,66,115,49,79,147,59,69,198,143,82,58,61,177,197,15,44,153,37,42,102,82],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-651054-TianDiHui.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[25,154,78,116,174,192,100,25],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"51.2.9.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":545}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":546}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":547}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///30e23e38-c007-4dab-b86a-2257425ef2ab\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///30e23e38-c007-4dab-b86a-2257425ef2ab\"}],\"ramUsage\":5.6,\"server\":\"helios\",\"moduleSequenceNumber\":548}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///072cab73-3ef0-46ee-a3c5-d808fc72c118\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///072cab73-3ef0-46ee-a3c5-d808fc72c118\"}],\"ramUsage\":6.1,\"server\":\"helios\",\"moduleSequenceNumber\":549}}],\"serversOnNetwork\":[\"run4theh111z\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":31,\"minDifficulty\":31,\"moneyAvailable\":16798968600,\"moneyMax\":16798968600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":801,\"serverGrowth\":74}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"3.5.3.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":550}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":551}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":552}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///bb7e46eb-fc81-411b-a1f4-7e9be6409465\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///bb7e46eb-fc81-411b-a1f4-7e9be6409465\"}],\"ramUsage\":5.6,\"server\":\"vitalife\",\"moduleSequenceNumber\":553}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///32fce2e8-0aa1-423a-981a-2566d68bb807\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///32fce2e8-0aa1-423a-981a-2566d68bb807\"}],\"ramUsage\":6.1,\"server\":\"vitalife\",\"moduleSequenceNumber\":554}}],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":30.129999999999995,\"minDifficulty\":30,\"moneyAvailable\":17814316375,\"moneyMax\":17814316375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":785,\"serverGrowth\":77}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"11.5.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":555}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":556}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":557}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"icarus\",\"moduleSequenceNumber\":558}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"icarus\",\"moduleSequenceNumber\":559}}],\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":24659756975,\"moneyMax\":24659756975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":879,\"serverGrowth\":88}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"25.8.7.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":560}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":561}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":562}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///38c5a5bf-763d-43a5-82d4-1538066671cd\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///38c5a5bf-763d-43a5-82d4-1538066671cd\"}],\"ramUsage\":5.6,\"server\":\"univ-energy\",\"moduleSequenceNumber\":563}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///67caed91-1bd1-4193-9fd6-e90edd630a78\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///67caed91-1bd1-4193-9fd6-e90edd630a78\"}],\"ramUsage\":6.1,\"server\":\"univ-energy\",\"moduleSequenceNumber\":564}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":27,\"minDifficulty\":27,\"moneyAvailable\":29490722425,\"moneyMax\":29490722425,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":879,\"serverGrowth\":88}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-520915-Daedalus.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[73,56,145,187,197,38,37,1,170,49,150,103,45,124,125,74,139,75,124,168,51,17,187,4,178,15,52,1,187,15,69,57,158,118,170,16,120,17,69,41,51,178,29,107,2,164,130]],\"reward\":{\"name\":\"Daedalus\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"43.6.4.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":565}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":566}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":567}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///49fe5733-1f77-4f0d-8d5c-8b79af5482de\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///49fe5733-1f77-4f0d-8d5c-8b79af5482de\"}],\"ramUsage\":5.6,\"server\":\"titan-labs\",\"moduleSequenceNumber\":568}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///395a77f3-d5f5-4233-8d75-0a0b4a0661d7\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///395a77f3-d5f5-4233-8d75-0a0b4a0661d7\"}],\"ramUsage\":6.1,\"server\":\"titan-labs\",\"moduleSequenceNumber\":569}}],\"serversOnNetwork\":[\"infocomm\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":25.009999999999994,\"minDifficulty\":25,\"moneyAvailable\":18619598484,\"moneyMax\":20152165125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":800,\"serverGrowth\":64}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"76.9.6.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":570}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":571}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":572}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///cf545223-de03-488f-a97e-d3edaea02dae\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///cf545223-de03-488f-a97e-d3edaea02dae\"}],\"ramUsage\":5.6,\"server\":\"microdyne\",\"moduleSequenceNumber\":573}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ccfe83ac-6f97-4496-bf61-2d0e04966440\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ccfe83ac-6f97-4496-bf61-2d0e04966440\"}],\"ramUsage\":6.1,\"server\":\"microdyne\",\"moduleSequenceNumber\":574}}],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":25.009999999999994,\"minDifficulty\":25,\"moneyAvailable\":11787660165,\"moneyMax\":12752469900,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":811,\"serverGrowth\":71}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"6.5.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":575}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":576}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":577}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":578}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":579}}],\"serversOnNetwork\":[\"solaris\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":25.009999999999994,\"minDifficulty\":25,\"moneyAvailable\":19786234540,\"moneyMax\":21359436925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":867,\"serverGrowth\":78}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"45.0.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":580}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":581}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":582}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":583}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":584}}],\"serversOnNetwork\":[\"aevum-police\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":20.085999999999995,\"minDifficulty\":20,\"moneyAvailable\":20845928400,\"moneyMax\":20845928400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":847,\"serverGrowth\":90}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-414070.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[7],[6,8],[9,5,8],[4,7,1,8],[8,7,6,7,3],[4,8,1,8,9,9],[3,2,7,8,5,7,6],[4,4,6,3,7,9,3,3],[8,9,8,5,3,8,4,4,9],[5,6,3,1,9,8,3,1,8,5]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"28.8.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":585}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":586}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":587}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"aerocorp\",\"moduleSequenceNumber\":588}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"aerocorp\",\"moduleSequenceNumber\":589}}],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":30,\"minDifficulty\":30,\"moneyAvailable\":26855249850,\"moneyMax\":26855249850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":880,\"serverGrowth\":63}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-585803.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[45,61,160,173,62,104,153,76,60,164,73,109,11,185,32,57,52,39,1,137,82,149,98],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"53.3.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":590}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":591}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":592}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///1cf69a12-a164-4cde-b162-1c2ea2118e8a\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///1cf69a12-a164-4cde-b162-1c2ea2118e8a\"}],\"ramUsage\":5.6,\"server\":\"omnia\",\"moduleSequenceNumber\":593}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///8c8799dd-67ea-4674-983f-4d9e383f49e8\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///8c8799dd-67ea-4674-983f-4d9e383f49e8\"}],\"ramUsage\":6.1,\"server\":\"omnia\",\"moduleSequenceNumber\":594}}],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":31,\"minDifficulty\":31,\"moneyAvailable\":23643377400,\"moneyMax\":23643377400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":873,\"serverGrowth\":66}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"21.3.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":595}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":596}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":597}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"zb-def\",\"moduleSequenceNumber\":598}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"zb-def\",\"moduleSequenceNumber\":599}}],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":21,\"minDifficulty\":21,\"moneyAvailable\":24441190275,\"moneyMax\":24441190275,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":800,\"serverGrowth\":72}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"27.3.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":600}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":601}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":602}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":603}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":604}}],\"serversOnNetwork\":[\"nova-med\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":21,\"minDifficulty\":21,\"moneyAvailable\":23763395775,\"moneyMax\":23763395775,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":825,\"serverGrowth\":72}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-195195.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[36,18,43,12,20,14,8,36,24,50,30,41,36,27],[17,48,40,16,41,36,43,30,31,12,37,40,24,1],[4,1,9,21,12,36,48,15,31,24,38,29,7,7],[19,24,5,21,26,44,45,20,43,6,16,49,1,26],[16,15,3,48,14,2,28,9,33,15,46,6,16,20]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"62.1.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":605}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":606}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":607}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///2f71c070-150a-436b-896b-86700437d710\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///2f71c070-150a-436b-896b-86700437d710\"}],\"ramUsage\":5.6,\"server\":\"solaris\",\"moduleSequenceNumber\":608}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///5765ad35-bd47-4ce4-9f5a-5cef27c56a12\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///5765ad35-bd47-4ce4-9f5a-5cef27c56a12\"}],\"ramUsage\":6.1,\"server\":\"solaris\",\"moduleSequenceNumber\":609}}],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":25,\"minDifficulty\":25,\"moneyAvailable\":17974905232,\"moneyMax\":18265206625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":774,\"serverGrowth\":78}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-108373.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(aa)((a(((a(((a))a\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"26.4.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":610}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":611}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":612}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"deltaone\",\"moduleSequenceNumber\":613}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"deltaone\",\"moduleSequenceNumber\":614}}],\"serversOnNetwork\":[\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":27,\"minDifficulty\":27,\"moneyAvailable\":34924308025,\"moneyMax\":34924308025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":878,\"serverGrowth\":66}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-757438.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-9,1,-10,-4,-4,-4,-5,6,3,-5,9,7,2,-6,0,-6,5,-6,-9,5],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"91.6.7.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":615}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":616}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":617}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///4ab32e8e-2e1c-4c5c-a1bd-9dc959c9f646\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///4ab32e8e-2e1c-4c5c-a1bd-9dc959c9f646\"}],\"ramUsage\":5.6,\"server\":\"global-pharm\",\"moduleSequenceNumber\":618}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///e5faca87-07b4-4e9a-b464-f732b882a4b2\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///e5faca87-07b4-4e9a-b464-f732b882a4b2\"}],\"ramUsage\":6.1,\"server\":\"global-pharm\",\"moduleSequenceNumber\":619}}],\"serversOnNetwork\":[\"alpha-ent\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":27,\"minDifficulty\":27,\"moneyAvailable\":39166712850,\"moneyMax\":39166712850,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":770,\"serverGrowth\":90}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-122963.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[178,39,129,92,48,52,35,2,79,62,40,46,88,54,141,90,37,166,200,156,105,80,3,129,75,23,96,149,171,198,136,193,54,195,107,133,71,135,39,82,152,150,141,100,155],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"69.5.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":620}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":621}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":622}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"nova-med\",\"moduleSequenceNumber\":623}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"nova-med\",\"moduleSequenceNumber\":624}}],\"serversOnNetwork\":[\"zeus-med\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":21,\"minDifficulty\":21,\"moneyAvailable\":27703034800,\"moneyMax\":27703034800,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":775,\"serverGrowth\":77}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"62.7.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":625}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":626}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":627}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"zeus-med\",\"moduleSequenceNumber\":628}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"zeus-med\",\"moduleSequenceNumber\":629}}],\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":28,\"minDifficulty\":28,\"moneyAvailable\":37042760725,\"moneyMax\":37042760725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":829,\"serverGrowth\":73}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-279184.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[69,179,32,116,171,22,191,29,51,54,200,159,44,118,77,46,30,20,141,72,17,93,176,103,179,1,143,12],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"19.1.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":630}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":631}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":632}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///00ccc343-0940-4030-aa94-a44ae4216f06\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///00ccc343-0940-4030-aa94-a44ae4216f06\"}],\"ramUsage\":5.6,\"server\":\"unitalife\",\"moduleSequenceNumber\":633}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///48324872-184b-4894-854a-09a6463adfa3\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///48324872-184b-4894-854a-09a6463adfa3\"}],\"ramUsage\":6.1,\"server\":\"unitalife\",\"moduleSequenceNumber\":634}}],\"serversOnNetwork\":[\"global-pharm\",\"icarus\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":26812581800,\"moneyMax\":26812581800,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":813,\"serverGrowth\":74}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"60.1.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":635}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":636}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":637}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///05e19047-1295-4da5-97ec-43f4ce289465\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///05e19047-1295-4da5-97ec-43f4ce289465\"}],\"ramUsage\":5.6,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":638}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///cd0b4b5c-62f7-41e9-a4e3-87c8d51fb941\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///cd0b4b5c-62f7-41e9-a4e3-87c8d51fb941\"}],\"ramUsage\":6.1,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":639}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":19133186475,\"moneyMax\":19133186475,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":667,\"serverGrowth\":65}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"50.6.1.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":640}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":641}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":642}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///fc966b16-2a6e-4937-90a8-0e7e82b1672d\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///fc966b16-2a6e-4937-90a8-0e7e82b1672d\"}],\"ramUsage\":5.6,\"server\":\"rho-construction\",\"moduleSequenceNumber\":643}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///295ecbdd-8fdf-4d1f-a17a-fb9a5edcbb5c\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///295ecbdd-8fdf-4d1f-a17a-fb9a5edcbb5c\"}],\"ramUsage\":6.1,\"server\":\"rho-construction\",\"moduleSequenceNumber\":644}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":15.010000000000003,\"minDifficulty\":15,\"moneyAvailable\":13500866507,\"moneyMax\":14961259150,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":505,\"serverGrowth\":57}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"30.7.8.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":645}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":646}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":647}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///49206e66-a9c7-43c6-98f4-b14de7ee7be9\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///49206e66-a9c7-43c6-98f4-b14de7ee7be9\"}],\"ramUsage\":5.6,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":648}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///307d705e-f587-42a4-a309-7d5ba9d52db7\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///307d705e-f587-42a4-a309-7d5ba9d52db7\"}],\"ramUsage\":6.1,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":649}}],\"serversOnNetwork\":[\"syscore\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":20.009999999999994,\"minDifficulty\":20,\"moneyAvailable\":16186930874,\"moneyMax\":17799287375,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":545,\"serverGrowth\":50}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"40.7.4.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":650}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":651}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":652}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///9ce2ecbc-b801-4764-b909-ba4b6c2abee3\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///9ce2ecbc-b801-4764-b909-ba4b6c2abee3\"}],\"ramUsage\":5.6,\"server\":\"aevum-police\",\"moduleSequenceNumber\":653}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///6572856a-cdc9-4663-9a17-382fed37b7c7\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///6572856a-cdc9-4663-9a17-382fed37b7c7\"}],\"ramUsage\":6.1,\"server\":\"aevum-police\",\"moduleSequenceNumber\":654}}],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":25.009999999999994,\"minDifficulty\":25,\"moneyAvailable\":6309125221,\"moneyMax\":6930717000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":416,\"serverGrowth\":34}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"35.2.9.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":655}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":656}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":657}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///dbe88d58-9800-4999-9448-ce60a760cf80\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///dbe88d58-9800-4999-9448-ce60a760cf80\"}],\"ramUsage\":5.6,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":658}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///399472cc-f184-4154-95ab-0b15dad22a92\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///399472cc-f184-4154-95ab-0b15dad22a92\"}],\"ramUsage\":6.1,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":659}}],\"serversOnNetwork\":[\"netlink\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":18.009999999999994,\"minDifficulty\":18,\"moneyAvailable\":4990090056,\"moneyMax\":5538983150,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":380,\"serverGrowth\":37}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-56357-BitRunners.cct\",\"type\":\"Total Ways to Sum\",\"data\":71,\"reward\":{\"name\":\"BitRunners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"27.2.3.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":660}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":661}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":662}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///1250d8f2-fc6d-487f-9b6e-2372facdb478\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///1250d8f2-fc6d-487f-9b6e-2372facdb478\"}],\"ramUsage\":5.6,\"server\":\"zb-institute\",\"moduleSequenceNumber\":663}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///10d3c49c-7c6b-45de-95ff-bcfb57e89090\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///10d3c49c-7c6b-45de-95ff-bcfb57e89090\"}],\"ramUsage\":6.1,\"server\":\"zb-institute\",\"moduleSequenceNumber\":664}}],\"serversOnNetwork\":[\"avmnite-02h\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":26.009999999999994,\"minDifficulty\":26,\"moneyAvailable\":19072873811,\"moneyMax\":20676750400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":729,\"serverGrowth\":83}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"39.2.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":665}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":666}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":667}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///61bf3d21-dee1-4adf-b505-28055c1217a2\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///61bf3d21-dee1-4adf-b505-28055c1217a2\"}],\"ramUsage\":5.6,\"server\":\"summit-uni\",\"moduleSequenceNumber\":668}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///71970fc4-2afa-4c2e-9e6d-e7e02199a4f2\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///71970fc4-2afa-4c2e-9e6d-e7e02199a4f2\"}],\"ramUsage\":6.1,\"server\":\"summit-uni\",\"moduleSequenceNumber\":669}}],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":16.009999999999994,\"minDifficulty\":16,\"moneyAvailable\":5356133053,\"moneyMax\":5936008325,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":475,\"serverGrowth\":51}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-287265.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[158,7,50],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"61.4.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":670}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":671}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":672}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"syscore\",\"moduleSequenceNumber\":673}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"syscore\",\"moduleSequenceNumber\":674}}],\"serversOnNetwork\":[\"the-hub\",\"rho-construction\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":22.007999999999996,\"minDifficulty\":22,\"moneyAvailable\":11256051656,\"moneyMax\":12086823250,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":633,\"serverGrowth\":65}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-964578-TianDiHui.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[48,155,87,109,46,39,198,84,120,91,118,148,27,45,6,33,42,199],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"84.6.6.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":675}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":676}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":677}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///502d45f9-16ea-496f-b21e-6fd098c344bf\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///502d45f9-16ea-496f-b21e-6fd098c344bf\"}],\"ramUsage\":5.6,\"server\":\"catalyst\",\"moduleSequenceNumber\":678}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///79e57441-c084-4b7f-a9f1-cef2020cf7e4\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///79e57441-c084-4b7f-a9f1-cef2020cf7e4\"}],\"ramUsage\":6.1,\"server\":\"catalyst\",\"moduleSequenceNumber\":679}}],\"serversOnNetwork\":[\"avmnite-02h\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":22.002,\"minDifficulty\":22,\"moneyAvailable\":12280494942,\"moneyMax\":12521265350,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":433,\"serverGrowth\":53}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-22088.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"482623738\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"35.1.2.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":680}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":681}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":682}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"the-hub\",\"moduleSequenceNumber\":683}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"the-hub\",\"moduleSequenceNumber\":684}}],\"serversOnNetwork\":[\"silver-helix\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":4453857500,\"moneyMax\":4453857500,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":303,\"serverGrowth\":52}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-81183.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":358277431,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"70.0.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":685}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":686}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":687}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"comptek\",\"moduleSequenceNumber\":688}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"comptek\",\"moduleSequenceNumber\":689}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":18,\"minDifficulty\":18,\"moneyAvailable\":5795066675,\"moneyMax\":5795066675,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":318,\"serverGrowth\":46}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-30171.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"20214277139\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"5.1.5.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":690}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":691}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":692}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///b46154b6-b37e-48d6-bed3-7ada745a41c6\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///b46154b6-b37e-48d6-bed3-7ada745a41c6\"}],\"ramUsage\":5.6,\"server\":\"netlink\",\"moduleSequenceNumber\":693}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///16a5b08d-951c-4938-9428-a05a6a032fd2\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///16a5b08d-951c-4938-9428-a05a6a032fd2\"}],\"ramUsage\":6.1,\"server\":\"netlink\",\"moduleSequenceNumber\":694}}],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":21,\"minDifficulty\":21,\"moneyAvailable\":6875000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":398,\"serverGrowth\":62}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"40.7.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":695}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":696}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":697}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":698}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":699}}],\"serversOnNetwork\":[\"omega-net\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":15,\"minDifficulty\":15,\"moneyAvailable\":1828826650,\"moneyMax\":1828826650,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":268,\"serverGrowth\":38}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"42.2.6.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":700}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":701}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":702}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"n00dles\",\"moduleSequenceNumber\":703}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"n00dles\",\"moduleSequenceNumber\":704}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"9.8.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":705}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":706}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":707}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///6681e647-3681-4267-ae19-4b6246b4f3c1\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///6681e647-3681-4267-ae19-4b6246b4f3c1\"}],\"ramUsage\":5.6,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":708}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///01d20f0f-bc99-4e4d-9d77-b3d62da8ae48\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///01d20f0f-bc99-4e4d-9d77-b3d62da8ae48\"}],\"ramUsage\":6.1,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":709}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":50000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-452906.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0],[1,0,0,0,0],[0,1,0,0,0],[0,0,0,0,1],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,1],[1,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-787031.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[171,174,48,157,152,121,111,49,46,164,88,37,73,4,7,195,163,15,144,102,173,49,162,197,113,181,185,194,41,149,189,76,89]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-316409-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[163,4,117,49,17,3],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"0.6.9.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":710}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":711}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":712}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///bf8da59a-5ea5-4b04-b8f2-8a23671cce6d\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///bf8da59a-5ea5-4b04-b8f2-8a23671cce6d\"}],\"ramUsage\":5.6,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":713}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///2ae0e95d-d8c2-4d3f-9ce1-8172fd6dcb5a\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///2ae0e95d-d8c2-4d3f-9ce1-8172fd6dcb5a\"}],\"ramUsage\":6.1,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":714}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":57500000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-427896.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[68,110,25,16,75,115,181,170,9,16,33,165,66,12,84,91,183,67,68,176,192,41,162,137,113,162,183,131,66,139],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"16.9.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":715}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":716}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":717}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///95e2c02e-98e5-4c6f-badc-b8950ea4032b\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///95e2c02e-98e5-4c6f-badc-b8950ea4032b\"}],\"ramUsage\":5.6,\"server\":\"joesguns\",\"moduleSequenceNumber\":718}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///3b4271a0-4ade-4562-8bca-55cf52d0eea5\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///3b4271a0-4ade-4562-8bca-55cf52d0eea5\"}],\"ramUsage\":6.1,\"server\":\"joesguns\",\"moduleSequenceNumber\":719}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":62500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"84.9.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":720}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":721}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":722}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///81f9e50b-e2e0-4be6-b4bb-a78c106c1a2d\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///81f9e50b-e2e0-4be6-b4bb-a78c106c1a2d\"}],\"ramUsage\":5.6,\"server\":\"zer0\",\"moduleSequenceNumber\":723}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///8445c85e-7f87-470a-984b-a541bb0512f7\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///8445c85e-7f87-470a-984b-a541bb0512f7\"}],\"ramUsage\":6.1,\"server\":\"zer0\",\"moduleSequenceNumber\":724}}],\"serversOnNetwork\":[\"n00dles\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":187500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"90.7.2.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":725}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":726}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":727}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///67917811-dcd4-43aa-952b-a1430cc8dd03\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///67917811-dcd4-43aa-952b-a1430cc8dd03\"}],\"ramUsage\":5.6,\"server\":\"nectar-net\",\"moduleSequenceNumber\":728}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///3fc07ab6-2407-4fe8-aaff-003fbe612e94\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///3fc07ab6-2407-4fe8-aaff-003fbe612e94\"}],\"ramUsage\":6.1,\"server\":\"nectar-net\",\"moduleSequenceNumber\":729}}],\"serversOnNetwork\":[\"iron-gym\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":68750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"27.5.2.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":730}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":731}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":732}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///24550827-55d3-4ca8-b2f8-e9ac3a700c8e\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///24550827-55d3-4ca8-b2f8-e9ac3a700c8e\"}],\"ramUsage\":5.6,\"server\":\"neo-net\",\"moduleSequenceNumber\":733}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///2a62126b-1bcd-4c4e-8a7d-2d3359e49ff9\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///2a62126b-1bcd-4c4e-8a7d-2d3359e49ff9\"}],\"ramUsage\":6.1,\"server\":\"neo-net\",\"moduleSequenceNumber\":734}}],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":125000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"49.9.5.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":735}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":736}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":737}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///6ae984e4-9ecd-4045-aa57-8e9007778dac\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///6ae984e4-9ecd-4045-aa57-8e9007778dac\"}],\"ramUsage\":5.6,\"server\":\"silver-helix\",\"moduleSequenceNumber\":738}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///cd1d965c-cdd8-44bc-8630-4ef68a3270e0\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///cd1d965c-cdd8-44bc-8630-4ef68a3270e0\"}],\"ramUsage\":6.1,\"server\":\"silver-helix\",\"moduleSequenceNumber\":739}}],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":1125000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"34.7.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":740}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":741}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":742}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///9ec8db4c-04e4-4eef-a806-9fc168b79a23\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///9ec8db4c-04e4-4eef-a806-9fc168b79a23\"}],\"ramUsage\":5.6,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":743}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ed6f033e-6918-4ca3-b189-f022ea2d7303\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///ed6f033e-6918-4ca3-b189-f022ea2d7303\"}],\"ramUsage\":6.1,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":744}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":75000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"94.1.7.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":745}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":746}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":747}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///7321769b-4b9a-40c0-be08-d532bba9f8d8\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///7321769b-4b9a-40c0-be08-d532bba9f8d8\"}],\"ramUsage\":5.6,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":748}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///17f282e3-d783-49b5-9106-b01f8a150266\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///17f282e3-d783-49b5-9106-b01f8a150266\"}],\"ramUsage\":6.1,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":749}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":100000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-922051.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[200,187,27,2,36,157,199,52,167,157,139,185,196,24,52,3,64,159,148,163,177,26,198,17,109,118,157,90,74,58,42,30,46,107,60,54,162,108,125,39]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"76.7.8.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":750}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":751}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":752}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///821b5177-1bcb-421d-b854-06f052286ec8\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///821b5177-1bcb-421d-b854-06f052286ec8\"}],\"ramUsage\":5.6,\"server\":\"phantasy\",\"moduleSequenceNumber\":753}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///06b5fe5a-69f5-403e-a288-bd7d2c0e8c22\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///06b5fe5a-69f5-403e-a288-bd7d2c0e8c22\"}],\"ramUsage\":6.1,\"server\":\"phantasy\",\"moduleSequenceNumber\":754}}],\"serversOnNetwork\":[\"zer0\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":600000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"1.6.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":755}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":756}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":757}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///c17680ed-bb44-4404-a193-7604baba162a\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///c17680ed-bb44-4404-a193-7604baba162a\"}],\"ramUsage\":5.6,\"server\":\"max-hardware\",\"moduleSequenceNumber\":758}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///519c9859-e5bf-4d74-84f6-fbb79e8324c7\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///519c9859-e5bf-4d74-84f6-fbb79e8324c7\"}],\"ramUsage\":6.1,\"server\":\"max-hardware\",\"moduleSequenceNumber\":759}}],\"serversOnNetwork\":[\"n00dles\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":250000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"99.9.2.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":760}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":761}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":762}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///99aa5556-7bef-4dfb-a097-d5658e25eeb9\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///99aa5556-7bef-4dfb-a097-d5658e25eeb9\"}],\"ramUsage\":5.6,\"server\":\"omega-net\",\"moduleSequenceNumber\":763}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///2d443dfe-69d5-4722-a477-3d85a7dc6bb1\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///2d443dfe-69d5-4722-a477-3d85a7dc6bb1\"}],\"ramUsage\":6.1,\"server\":\"omega-net\",\"moduleSequenceNumber\":764}}],\"serversOnNetwork\":[\"nectar-net\",\"comptek\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":34,\"hackDifficulty\":11,\"minDifficulty\":11,\"moneyAvailable\":1635242600,\"moneyMax\":1635242600,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":216,\"serverGrowth\":37}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"31.3.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":765}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":766}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":767}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":768}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":769}}],\"serversOnNetwork\":[\"silver-helix\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":1358123625,\"moneyMax\":1358123625,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":226,\"serverGrowth\":31}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"38.9.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":770}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":771}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":772}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///f5c7e87c-def7-429a-bfaf-5bdb973213d9\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///f5c7e87c-def7-429a-bfaf-5bdb973213d9\"}],\"ramUsage\":5.6,\"server\":\"iron-gym\",\"moduleSequenceNumber\":773}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///557e31a3-8dbc-42d3-9d66-c55aeafe0eee\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///557e31a3-8dbc-42d3-9d66-c55aeafe0eee\"}],\"ramUsage\":6.1,\"server\":\"iron-gym\",\"moduleSequenceNumber\":774}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.166000000000002,\"minDifficulty\":10,\"moneyAvailable\":500000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-509490.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[17,53,110,3,30,96,47,126,193,168,84,124,163,109,22,126,144,164,150,152,144,120,34,36,28,185,113,120,37,101,19,163,33,69,109,115,199,77,105,63,78,96,30,11,62,30],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"78.9.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":775}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":776}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":777}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///f8f78819-862e-4aa8-88b6-c6e5afd762d8\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///f8f78819-862e-4aa8-88b6-c6e5afd762d8\"}],\"ramUsage\":5.6,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":778}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///29112732-0500-4538-b842-6901c5dd26ba\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///29112732-0500-4538-b842-6901c5dd26ba\"}],\"ramUsage\":6.1,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":779}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":15.010000000000003,\"minDifficulty\":15,\"moneyAvailable\":5640424057,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":507,\"serverGrowth\":45}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"97.1.4.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":780}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":781}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":782}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///a6745394-1d0d-4e99-82f9-ff2d57a7996c\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///a6745394-1d0d-4e99-82f9-ff2d57a7996c\"}],\"ramUsage\":5.6,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":783}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///be6af20e-47d8-4f9d-b5c9-3a97aac63e0f\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///be6af20e-47d8-4f9d-b5c9-3a97aac63e0f\"}],\"ramUsage\":6.1,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":784}}],\"serversOnNetwork\":[\"4sigma\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":21.009999999999994,\"minDifficulty\":21,\"moneyAvailable\":20840230677,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":965,\"serverGrowth\":51}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-904346.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(()a()a)((a\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"66.4.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":785}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":786}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":787}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":788}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":789}}],\"serversOnNetwork\":[\"aevum-police\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":19.009999999999994,\"minDifficulty\":19,\"moneyAvailable\":10322265127,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":786,\"serverGrowth\":53}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-454266-Daedalus.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[2,6],\"reward\":{\"name\":\"Daedalus\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"4.8.2.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":533,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"77.7.7.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":354,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"62.6.5.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":214,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"31.2.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"blade\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":544,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"63.3.4.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":55,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"8.1.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"53.5.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"16.0.9.5\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192gb-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192gb-0\",\"httpPortOpen\":false,\"ip\":\"65.1.2.4\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-0\",\"moduleSequenceNumber\":790}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-0\",\"moduleSequenceNumber\":791}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192gb-0\",\"moduleSequenceNumber\":792}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-8192gb-0\",\"moduleSequenceNumber\":793}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///9ba79cc9-8f26-4a38-a9e0-1dcf690a5fb1\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///9ba79cc9-8f26-4a38-a9e0-1dcf690a5fb1\"}],\"ramUsage\":6.1,\"server\":\"pserv-8192gb-0\",\"moduleSequenceNumber\":794}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192gb-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192gb-1\",\"httpPortOpen\":false,\"ip\":\"41.5.1.4\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-1\",\"moduleSequenceNumber\":795}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-1\",\"moduleSequenceNumber\":796}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192gb-1\",\"moduleSequenceNumber\":797}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-8192gb-1\",\"moduleSequenceNumber\":798}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///05843f0a-15c2-4b4b-83b4-135f7519842d\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///05843f0a-15c2-4b4b-83b4-135f7519842d\"}],\"ramUsage\":6.1,\"server\":\"pserv-8192gb-1\",\"moduleSequenceNumber\":799}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192gb-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192gb-2\",\"httpPortOpen\":false,\"ip\":\"5.7.1.7\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-2\",\"moduleSequenceNumber\":800}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-2\",\"moduleSequenceNumber\":801}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192gb-2\",\"moduleSequenceNumber\":802}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-8192gb-2\",\"moduleSequenceNumber\":803}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///d25a53e5-c424-4c65-8e59-da7e0bb6be7f\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///d25a53e5-c424-4c65-8e59-da7e0bb6be7f\"}],\"ramUsage\":6.1,\"server\":\"pserv-8192gb-2\",\"moduleSequenceNumber\":804}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192gb-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192gb-3\",\"httpPortOpen\":false,\"ip\":\"49.9.8.9\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-3\",\"moduleSequenceNumber\":805}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-3\",\"moduleSequenceNumber\":806}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192gb-3\",\"moduleSequenceNumber\":807}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-8192gb-3\",\"moduleSequenceNumber\":808}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///05f3716b-9e49-4792-9ea1-7f9c2827562e\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///05f3716b-9e49-4792-9ea1-7f9c2827562e\"}],\"ramUsage\":6.1,\"server\":\"pserv-8192gb-3\",\"moduleSequenceNumber\":809}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192gb-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192gb-4\",\"httpPortOpen\":false,\"ip\":\"45.0.4.2\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-4\",\"moduleSequenceNumber\":810}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-4\",\"moduleSequenceNumber\":811}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192gb-4\",\"moduleSequenceNumber\":812}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-8192gb-4\",\"moduleSequenceNumber\":813}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///aa817f5e-0a60-4987-81f3-fea99993aad5\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///aa817f5e-0a60-4987-81f3-fea99993aad5\"}],\"ramUsage\":6.1,\"server\":\"pserv-8192gb-4\",\"moduleSequenceNumber\":814}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192gb-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192gb-5\",\"httpPortOpen\":false,\"ip\":\"81.4.5.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-5\",\"moduleSequenceNumber\":815}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-5\",\"moduleSequenceNumber\":816}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192gb-5\",\"moduleSequenceNumber\":817}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-8192gb-5\",\"moduleSequenceNumber\":818}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///fa117723-b46f-4280-aa37-cdbae78628be\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///fa117723-b46f-4280-aa37-cdbae78628be\"}],\"ramUsage\":6.1,\"server\":\"pserv-8192gb-5\",\"moduleSequenceNumber\":819}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192gb-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192gb-6\",\"httpPortOpen\":false,\"ip\":\"86.8.9.5\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-6\",\"moduleSequenceNumber\":820}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-6\",\"moduleSequenceNumber\":821}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192gb-6\",\"moduleSequenceNumber\":822}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-8192gb-6\",\"moduleSequenceNumber\":823}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///4f5fdb7a-902f-4a97-9770-605addce5e6e\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///4f5fdb7a-902f-4a97-9770-605addce5e6e\"}],\"ramUsage\":6.1,\"server\":\"pserv-8192gb-6\",\"moduleSequenceNumber\":824}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192gb-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192gb-7\",\"httpPortOpen\":false,\"ip\":\"20.2.4.3\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-7\",\"moduleSequenceNumber\":825}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-7\",\"moduleSequenceNumber\":826}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192gb-7\",\"moduleSequenceNumber\":827}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-8192gb-7\",\"moduleSequenceNumber\":828}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///19c128eb-fa97-4b04-aff7-f5b6281e465d\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///19c128eb-fa97-4b04-aff7-f5b6281e465d\"}],\"ramUsage\":6.1,\"server\":\"pserv-8192gb-7\",\"moduleSequenceNumber\":829}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192gb-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192gb-8\",\"httpPortOpen\":false,\"ip\":\"5.6.9.2\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-8\",\"moduleSequenceNumber\":830}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-8\",\"moduleSequenceNumber\":831}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192gb-8\",\"moduleSequenceNumber\":832}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-8192gb-8\",\"moduleSequenceNumber\":833}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///10893242-ca35-450d-89af-1bee256b49aa\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///10893242-ca35-450d-89af-1bee256b49aa\"}],\"ramUsage\":6.1,\"server\":\"pserv-8192gb-8\",\"moduleSequenceNumber\":834}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192gb-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192gb-9\",\"httpPortOpen\":false,\"ip\":\"18.4.1.3\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-9\",\"moduleSequenceNumber\":835}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-9\",\"moduleSequenceNumber\":836}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192gb-9\",\"moduleSequenceNumber\":837}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-8192gb-9\",\"moduleSequenceNumber\":838}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f0301d0a-d3d3-4491-86cf-2871da5a7cae\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f0301d0a-d3d3-4491-86cf-2871da5a7cae\"}],\"ramUsage\":6.1,\"server\":\"pserv-8192gb-9\",\"moduleSequenceNumber\":839}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192gb-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192gb-10\",\"httpPortOpen\":false,\"ip\":\"1.1.5.0\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-10\",\"moduleSequenceNumber\":840}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-10\",\"moduleSequenceNumber\":841}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192gb-10\",\"moduleSequenceNumber\":842}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-8192gb-10\",\"moduleSequenceNumber\":843}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///a5b5844f-adfe-4ff5-a386-a7b28137907d\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///a5b5844f-adfe-4ff5-a386-a7b28137907d\"}],\"ramUsage\":6.1,\"server\":\"pserv-8192gb-10\",\"moduleSequenceNumber\":844}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192gb-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192gb-11\",\"httpPortOpen\":false,\"ip\":\"13.2.1.3\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-11\",\"moduleSequenceNumber\":845}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-11\",\"moduleSequenceNumber\":846}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192gb-11\",\"moduleSequenceNumber\":847}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-8192gb-11\",\"moduleSequenceNumber\":848}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///c7492df2-17f7-4a3c-8f8c-ff288903756f\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///c7492df2-17f7-4a3c-8f8c-ff288903756f\"}],\"ramUsage\":6.1,\"server\":\"pserv-8192gb-11\",\"moduleSequenceNumber\":849}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192gb-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192gb-12\",\"httpPortOpen\":false,\"ip\":\"79.0.3.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-12\",\"moduleSequenceNumber\":850}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-12\",\"moduleSequenceNumber\":851}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192gb-12\",\"moduleSequenceNumber\":852}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-8192gb-12\",\"moduleSequenceNumber\":853}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///31a0300e-ac74-4eb8-95f3-8c122a14e6b6\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///31a0300e-ac74-4eb8-95f3-8c122a14e6b6\"}],\"ramUsage\":6.1,\"server\":\"pserv-8192gb-12\",\"moduleSequenceNumber\":854}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192gb-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192gb-13\",\"httpPortOpen\":false,\"ip\":\"8.4.6.4\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-13\",\"moduleSequenceNumber\":855}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-13\",\"moduleSequenceNumber\":856}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192gb-13\",\"moduleSequenceNumber\":857}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-8192gb-13\",\"moduleSequenceNumber\":858}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///545d436b-4661-4c5b-9e3f-c81ac7d68ff8\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///545d436b-4661-4c5b-9e3f-c81ac7d68ff8\"}],\"ramUsage\":6.1,\"server\":\"pserv-8192gb-13\",\"moduleSequenceNumber\":859}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192gb-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192gb-14\",\"httpPortOpen\":false,\"ip\":\"44.2.1.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-14\",\"moduleSequenceNumber\":860}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-14\",\"moduleSequenceNumber\":861}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192gb-14\",\"moduleSequenceNumber\":862}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-8192gb-14\",\"moduleSequenceNumber\":863}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///d3874988-6220-48e1-a1bd-f8fb6eb0c751\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///d3874988-6220-48e1-a1bd-f8fb6eb0c751\"}],\"ramUsage\":6.1,\"server\":\"pserv-8192gb-14\",\"moduleSequenceNumber\":864}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192gb-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192gb-15\",\"httpPortOpen\":false,\"ip\":\"93.7.2.7\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-15\",\"moduleSequenceNumber\":865}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-15\",\"moduleSequenceNumber\":866}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192gb-15\",\"moduleSequenceNumber\":867}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-8192gb-15\",\"moduleSequenceNumber\":868}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///0efdd891-bc39-4071-b589-e2b2379c64f0\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///0efdd891-bc39-4071-b589-e2b2379c64f0\"}],\"ramUsage\":6.1,\"server\":\"pserv-8192gb-15\",\"moduleSequenceNumber\":869}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192gb-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192gb-16\",\"httpPortOpen\":false,\"ip\":\"85.8.4.8\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-16\",\"moduleSequenceNumber\":870}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-16\",\"moduleSequenceNumber\":871}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192gb-16\",\"moduleSequenceNumber\":872}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-8192gb-16\",\"moduleSequenceNumber\":873}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///bc4fa5c3-bc03-498a-8228-1e3086e51807\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///bc4fa5c3-bc03-498a-8228-1e3086e51807\"}],\"ramUsage\":6.1,\"server\":\"pserv-8192gb-16\",\"moduleSequenceNumber\":874}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192gb-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192gb-17\",\"httpPortOpen\":false,\"ip\":\"45.8.7.6\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-17\",\"moduleSequenceNumber\":875}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-17\",\"moduleSequenceNumber\":876}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192gb-17\",\"moduleSequenceNumber\":877}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-8192gb-17\",\"moduleSequenceNumber\":878}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///b1a12fad-4847-4836-bbc2-182ce8a24051\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///b1a12fad-4847-4836-bbc2-182ce8a24051\"}],\"ramUsage\":6.1,\"server\":\"pserv-8192gb-17\",\"moduleSequenceNumber\":879}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192gb-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192gb-18\",\"httpPortOpen\":false,\"ip\":\"77.4.9.8\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-18\",\"moduleSequenceNumber\":880}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-18\",\"moduleSequenceNumber\":881}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192gb-18\",\"moduleSequenceNumber\":882}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-8192gb-18\",\"moduleSequenceNumber\":883}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///b847a4c5-4fa8-4017-a0fb-de9b9b69b649\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///b847a4c5-4fa8-4017-a0fb-de9b9b69b649\"}],\"ramUsage\":6.1,\"server\":\"pserv-8192gb-18\",\"moduleSequenceNumber\":884}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192gb-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192gb-19\",\"httpPortOpen\":false,\"ip\":\"1.2.1.4\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-19\",\"moduleSequenceNumber\":885}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-19\",\"moduleSequenceNumber\":886}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192gb-19\",\"moduleSequenceNumber\":887}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-8192gb-19\",\"moduleSequenceNumber\":888}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///02b67601-e546-4a2b-9c1a-cca8ff823480\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///02b67601-e546-4a2b-9c1a-cca8ff823480\"}],\"ramUsage\":6.1,\"server\":\"pserv-8192gb-19\",\"moduleSequenceNumber\":889}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192gb-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192gb-20\",\"httpPortOpen\":false,\"ip\":\"41.4.1.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-20\",\"moduleSequenceNumber\":890}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-20\",\"moduleSequenceNumber\":891}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192gb-20\",\"moduleSequenceNumber\":892}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-8192gb-20\",\"moduleSequenceNumber\":893}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///8759a660-8549-4aea-8b24-66cf3f5ca151\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///8759a660-8549-4aea-8b24-66cf3f5ca151\"}],\"ramUsage\":6.1,\"server\":\"pserv-8192gb-20\",\"moduleSequenceNumber\":894}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192gb-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192gb-21\",\"httpPortOpen\":false,\"ip\":\"86.9.5.9\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-21\",\"moduleSequenceNumber\":895}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-21\",\"moduleSequenceNumber\":896}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192gb-21\",\"moduleSequenceNumber\":897}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-8192gb-21\",\"moduleSequenceNumber\":898}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///dc635517-6937-4a5b-934e-9f309d0bd2cb\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///dc635517-6937-4a5b-934e-9f309d0bd2cb\"}],\"ramUsage\":6.1,\"server\":\"pserv-8192gb-21\",\"moduleSequenceNumber\":899}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192gb-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192gb-22\",\"httpPortOpen\":false,\"ip\":\"39.9.7.9\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-22\",\"moduleSequenceNumber\":900}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-22\",\"moduleSequenceNumber\":901}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192gb-22\",\"moduleSequenceNumber\":902}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-8192gb-22\",\"moduleSequenceNumber\":903}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///2b6680af-570d-4cf6-8eed-d7c59051e0b9\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///2b6680af-570d-4cf6-8eed-d7c59051e0b9\"}],\"ramUsage\":6.1,\"server\":\"pserv-8192gb-22\",\"moduleSequenceNumber\":904}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192gb-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192gb-23\",\"httpPortOpen\":false,\"ip\":\"84.6.3.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-23\",\"moduleSequenceNumber\":905}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-23\",\"moduleSequenceNumber\":906}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192gb-23\",\"moduleSequenceNumber\":907}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-8192gb-23\",\"moduleSequenceNumber\":908}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///71f2e67b-0c39-4f54-956e-8f7cab9ec4cd\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///71f2e67b-0c39-4f54-956e-8f7cab9ec4cd\"}],\"ramUsage\":6.1,\"server\":\"pserv-8192gb-23\",\"moduleSequenceNumber\":909}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192gb-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192gb-24\",\"httpPortOpen\":false,\"ip\":\"2.3.0.2\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-24\",\"moduleSequenceNumber\":910}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192gb-24\",\"moduleSequenceNumber\":911}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192gb-24\",\"moduleSequenceNumber\":912}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-8192gb-24\",\"moduleSequenceNumber\":913}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///cd958544-ba18-43f8-ae58-f78e4ba18cb3\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///cd958544-ba18-43f8-ae58-f78e4ba18cb3\"}],\"ramUsage\":6.1,\"server\":\"pserv-8192gb-24\",\"moduleSequenceNumber\":914}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":21,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":30,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":7,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":8,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Daedalus\",\"playerReputation\":2515364.385642775}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":197.9712,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":1436657.6246556756}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":168.5437,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":1295372.7614303438}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":174.8628,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":1325446.052524845}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":26.5847,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":142875.02436025065}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":89.8264,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":913618.1893913468}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":118.478,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":6.2122,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":222308.82962738074}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":165.0792,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":1278778.8111152933}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{\"c\":\"clear\",\"ch\":\"connect home\"}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":27469.415603255395,\"lastPrice\":27544.533838837116,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.48,\"b\":false,\"otlkMag\":5.651790846397982,\"otlkMagForecast\":31.63453209761599,\"cap\":148063363,\"spreadPerc\":0.4,\"shareTxForMovement\":82148,\"shareTxUntilMovement\":25182,\"totalShares\":134200000,\"maxShares\":26800000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":33716.838906222176,\"lastPrice\":33801.357886442165,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.44,\"b\":false,\"otlkMag\":7.440709867193002,\"otlkMagForecast\":29.962706679265565,\"cap\":614214239,\"spreadPerc\":0.1,\"shareTxForMovement\":39323,\"shareTxUntilMovement\":31213,\"totalShares\":89100000,\"maxShares\":17800000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":54023.72773766142,\"lastPrice\":54242.25097089769,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":7.699919305994006,\"otlkMagForecast\":62.60720662244902,\"cap\":94264867,\"spreadPerc\":0.3,\"shareTxForMovement\":75030,\"shareTxUntilMovement\":68180,\"totalShares\":74500000,\"maxShares\":14900000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":78047.25749936394,\"lastPrice\":78336.27605382449,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":6.798608301136425,\"otlkMagForecast\":63.80785920030672,\"cap\":133646613,\"spreadPerc\":0.5,\"shareTxForMovement\":79511,\"shareTxUntilMovement\":14285,\"totalShares\":146800000,\"maxShares\":29400000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":81621.48276834321,\"lastPrice\":81946.98745127354,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":7.41706947818766,\"otlkMagForecast\":59.487356175383326,\"cap\":67459308,\"spreadPerc\":0.6,\"shareTxForMovement\":44267,\"shareTxUntilMovement\":28379,\"totalShares\":42900000,\"maxShares\":8600000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":24180.532057056484,\"lastPrice\":24040.82950455879,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.02,\"b\":true,\"otlkMag\":33.3787138873786,\"otlkMagForecast\":89.26300861899304,\"cap\":1209151897,\"spreadPerc\":0.5,\"shareTxForMovement\":76271,\"shareTxUntilMovement\":27068,\"totalShares\":27800000,\"maxShares\":5600000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":27885.6849674872,\"lastPrice\":28006.424538898165,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":false,\"otlkMag\":7.960903001116102,\"otlkMagForecast\":35.949938064445114,\"cap\":190987064,\"spreadPerc\":0.6,\"shareTxForMovement\":71490,\"shareTxUntilMovement\":70430,\"totalShares\":106400000,\"maxShares\":21300000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":24796.414770739117,\"lastPrice\":24618.293254811928,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.27,\"b\":false,\"otlkMag\":8.122281405811664,\"otlkMagForecast\":36.0100485014067,\"cap\":812766347,\"spreadPerc\":0.7,\"shareTxForMovement\":50405,\"shareTxUntilMovement\":50405,\"totalShares\":60800000,\"maxShares\":12200000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":9017.143000430111,\"lastPrice\":8976.232124065498,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":false,\"otlkMag\":5.115496117937544,\"otlkMagForecast\":46.24388274490842,\"cap\":471799004,\"spreadPerc\":0.3,\"shareTxForMovement\":43540,\"shareTxUntilMovement\":43540,\"totalShares\":56000000,\"maxShares\":11200000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":28237.422894385214,\"lastPrice\":28348.424400033015,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":7.3101941514485915,\"otlkMagForecast\":59.94919727938233,\"cap\":253790078,\"spreadPerc\":1,\"shareTxForMovement\":89606,\"shareTxUntilMovement\":67750,\"totalShares\":52300000,\"maxShares\":10500000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":9215.972226414744,\"lastPrice\":9244.849658270037,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":false,\"otlkMag\":7.18201960487292,\"otlkMagForecast\":41.1752445619204,\"cap\":145920885,\"spreadPerc\":1,\"shareTxForMovement\":46585,\"shareTxUntilMovement\":19895,\"totalShares\":66200000,\"maxShares\":13200000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":58604.18791419706,\"lastPrice\":58338.300072993705,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":false,\"otlkMag\":7.63244491762421,\"otlkMagForecast\":39.92297120994371,\"cap\":302239723,\"spreadPerc\":0.9,\"shareTxForMovement\":75897,\"shareTxUntilMovement\":75897,\"totalShares\":76400000,\"maxShares\":15300000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":32653.44519071842,\"lastPrice\":32529.278828150716,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":false,\"otlkMag\":6.268114133516096,\"otlkMagForecast\":43.260119489310384,\"cap\":330304467,\"spreadPerc\":0.3,\"shareTxForMovement\":105807,\"shareTxUntilMovement\":105807,\"totalShares\":39500000,\"maxShares\":7900000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":49053.6701168856,\"lastPrice\":49204.58080065695,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.54,\"b\":false,\"otlkMag\":7.522412149511072,\"otlkMagForecast\":42.2601092577548,\"cap\":234319878,\"spreadPerc\":0.7,\"shareTxForMovement\":82035,\"shareTxUntilMovement\":66660,\"totalShares\":54000000,\"maxShares\":10800000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":12885.590450179949,\"lastPrice\":12929.636837670781,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":5.665658399679412,\"otlkMagForecast\":57.501964772633954,\"cap\":74622151,\"spreadPerc\":0.9,\"shareTxForMovement\":63733,\"shareTxUntilMovement\":63733,\"totalShares\":76500000,\"maxShares\":15300000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":11404.317676920024,\"lastPrice\":11452.396712449692,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":7.261680238652234,\"otlkMagForecast\":55.53426541136815,\"cap\":152563701,\"spreadPerc\":0.4,\"shareTxForMovement\":107044,\"shareTxUntilMovement\":107044,\"totalShares\":43000000,\"maxShares\":8600000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":14898.213937606075,\"lastPrice\":14966.115366627822,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":false,\"otlkMag\":7.2591470787776595,\"otlkMagForecast\":41.89682930237289,\"cap\":335292101,\"spreadPerc\":0.7,\"shareTxForMovement\":87260,\"shareTxUntilMovement\":27430,\"totalShares\":41500000,\"maxShares\":8300000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":17030.60915883839,\"lastPrice\":16973.556016326605,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":true,\"otlkMag\":7.057014841040649,\"otlkMagForecast\":61.68232508030885,\"cap\":186820055,\"spreadPerc\":0.7,\"shareTxForMovement\":95869,\"shareTxUntilMovement\":22301,\"totalShares\":45300000,\"maxShares\":9100000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":14197.734194115876,\"lastPrice\":14138.93191162979,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":false,\"otlkMag\":7.2599157306808495,\"otlkMagForecast\":41.65018946107443,\"cap\":594233112,\"spreadPerc\":0.4,\"shareTxForMovement\":97446,\"shareTxUntilMovement\":86708,\"totalShares\":24400000,\"maxShares\":4900000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":340.43442283113825,\"lastPrice\":345.2443651554488,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.48,\"b\":true,\"otlkMag\":6.681289088830811,\"otlkMagForecast\":53.29475826391984,\"cap\":24517751,\"spreadPerc\":1.2,\"shareTxForMovement\":48920,\"shareTxUntilMovement\":41930,\"totalShares\":81700000,\"maxShares\":16300000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":1435.0920896204684,\"lastPrice\":1424.622151279369,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.29,\"b\":true,\"otlkMag\":5.309207947906495,\"otlkMagForecast\":57.164120160439936,\"cap\":9599911,\"spreadPerc\":1,\"shareTxForMovement\":50225,\"shareTxUntilMovement\":50225,\"totalShares\":49100000,\"maxShares\":9800000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":2567.9864952071375,\"lastPrice\":2577.203461640322,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":false,\"otlkMag\":6.29827859726416,\"otlkMagForecast\":44.39806002355879,\"cap\":55208751,\"spreadPerc\":0.5,\"shareTxForMovement\":122198,\"shareTxUntilMovement\":122198,\"totalShares\":25900000,\"maxShares\":5200000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":76083.14323780664,\"lastPrice\":76937.0479171477,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.97,\"b\":false,\"otlkMag\":8.854121533949494,\"otlkMagForecast\":43.33562906074374,\"cap\":11691268,\"spreadPerc\":0.7,\"shareTxForMovement\":77914,\"shareTxUntilMovement\":24704,\"totalShares\":38800000,\"maxShares\":7800000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":517.4195912588984,\"lastPrice\":521.959198815893,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.54,\"b\":false,\"otlkMag\":10.033928494177287,\"otlkMagForecast\":36.62420968111283,\"cap\":8333517,\"spreadPerc\":0.6,\"shareTxForMovement\":65353,\"shareTxUntilMovement\":15989,\"totalShares\":52200000,\"maxShares\":10400000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":3650.2240039974,\"lastPrice\":3669.356078569074,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.92,\"b\":false,\"otlkMag\":5.2212220798561555,\"otlkMagForecast\":45.220574279767305,\"cap\":26982044,\"spreadPerc\":1.2,\"shareTxForMovement\":117518,\"shareTxUntilMovement\":117518,\"totalShares\":57700000,\"maxShares\":11500000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":53504241.47535667,\"lastPrice\":52534525.511476755,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.24,\"b\":true,\"otlkMag\":13.813270930276866,\"otlkMagForecast\":80.11545777023599,\"cap\":96704382,\"spreadPerc\":2,\"shareTxForMovement\":28360,\"shareTxUntilMovement\":28360,\"totalShares\":14200000,\"maxShares\":2800000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":1155.695525173156,\"lastPrice\":1162.6746990427603,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.06,\"b\":false,\"otlkMag\":6.360620362864695,\"otlkMagForecast\":44.10383125061552,\"cap\":34829983,\"spreadPerc\":0.8,\"shareTxForMovement\":53334,\"shareTxUntilMovement\":35716,\"totalShares\":38500000,\"maxShares\":7700000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":1137.3747501965977,\"lastPrice\":1142.0401707681865,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":6.072462489144125,\"otlkMagForecast\":58.24292202515913,\"cap\":20112322,\"spreadPerc\":0.8,\"shareTxForMovement\":141771,\"shareTxUntilMovement\":141771,\"totalShares\":32900000,\"maxShares\":6600000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":2339.929233817111,\"lastPrice\":2314.3501190042025,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.94,\"b\":false,\"otlkMag\":7.569027000824302,\"otlkMagForecast\":41.326679354977976,\"cap\":24655580,\"spreadPerc\":0.8,\"shareTxForMovement\":50857,\"shareTxUntilMovement\":50857,\"totalShares\":14200000,\"maxShares\":2800000}},\"Joes Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joes Guns\",\"symbol\":\"JGN\",\"price\":2.4101496117772183,\"lastPrice\":2.441318734624968,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.27,\"b\":false,\"otlkMag\":5.057831210165117,\"otlkMagForecast\":46.518032502903246,\"cap\":9426572,\"spreadPerc\":0.9,\"shareTxForMovement\":28722,\"shareTxUntilMovement\":28722,\"totalShares\":80300000,\"maxShares\":16100000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":2503.425849562006,\"lastPrice\":2485.7240407217,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.25,\"b\":false,\"otlkMag\":5.51105566718729,\"otlkMagForecast\":39.18723719688511,\"cap\":973793,\"spreadPerc\":1.4,\"shareTxForMovement\":39590,\"shareTxUntilMovement\":26320,\"totalShares\":128200000,\"maxShares\":25600000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":28951.167080858337,\"lastPrice\":28827.989875905518,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":6.425853505970974,\"otlkMagForecast\":56.685463210648,\"cap\":363830739,\"spreadPerc\":1,\"shareTxForMovement\":162239,\"shareTxUntilMovement\":162239,\"totalShares\":16100000,\"maxShares\":3200000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":40356.205083201705,\"lastPrice\":40503.34991581158,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":11.374351502211912,\"otlkMagForecast\":64.13701936616961,\"cap\":40792202,\"spreadPerc\":0.7,\"shareTxForMovement\":160176,\"shareTxUntilMovement\":17090,\"totalShares\":20300000,\"maxShares\":4100000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":292895,\"lastUpdate\":1640627261608,\"ticksUntilCycle\":51}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":200,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"}}","VersionSave":"7","AllGangsSave":"","LastExportBonus":"1640469939912","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}
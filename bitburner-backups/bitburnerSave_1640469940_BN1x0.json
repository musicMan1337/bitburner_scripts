{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":1226,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":2,\"agility\":1,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1.6669721635961205,\"hacking_speed_mult\":1.6586468114308597,\"hacking_money_mult\":2.785443216364959,\"hacking_grow_mult\":1.6681298457090423,\"hacking_exp\":1806049639.9674704,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":2.5442304307021844,\"strength_mult\":1.5346794580523189,\"defense_mult\":1.334503876567234,\"dexterity_mult\":2.1270657288605137,\"agility_mult\":1.4012290703955954,\"charisma_mult\":1.6014046518806806,\"hacking_exp_mult\":3.3589381201823407,\"strength_exp_mult\":1.6881474038575508,\"defense_exp_mult\":1.6881474038575508,\"dexterity_exp_mult\":1.6881474038575508,\"agility_exp_mult\":1.6881474038575508,\"charisma_exp_mult\":1.6881474038575508,\"company_rep_mult\":1.334503876567234,\"faction_rep_mult\":1.334503876567234,\"money\":9988365723191.613,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-524288gb-0\",\"pserv-524288gb-1\",\"pserv-524288gb-2\",\"pserv-524288gb-3\",\"pserv-524288gb-4\",\"pserv-524288gb-5\",\"pserv-524288gb-6\",\"pserv-524288gb-7\",\"pserv-524288gb-8\",\"pserv-524288gb-9\",\"pserv-524288gb-10\",\"pserv-524288gb-11\",\"pserv-524288gb-12\",\"pserv-524288gb-13\",\"pserv-524288gb-14\",\"pserv-524288gb-15\",\"pserv-524288gb-16\",\"pserv-524288gb-17\",\"pserv-524288gb-18\",\"pserv-524288gb-19\",\"pserv-524288gb-20\",\"pserv-524288gb-21\",\"pserv-524288gb-22\",\"pserv-524288gb-23\",\"pserv-524288gb-24\"],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"NiteSec\",\"CyberSec\",\"The Black Hand\",\"BitRunners\"],\"factionInvitations\":[\"Sector-12\"],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":30,\"name\":\"NeuroFlux Governor\"},{\"level\":31,\"name\":\"NeuroFlux Governor\"},{\"level\":32,\"name\":\"NeuroFlux Governor\"},{\"level\":33,\"name\":\"NeuroFlux Governor\"},{\"level\":34,\"name\":\"NeuroFlux Governor\"},{\"level\":35,\"name\":\"NeuroFlux Governor\"},{\"level\":36,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":29,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.334503876567234,\"crime_success_mult\":1.334503876567234,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":50,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.334503876567234,\"hacknet_node_money_mult\":3.3657438864409923,\"hacknet_node_purchase_cost_mult\":0.5715866521636711,\"hacknet_node_ram_cost_mult\":0.7471720943315961,\"hacknet_node_core_cost_mult\":0.7471720943315961,\"hacknet_node_level_cost_mult\":0.6350962801818567,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1640469939767,\"totalPlaytime\":934033600,\"playtimeSinceLastAug\":266489600,\"playtimeSinceLastBitnode\":934033600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":4219380761965.0713,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":8917396809978.254,\"total\":9988364723191.613,\"work\":0,\"servers\":-2922715795384.0625,\"other\":-5313700000,\"augmentations\":-220383353367.6513}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-9911000,\"class\":-73920,\"codingcontract\":0,\"corporation\":0,\"crime\":1248360,\"gang\":0,\"hacking\":6293687266886.905,\"hacknet\":98442486628.35947,\"hacknet_expenses\":-27569807757.747864,\"hospitalization\":-1879790.2560754083,\"infiltration\":0,\"sleeves\":0,\"stock\":11140432395010.734,\"total\":11254190136206.914,\"work\":27814789.50816293,\"servers\":-4120030106060.1143,\"other\":-11007600000,\"augmentations\":-2119781696938.2405}},\"scriptProdSinceLastAug\":13133669961384.246,\"exploits\":[],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":4,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"95.5.4.6\",\"isConnectedTo\":true,\"maxRam\":65536,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"ServerProfiler.exe\",\"DeepscanV1.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\",\"SQLInject.exe\",\"Formulas.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\ttarget = target || 'foodnstuff';\\n\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.45;\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(target);\\n\\t}\\n\\t\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(target);\\n\\t}\\n\\n\\tns.nuke(target);\\n\\n\\tlet moneyThreshOverride = 0;\\n\\tlet securityThreshOverride = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (!securityThreshOverride && ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tsecurityThreshOverride = 4;\\n\\t\\t} else if (!moneyThreshOverride && ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tlet percentGrowth = await ns.grow(target);\\n\\t\\t\\tif (percentGrowth < 1) {\\n\\t\\t\\t\\tmoneyThreshOverride = 10;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tmoneyThreshOverride = 4;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t\\tif (securityThreshOverride) {\\n\\t\\t\\tsecurityThreshOverride--\\n\\t\\t}\\n\\n\\t\\tif (moneyThreshOverride) {\\n\\t\\t\\tmoneyThreshOverride--\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///a7cf0364-c8b1-4d05-a53e-1ee1dd627301\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basic_hack.js\",\"url\":\"blob:file:///a7cf0364-c8b1-4d05-a53e-1ee1dd627301\"}],\"ramUsage\":2.65,\"server\":\"home\",\"moduleSequenceNumber\":328}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let pserv = false;\\n    let targetLimit = 0;\\n    if (ns.args.length) {\\n        [pserv, targetLimit] = ns.args;\\n    }\\n\\n    let purchased = ns.getPurchasedServers();\\n\\n    function __readNodes__(fPath) {\\n        let nodes = ns.read(fPath);\\n        nodes = nodes.split(',');\\n        return nodes;\\n    }\\n\\n    async function __scanAndWriteAllNodes__() {\\n        let nodes = [];\\n        let newNodes = ['home'];\\n        let newNodes2 = [];\\n        let repeat = true;\\n\\n        while (repeat) {\\n            newNodes2 = [];\\n            repeat = false;\\n\\n            let i, j;\\n            for (i = 0; i < newNodes.length; i++) {\\n                let connected = ns.scan(newNodes[i]);\\n\\n                for (j = 0; j < connected.length; j++) {\\n                    let node = connected[j];\\n                    if (!nodes.includes(node) && !newNodes.includes(node) && !newNodes2.includes(node)) {\\n                        newNodes2.push(node);\\n                        repeat = true;\\n                    }\\n                }\\n            }\\n\\n            nodes = nodes.concat(newNodes);\\n            newNodes = newNodes2;\\n        }\\n\\n        nodes = nodes.concat(purchased);\\n        await ns.write('nodes.txt', nodes, 'w');\\n    }\\n\\n    function __nukeAvailableNodes__() {\\n        let nodes = __readNodes__('nodes.txt');\\n        let myHackLevel = ns.getHackingLevel();\\n\\n        let Programs = [\\n            ns.fileExists('BruteSSH.exe'),\\n            ns.fileExists('FTPCrack.exe'),\\n            ns.fileExists('relaySMTP.exe'),\\n            ns.fileExists('HTTPWorm.exe'),\\n            ns.fileExists('SQLInject.exe')\\n        ];\\n\\n        let availPrograms = Programs.reduce((num, bool) => num + bool, 0);\\n\\n        nodes.forEach((node) => {\\n            if (\\n                !ns.hasRootAccess(node) &&\\n                ns.getServerNumPortsRequired(node) <= availPrograms &&\\n                ns.getServerRequiredHackingLevel(node) <= myHackLevel\\n            ) {\\n                Programs.forEach((exists, i) => {\\n                    if (exists) {\\n                        switch (i) {\\n                            case 0:\\n                                ns.brutessh(node);\\n                                break;\\n                            case 1:\\n                                ns.ftpcrack(node);\\n                                break;\\n                            case 2:\\n                                ns.relaysmtp(node);\\n                                break;\\n                            case 3:\\n                                ns.httpworm(node);\\n                                break;\\n                            case 4:\\n                                ns.sqlinject(node);\\n                                break;\\n                        }\\n                    }\\n                });\\n                ns.nuke(node);\\n            }\\n        });\\n    }\\n\\n    async function __scanAndWriteRootedNodes__() {\\n        let nodes = __readNodes__('nodes.txt');\\n        let rooted = nodes.reduce((arr, node) => {\\n            //don't hack ourselves\\n            if (ns.hasRootAccess(node) && node !== 'home' && !purchased.includes(node)) {\\n                let maxMoney = ns.getServerMaxMoney(node);\\n\\n                arr.push(`${maxMoney} ${node}`);\\n            }\\n            return arr;\\n        }, []);\\n\\n        //lowest max money at the front, filter invalid servers, remove money from name\\n        rooted.sort((a, b) => +b.split(' ')[0] - +a.split(' ')[0]);\\n        rooted = rooted.filter((node) => +node.split(' ')[0] > 0);\\n        await ns.write('money_rooted.txt', rooted, 'w');\\n\\n        rooted = rooted.map((node) => node.split(' ')[1]);\\n\\n        if (targetLimit && targetLimit != 'All') {\\n            rooted = rooted.slice(rooted.length - targetLimit);\\n        }\\n\\n        ns.tprint(`hackable nodes: ${rooted.length}`);\\n        await ns.write('rooted.txt', rooted, 'w');\\n    }\\n\\n    //read the nodes\\n    await __scanAndWriteAllNodes__();\\n    __nukeAvailableNodes__();\\n    await __scanAndWriteRootedNodes__();\\n\\n    //load nodes\\n    let attackNodes = [];\\n    if (pserv) {\\n        attackNodes = purchased;\\n    } else {\\n        attackNodes = __readNodes__('rooted.txt');\\n        if (purchased.length) {\\n            attackNodes = attackNodes.concat(purchased);\\n        }\\n    }\\n    attackNodes.unshift('home');\\n\\n    // spin up attack servers\\n    attackNodes.forEach((attacker) => {\\n        ns.exec('main_hack.js', 'home', 1, attacker, pserv || false, targetLimit || '');\\n    });\\n}\",\"filename\":\"setup_hacks.js\",\"url\":\"blob:file:///433ccef3-1cef-49f2-9f74-8064ddaaf96a\",\"module\":{},\"dependencies\":[{\"filename\":\"setup_hacks.js\",\"url\":\"blob:file:///433ccef3-1cef-49f2-9f74-8064ddaaf96a\"}],\"ramUsage\":6.15,\"server\":\"home\",\"moduleSequenceNumber\":657}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet server = ns.args[0];\\n\\n\\tlet maxRam = ns.getServerMaxRam('home');\\n\\tlet usedRam = ns.getServerUsedRam('home');\\n\\tlet scriptRam = ns.getScriptRam('basic_hack.js');\\n\\tlet threads = Math.floor((maxRam - usedRam) / scriptRam);\\n\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t}\\n\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t}\\n\\n\\tns.nuke(server);\\n\\tns.run('basic_hack.js', threads, server);\\n}\",\"filename\":\"home_hack.js\",\"url\":\"blob:file:///e4d5c7e1-2a3e-4351-a242-0862f6f2a700\",\"module\":\"\",\"dependencies\":[{\"filename\":\"home_hack.js\",\"url\":\"blob:file:///e4d5c7e1-2a3e-4351-a242-0862f6f2a700\"}],\"ramUsage\":3.05,\"server\":\"home\",\"moduleSequenceNumber\":330}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":331}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":332}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":333}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    let [ATTACK_SERVER, pserv, limit] = ns.args;\\n\\n    ns.tprint(ATTACK_SERVER);\\n\\n    function __readNodes__(fPath) {\\n        let nodes = ns.read(fPath);\\n        nodes = nodes.split(',');\\n        return nodes;\\n    }\\n\\n    function __findAttackableNodes__() {\\n        let rooted = __readNodes__('rooted.txt');\\n        let targetNodes = [];\\n\\n        //check which are valid for attacking\\n        for (let i = 0; i < rooted.length; i++) {\\n            if (ns.getServerMaxMoney(rooted[i])) {\\n                targetNodes.push(rooted[i]);\\n            }\\n        }\\n\\n        if (pserv && limit && ATTACK_SERVER.split('-')[0] === 'pserv') {\\n            let pservNum = +ATTACK_SERVER.split('-')[2];\\n            let multiplier = Math.floor(targetNodes.length / 5);\\n\\n            if (pservNum < 5) {\\n                targetNodes = targetNodes.slice(0, multiplier);\\n            } else if (pservNum < 10) {\\n                targetNodes = targetNodes.slice(multiplier, multiplier * 2);\\n            } else if (pservNum < 15) {\\n                targetNodes = targetNodes.slice(multiplier * 2, multiplier * 3);\\n            } else if (pservNum < 20) {\\n                targetNodes = targetNodes.slice(multiplier * 3, multiplier * 4);\\n            } else {\\n                targetNodes = targetNodes.slice(multiplier * 4, -1);\\n            }\\n        }\\n\\n        return targetNodes;\\n    }\\n\\n    //prep attackServer\\n    let files = ['weaken.script', 'grow.script', 'hack.script', 'daemon.js', 'daemon_fml.js'];\\n    await ns.scp(files, 'home', ATTACK_SERVER);\\n\\n    //load nodes\\n    let targetNodes = __findAttackableNodes__();\\n\\n    //calc ram and threads per daemon\\n    let serverRam = ns.getServerMaxRam(ATTACK_SERVER);\\n    let daemonRam = ns.getScriptRam('daemon.js');\\n    let minRamPerDaemon =\\n        ns.getScriptRam('weaken.script') + ns.getScriptRam('grow.script') + ns.getScriptRam('hack.script');\\n\\n    let leftoverRam = serverRam - daemonRam * targetNodes.length;\\n    let ramPerDaemon = leftoverRam / targetNodes.length;\\n\\n    while (ramPerDaemon < minRamPerDaemon) {\\n        targetNodes.pop();\\n        if (!targetNodes.length) {\\n            ns.tprint(`'${ATTACK_SERVER}' - insufficient RAM: exiting`);\\n            return;\\n        }\\n\\n        if (targetNodes.length === 2) {\\n            targetNodes = ['joesguns'];\\n        }\\n\\n        leftoverRam = serverRam - daemonRam * targetNodes.length;\\n        ramPerDaemon = leftoverRam / targetNodes.length;\\n    }\\n\\n    ns.scriptKill('daemon.js', ATTACK_SERVER);\\n    ns.scriptKill('daemon_fml.js', ATTACK_SERVER);\\n\\n    //start daemons\\n    let daemonCount = 0;\\n    let daemonFile = ns.fileExists('Formulas.exe') ? 'daemon_fml.js' : 'daemon.js';\\n    targetNodes.forEach((target) => {\\n        let success = ns.exec(\\n            daemonFile,\\n            ATTACK_SERVER,\\n            1,\\n            target,\\n            ATTACK_SERVER,\\n            Math.floor(ramPerDaemon),\\n            limit || false\\n        );\\n        daemonCount += success ? 1 : 0;\\n    });\\n\\n    ns.tprint(`attack server: ${ATTACK_SERVER}`);\\n    ns.tprint(`ram/daemon: ${Math.floor(ramPerDaemon)}`);\\n    ns.tprint(`daemon count: ${daemonCount}`);\\n}\",\"filename\":\"main_hack.js\",\"url\":\"blob:file:///fcc1bb24-3118-4d73-bf10-a8a35c96b5d8\",\"module\":{},\"dependencies\":[{\"filename\":\"main_hack.js\",\"url\":\"blob:file:///fcc1bb24-3118-4d73-bf10-a8a35c96b5d8\"}],\"ramUsage\":4.85,\"server\":\"home\",\"moduleSequenceNumber\":683}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///2dd5bd8b-9217-489b-9de5-ea90e989cb60\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///2dd5bd8b-9217-489b-9de5-ea90e989cb60\"}],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":335}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    let size = 64;\\n    let silent = false;\\n    if (ns.args.length > 0) {\\n        [size, silent] = ns.args;\\n    }\\n\\n    if (isNaN(size)) {\\n        size = 64;\\n        silent = true;\\n    }\\n\\n    let files = ['weaken.script', 'grow.script', 'hack.script', 'daemon.js'];\\n    let price = 55000 * size;\\n    let i = ns.getPurchasedServers().length;\\n    while (i < 25) {\\n        let newHostname = 'pserv-' + size + 'gb-' + i;\\n\\n        ns.print('attempt purchase: ' + newHostname);\\n\\n        if (ns.getServerMoneyAvailable('home') > price) {\\n            ns.purchaseServer(newHostname, size);\\n            ns.print('purchased ' + newHostname);\\n            ns.tprint('purchased ' + newHostname);\\n\\n            if (!silent) {\\n                //start scripts on new server\\n                await ns.scp(files, 'home', newHostname);\\n                ns.exec('main_hack.js', 'home', 1, newHostname);\\n            }\\n\\n            ++i;\\n        }\\n\\n        if (ns.getServerMoneyAvailable('home') < price) {\\n            await ns.sleep(10000);\\n        }\\n    }\\n\\n    //upgrade existing servers\\n    let servers = ns.getPurchasedServers();\\n\\n    i = 0;\\n    while (i < 25) {\\n        ns.print('================================================================================');\\n        let server = servers[i];\\n        let serverNumber = server.match(/(\\\\d+)$/)[0] * 1;\\n        let size = ns.getServerMaxRam(server);\\n\\n        let newSize = 0;\\n        if (ns.args.length > 0) {\\n            newSize = ns.args[0];\\n        }\\n\\n        if (isNaN(newSize)) {\\n            newSize = 0;\\n        }\\n\\n        if (!newSize) {\\n            newSize = 2 * size;\\n        }\\n\\n        ns.print(`looking at server: ${server} - current size: ${size} -> ${newSize}`);\\n\\n        let price = 55000 * newSize;\\n        if (size < newSize) {\\n            let newHostname = 'pserv-' + newSize + 'gb-' + serverNumber;\\n\\n            ns.print(`attempt upgrade: ${server} -> ${newHostname} for ${price}`);\\n\\n            if (ns.getServerMoneyAvailable('home') > price) {\\n                if (ns.getServerUsedRam(server) > 0) {\\n                    ns.killall(server);\\n\\n                    while (ns.getServerUsedRam(server) > 0) {\\n                        ns.print('waiting for scripts to be killed');\\n                    }\\n                }\\n\\n                ns.deleteServer(server);\\n                ns.purchaseServer(newHostname, newSize);\\n\\n                ns.print('purchased ' + newHostname);\\n                ns.tprint('purchased ' + newHostname);\\n\\n                if (!silent) {\\n                    //start scripts on new server\\n                    await ns.scp(files, 'home', newHostname);\\n                    ns.exec('main_hack.js', 'home', 1, newHostname);\\n                }\\n\\n                ++i;\\n            }\\n        }\\n\\n        if (size >= newSize) {\\n            i++;\\n        }\\n\\n        if (serverNumber == 24) {\\n            i = 26;\\n        }\\n\\n        if (ns.getServerMoneyAvailable('home') < price) {\\n            await ns.sleep(20000);\\n        }\\n    }\\n}\",\"filename\":\"refresh_servers.js\",\"url\":\"blob:file:///e9163710-6114-4eff-94e0-656f0e076f52\",\"module\":\"\",\"dependencies\":[{\"filename\":\"refresh_servers.js\",\"url\":\"blob:file:///e9163710-6114-4eff-94e0-656f0e076f52\"}],\"ramUsage\":10.95,\"server\":\"home\",\"moduleSequenceNumber\":336}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// ns.disableLog('ALL')\\n\\t// ns.getServerMaxRam('home')\\n\\t// ns.enableLog('exec')\\n\\t// ns.enableLog('weaken')\\n\\t// ns.enableLog('grow')\\n\\t// ns.enableLog('hack')\\n\\t// ns.enableLog('getServerUsedRam')\\n\\t// ns.enableLog('getServerSecurityLevel')\\n\\t// ns.enableLog('getServerMoneyAvailable')\\n\\t// ns.enableLog('hackAnalyze')\\n\\t// ns.enableLog('growthAnalyze')\\n\\t// ns.getServerMaxRam('home')\\n\\n\\tns.tprint(ns.getServerMoneyAvailable('home'))\\n\\n\\t// while (true) {\\n\\t// \\tawait ns.sleep(100000)\\n\\t// }\\n}\",\"filename\":\"test.js\",\"url\":\"blob:file:///b9c939b9-b0f2-4e56-9daa-78354949a51e\",\"module\":\"\",\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///b9c939b9-b0f2-4e56-9daa-78354949a51e\"}],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":337}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getServerMoneyAvailable');\\n\\n    // We will not buy anything if there's less money than this ammount\\n    let reserveMoney = 1000;\\n    let hacknet = ns.hacknet;\\n\\n    // Buy first HacknetNode if there are none\\n    if (hacknet.numNodes() === 0 && ns.getServerMoneyAvailable('home') >= reserveMoney) {\\n        hacknet.purchaseNode();\\n        ns.print('Purchased ' + hacknet.getNodeStats(hacknet.numNodes() - 1).name + ' because there was none.');\\n    }\\n\\n    // If there are no Hacknet Nodes, we can't do anything, so the script ends\\n    let numUpgrades = 1;\\n    while (hacknet.numNodes() > 0) {\\n        // If there is not enough money, we wait for it instead of ending\\n        // the loop.\\n        while (ns.getServerMoneyAvailable('home') >= reserveMoney) {\\n            for (let i = 0; i < hacknet.numNodes(); i++) {\\n                while (\\n                    hacknet.getLevelUpgradeCost(i, numUpgrades) < ns.getServerMoneyAvailable('home') * 0.1 &&\\n                    hacknet.upgradeLevel(i, numUpgrades)\\n                ) {\\n                    ns.print('Upgraded ' + hacknet.getNodeStats(i).name + ' to level ' + hacknet.getNodeStats(i).level);\\n                }\\n\\n                while (\\n                    hacknet.getRamUpgradeCost(i, numUpgrades) < ns.getServerMoneyAvailable('home') * 0.1 &&\\n                    hacknet.upgradeRam(i, numUpgrades)\\n                ) {\\n                    ns.print('Upgraded ' + hacknet.getNodeStats(i).name + ' RAM to ' + hacknet.getNodeStats(i).ram);\\n                }\\n\\n                while (\\n                    hacknet.getCoreUpgradeCost(i, numUpgrades) < ns.getServerMoneyAvailable('home') * 0.1 &&\\n                    hacknet.upgradeCore(i, numUpgrades)\\n                ) {\\n                    ns.print('Upgraded ' + hacknet.getNodeStats(i).name + ' core to ' + hacknet.getNodeStats(i).core);\\n                }\\n            }\\n\\n            // Buy next Hacknet Node if the last one is already fully\\n            // upgraded. If for some reason the last Hacknet Node is fully\\n            // upgraded and the others don't, the loop above will still\\n            // attempt to upgrade them all.\\n            if (\\n                hacknet.getLevelUpgradeCost(hacknet.numNodes() - 1, numUpgrades) === Infinity &&\\n                hacknet.getRamUpgradeCost(hacknet.numNodes() - 1, numUpgrades) === Infinity &&\\n                hacknet.getCoreUpgradeCost(hacknet.numNodes() - 1, numUpgrades) === Infinity &&\\n                hacknet.getPurchaseNodeCost() < ns.getServerMoneyAvailable('home') * 0.1\\n            ) {\\n                hacknet.purchaseNode();\\n                ns.print(\\n                    `Purchased ${hacknet.getNodeStats(hacknet.numNodes() - 1).name\\n                    } because the last one couldn't be upgraded further.`\\n                );\\n            } else if (\\n                // Or buy the next Hacknet Node if the next upgrade is more\\n                // expensive than buying a new Hacknet Node.\\n                hacknet.getLevelUpgradeCost(hacknet.numNodes() - 1, numUpgrades) > hacknet.getPurchaseNodeCost() &&\\n                hacknet.getRamUpgradeCost(hacknet.numNodes() - 1, numUpgrades) > hacknet.getPurchaseNodeCost() &&\\n                hacknet.getCoreUpgradeCost(hacknet.numNodes() - 1, numUpgrades) > hacknet.getPurchaseNodeCost() &&\\n                hacknet.getPurchaseNodeCost() < ns.getServerMoneyAvailable('home') * 0.1\\n            ) {\\n                hacknet.purchaseNode();\\n                ns.print(\\n                    `Purchased ${hacknet.getNodeStats(hacknet.numNodes() - 1).name\\n                    } because it was cheaper than next upgrade.`\\n                );\\n            }\\n\\n            await ns.sleep(1000);\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"hacknet.js\",\"url\":\"blob:file:///db4a34e6-efe4-4edb-b714-0224309f686d\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacknet.js\",\"url\":\"blob:file:///db4a34e6-efe4-4edb-b714-0224309f686d\"}],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":338}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {{\\n *  sym: string;\\n *  shares: number;\\n *  price: number;\\n *  forecast: number;\\n * }[]} Stocks\\n *\\n * @typedef {{\\n *  [sym: string]: {\\n *      profit: string;\\n *      raw: number;\\n *  }\\n * }} Tracker\\n */\\n\\n/** @type {Stocks} */\\nlet stocks = [];\\n/** @type {Stocks} */\\nlet myStocks = [];\\nlet corpus = 0;\\n\\n/** @type {Tracker} */\\nlet profitTracker = {};\\n\\nlet COMMISSION = 100000; //Buy or sell commission\\nlet numCycles = 2; //Each cycle is ~ 5 seconds\\nlet fracL = 0.2; //Fraction of assets to keep as cash in hand\\nlet fracH = 0.2;\\n\\n/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    ns.tail();\\n\\n    let TIX = ns.stock;\\n    let syms = TIX.getSymbols();\\n    syms.forEach((sym) => (profitTracker[sym] = { profit: '$0.00', raw: 0 }));\\n\\n    function __refresh__() {\\n        let newCorpus = ns.getServerMoneyAvailable('home');\\n\\n        stocks = [];\\n        myStocks = [];\\n        syms.forEach((sym) => {\\n            let [shares] = TIX.getPosition(sym);\\n            let price = TIX.getPrice(sym);\\n            let forecast = TIX.getForecast(sym);\\n            newCorpus += price * shares;\\n\\n            if (shares) {\\n                myStocks.push({ sym, shares, price, forecast });\\n            } else {\\n                stocks.push({ sym, shares, price, forecast });\\n            }\\n        });\\n\\n        stocks.sort((a, b) => b.forecast - a.forecast);\\n        corpus = newCorpus;\\n    }\\n\\n    function __format__(profit) {\\n        return ns.nFormat(profit, '($0.00a)');\\n    }\\n\\n    function __buy__(stock, numShares) {\\n        //buy\\n        let pricePer = TIX.buy(stock.sym, numShares);\\n        let price = __format__(pricePer * numShares + COMMISSION);\\n\\n        //track\\n        profitTracker[stock.sym].raw = profitTracker[stock.sym].raw - pricePer * numShares;\\n        profitTracker[stock.sym].profit = __format__(profitTracker[stock.sym].raw);\\n\\n        //log\\n        ns.print(`Bought ${pricePer ? numShares : 0} shares of ${stock.sym} for ${price}`);\\n        ns.print(`Current profit for ${stock.sym}: ${profitTracker[stock.sym].profit}`);\\n    }\\n\\n    function __sell__(stock, numShares) {\\n        //buy\\n        let profitPer = TIX.sell(stock.sym, numShares);\\n        let profit = __format__(profitPer * numShares + COMMISSION);\\n\\n        //track\\n        profitTracker[stock.sym].raw = profitTracker[stock.sym].raw + profitPer * numShares;\\n        profitTracker[stock.sym].profit = __format__(profitTracker[stock.sym].raw);\\n\\n        //log\\n        ns.print(`Sold ${profitPer ? numShares : 0} shares of ${stock.sym} for ${profit}`);\\n        ns.print(`Current profit for ${stock.sym}: ${profitTracker[stock.sym].profit}`);\\n    }\\n\\n    while (true) {\\n        __refresh__();\\n\\n        //Sell underperforming shares\\n        myStocks.forEach((stock) => {\\n            if (stock.forecast < stocks[0].forecast) {\\n                __sell__(stock, stock.shares);\\n                corpus -= COMMISSION;\\n            }\\n        });\\n\\n        //Sell shares if not enough cash in hand\\n        myStocks.forEach((stock) => {\\n            if (ns.getServerMoneyAvailable('home') < fracL * corpus) {\\n                let cashNeeded = corpus * fracH - ns.getServerMoneyAvailable('home') + COMMISSION;\\n                let numShares = Math.floor(cashNeeded / stock.price);\\n\\n                __sell__(stock, numShares);\\n                corpus -= COMMISSION;\\n            }\\n        });\\n\\n        // Buy shares with cash remaining in hand\\n        let cashToSpend = ns.getServerMoneyAvailable('home') - fracH * corpus;\\n        let numShares = Math.floor((cashToSpend - COMMISSION) / stocks[0].price);\\n        let maxShares = TIX.getMaxShares(stocks[0].sym) - stocks[0].shares;\\n\\n        numShares = Math.min(numShares, maxShares);\\n\\n        ns.print('stocks[0].price: ' + stocks[0].price);\\n        ns.print('corpus: ' + corpus);\\n        ns.print('cashToSpend: ' + cashToSpend);\\n\\n        if (numShares * stocks[0].forecast * stocks[0].price * numCycles > COMMISSION) {\\n            __buy__(stocks[0], numShares);\\n        }\\n\\n        await ns.sleep(5 * 1000 * numCycles + 200);\\n    }\\n}\",\"filename\":\"stocks.js\",\"url\":\"blob:file:///845f2096-1668-4ebc-b1a1-b5b0e655b9cd\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stocks.js\",\"url\":\"blob:file:///845f2096-1668-4ebc-b1a1-b5b0e655b9cd\"}],\"ramUsage\":17.2,\"server\":\"home\",\"moduleSequenceNumber\":339}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\n\\t//get the TOR router\\n\\twhile (!ns.purchaseTor()) {\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n\\n\\t//buy programs in this order\\n\\tlet cheapProgramList = [\\n\\t\\t'BruteSSH.exe',\\n\\t\\t'FTPCrack.exe',\\n\\t\\t'AutoLink.exe',\\n\\t\\t'DeepscanV1.exe',\\n\\t\\t'ServerProfiler.exe',\\n\\t\\t'DeepscanV2.exe',\\n\\t];\\n\\tfor (let i = 0; i < cheapProgramList.length; i++) {\\n\\t\\tlet prg = cheapProgramList[i];\\n\\t\\twhile (!ns.purchaseProgram(prg)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\t}\\n\\n\\t//buy baseline 64g servers\\n\\twhile (ns.getServerMoneyAvailable('home') < 88000000) {\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n\\tns.run('refresh_servers.js', 1, 64);\\n\\n\\t//buy programs in this order\\n\\tlet priceyProgramList = ['DeepscanV2.exe', 'relaySMTP.exe', 'HTTPWorm.exe', 'SQLInject.exe'];\\n\\tfor (let i = 0; i < priceyProgramList.length; i++) {\\n\\t\\tlet prg = priceyProgramList[i];\\n\\t\\twhile (!ns.purchaseProgram(prg)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"buy_darkweb.js\",\"url\":\"blob:file:///2a3a7ebd-7bef-459a-9cc1-554a8d433205\",\"module\":\"\",\"dependencies\":[{\"filename\":\"buy_darkweb.js\",\"url\":\"blob:file:///2a3a7ebd-7bef-459a-9cc1-554a8d433205\"}],\"ramUsage\":6.7,\"server\":\"home\",\"moduleSequenceNumber\":340}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\tif (ns.isRunning('stocks.js', 'home')) {\\n\\t\\tns.kill('stocks.js', 'home');\\n\\t}\\n\\n\\tfunction __printProfits__(sym, shares, profit) {\\n\\t\\tlet symbols = ['', 'K', 'M', 'B', 'T', 'Qa', 'Qi', 'Sx', 'Sp', 'Oc'];\\n\\t\\tlet formatProfit;\\n\\n\\t\\tlet i;\\n\\t\\tif (profit >= 0) {\\n\\t\\t\\tfor (i = 0; profit >= 1000 && i < symbols.length; i++) {\\n\\t\\t\\t\\tprofit /= 1000;\\n\\t\\t\\t}\\n\\t\\t\\tformatProfit = `$${profit.toFixed(3)}${symbols[i]}`;\\n\\t\\t} else {\\n\\t\\t\\tfor (i = 0; profit <= -1000 && i < symbols.length; i++) {\\n\\t\\t\\t\\tprofit /= 1000;\\n\\t\\t\\t}\\n\\t\\t\\tformatProfit = `-$${profit.toFixed(3) * -1}${symbols[i]}`;\\n\\t\\t}\\n\\n\\t\\tns.tprint(`Sold ${shares} shares of ${sym} for ${formatProfit}${symbols[i]}`);\\n\\t}\\n\\n\\tlet TIX = ns.stock;\\n\\tlet syms = TIX.getSymbols();\\n\\n\\tsyms.forEach((sym) => {\\n\\t\\tlet [shares] = TIX.getPosition(sym);\\n\\t\\tlet profitPer = TIX.sell(sym, shares);\\n\\n\\t\\tif (profitPer) {\\n\\t\\t\\t__printProfits__(sym, shares, profitPer * shares);\\n\\t\\t}\\n\\t});\\n}\",\"filename\":\"sell_stocks.js\",\"url\":\"blob:file:///8a6de8fd-6505-4ee5-a879-8db23bae98ee\",\"module\":{},\"dependencies\":[{\"filename\":\"sell_stocks.js\",\"url\":\"blob:file:///8a6de8fd-6505-4ee5-a879-8db23bae98ee\"}],\"ramUsage\":8.7,\"server\":\"home\",\"moduleSequenceNumber\":655}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {{\\n *  sym: string;\\n *  shares: number;\\n *  price: number;\\n *  forecast: number;\\n * }[]} Stocks\\n *\\n * @typedef {{\\n *  [sym: string]: {\\n *      profit: string;\\n *      raw: number;\\n *  }\\n * }} Tracker\\n */\\n\\n/** @type {Stocks} */\\nlet stocks = [];\\n/** @type {Stocks} */\\nlet myStocks = [];\\nlet corpus = 0;\\n\\n/** @type {Tracker} */\\nlet profitTracker = {};\\n\\n/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n\\n    const TIX = ns.stock;\\n\\n    const KEEP = 0.2;\\n    const BUY_LIMIT = 0.58;\\n    const SELL_LIMIT = 0.5;\\n    const COMMISSION = 100000;\\n\\n    //init stocks\\n    let syms = TIX.getSymbols();\\n    syms.forEach((sym) => {\\n        stocks.push({ sym });\\n        profitTracker[sym] = { profit: '$0.00', raw: 0 };\\n    });\\n\\n    function __updateStockData__() {\\n        let corpus = ns.getServerMoneyAvailable('home');\\n        myStocks.length = 0;\\n\\n        stocks.forEach((stock) => {\\n            let sym = stock.sym;\\n            stock.price = TIX.getPrice(sym);\\n            stock.shares = TIX.getPosition(sym)[0];\\n            stock.forecast = TIX.getForecast(sym);\\n\\n            corpus += stock.price * stock.shares;\\n\\n            if (stock.shares) {\\n                myStocks.push(stock);\\n            }\\n        });\\n\\n        stocks.sort((a, b) => b.forecast - a.forecast);\\n        return corpus;\\n    }\\n\\n    function __format__(profit) {\\n        return ns.nFormat(profit, '-$0.00a');\\n    }\\n\\n    function __buy__(stock, numShares) {\\n        //buy\\n        let pricePer = TIX.buy(stock.sym, numShares);\\n        let price = __format__(pricePer * numShares + COMMISSION);\\n\\n        //track\\n        profitTracker[stock.sym].raw = profitTracker[stock.sym].raw - pricePer * numShares;\\n        profitTracker[stock.sym].profit = __format__(profitTracker[stock.sym].raw);\\n\\n        //log\\n        ns.print(`Bought ${pricePer ? numShares : 0} shares of ${stock.sym} for ${price}`);\\n        ns.print(`Current profit for ${stock.sym}: ${profitTracker[stock.sym].profit}`);\\n    }\\n\\n    function __sell__(stock, numShares) {\\n        //buy\\n        let profitPer = TIX.sell(stock.sym, numShares);\\n        let profit = __format__(profitPer * numShares + COMMISSION);\\n\\n        //track\\n        profitTracker[stock.sym].raw = profitTracker[stock.sym].raw + profitPer * numShares;\\n        profitTracker[stock.sym].profit = __format__(profitTracker[stock.sym].raw);\\n\\n        //log\\n        ns.print(`Sold ${profitPer ? numShares : 0} shares of ${stock.sym} for ${profit}`);\\n        ns.print(`Current profit for ${stock.sym}: ${profitTracker[stock.sym].profit}`);\\n    }\\n\\n    while (true) {\\n        corpus = __updateStockData__();\\n\\n        // Sell bad shares\\n        myStocks.forEach((stock) => {\\n            if (stock.forecast < SELL_LIMIT) {\\n                ns.print(`${stock.sym} no longer valuable - selling.`);\\n                __sell__(stock, stock.shares);\\n            }\\n        });\\n\\n        // Don't do this. Use getStockPurchaseCost for some proportion of corpus,\\n        // then reduce it by a certain % until it's buyable.\\n\\n        let stockIndex = -1;\\n        let cashToSpend = ns.getServerMoneyAvailable('home');\\n        while (cashToSpend > 100 * COMMISSION && cashToSpend > corpus * 0.1) {\\n            stockIndex++;\\n            corpus = __updateStockData__();\\n\\n            let stockToBuy = stocks[stockIndex];\\n            if (!stockToBuy || stockToBuy.forecast < BUY_LIMIT) {\\n                // No more (good) stocks left\\n                break;\\n            }\\n\\n            let availibleShares = TIX.getMaxShares(stockToBuy.sym) - stockToBuy.shares;\\n            if (!availibleShares) {\\n                // We bought all shares of this stock\\n                continue;\\n            }\\n\\n            while (availibleShares) {\\n                let purchaseCost = TIX.getPurchaseCost(stockToBuy.sym, availibleShares, 'Long');\\n                if (purchaseCost <= cashToSpend) {\\n                    __buy__(stockToBuy, availibleShares);\\n                    cashToSpend -= purchaseCost;\\n                    break;\\n                }\\n\\n                availibleShares = Math.floor(availibleShares * 0.9);\\n            }\\n        }\\n\\n        await ns.sleep(6 * 1000);\\n    }\\n}\",\"filename\":\"stocks_V2.js\",\"url\":\"blob:file:///76b6f08e-a293-4286-a8a2-eb989e299664\",\"module\":{},\"dependencies\":[{\"filename\":\"stocks_V2.js\",\"url\":\"blob:file:///76b6f08e-a293-4286-a8a2-eb989e299664\"}],\"ramUsage\":19.2,\"server\":\"home\",\"moduleSequenceNumber\":656}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///4275af80-95b0-4c93-b4ce-6363587134ef\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///4275af80-95b0-4c93-b4ce-6363587134ef\"}],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":723}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    let roots = ns.scan('home').filter((node) => node.split('-')[0] !== 'pserv');\\n\\n    let nodes = {\\n        home: roots.reduce((obj, node) => {\\n            let maxMoney = ns.nFormat(ns.getServerMaxMoney(node), '$0.00a');\\n            let hackingReq = ns.getServerRequiredHackingLevel(node);\\n            let childName = `${node} - ${maxMoney} - ${hackingReq}`;\\n\\n            obj[childName] = {};\\n            return obj;\\n        }, {})\\n    };\\n\\n    roots.unshift('home');\\n\\n    function traverseNodes(nodeObj, rootNode) {\\n        if (!nodeObj || !rootNode) {\\n            return nodeObj;\\n        }\\n\\n        let connectedNodes = ns.scan(rootNode).filter((node) => node.split('-')[0] !== 'pserv');\\n\\n        ns.tprint('');\\n        ns.tprint('      rootName: ', rootNode);\\n        ns.tprint('connectedNodes: ', connectedNodes);\\n        ns.tprint('         roots: ', roots);\\n        connectedNodes.forEach((childNode) => {\\n            if (!roots.includes(childNode)) {\\n                let maxMoney = ns.nFormat(ns.getServerMaxMoney(childNode), '$0.00a');\\n                let hackingReq = ns.getServerRequiredHackingLevel(childNode);\\n                let childName = `${childNode} - ${maxMoney} - ${hackingReq}`;\\n\\n                roots.push(childNode);\\n                nodeObj[childName] = {};\\n\\n                traverseNodes(nodeObj[childName], childNode);\\n            }\\n        });\\n    }\\n\\n    Object.keys(nodes.home).forEach((node) => {\\n        traverseNodes(nodes.home[node], node.split(' ')[0]);\\n    });\\n    await ns.write('servers.txt', JSON.stringify(nodes), 'w');\\n    ns.tprint(nodes);\\n}\",\"filename\":\"scan_servers.js\",\"url\":\"blob:file:///fe99bd88-2d52-4be5-be6d-c1e063860026\",\"module\":\"\",\"dependencies\":[{\"filename\":\"scan_servers.js\",\"url\":\"blob:file:///fe99bd88-2d52-4be5-be6d-c1e063860026\"}],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":344}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-524288gb-0\",\"pserv-524288gb-1\",\"pserv-524288gb-2\",\"pserv-524288gb-3\",\"pserv-524288gb-4\",\"pserv-524288gb-5\",\"pserv-524288gb-6\",\"pserv-524288gb-7\",\"pserv-524288gb-8\",\"pserv-524288gb-9\",\"pserv-524288gb-10\",\"pserv-524288gb-11\",\"pserv-524288gb-12\",\"pserv-524288gb-13\",\"pserv-524288gb-14\",\"pserv-524288gb-15\",\"pserv-524288gb-16\",\"pserv-524288gb-17\",\"pserv-524288gb-18\",\"pserv-524288gb-19\",\"pserv-524288gb-20\",\"pserv-524288gb-21\",\"pserv-524288gb-22\",\"pserv-524288gb-23\",\"pserv-524288gb-24\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"nodes.txt\",\"text\":\"home,n00dles,foodnstuff,sigma-cosmetics,joesguns,hong-fang-tea,harakiri-sushi,iron-gym,darkweb,pserv-524288gb-0,pserv-524288gb-1,pserv-524288gb-2,pserv-524288gb-3,pserv-524288gb-4,pserv-524288gb-5,pserv-524288gb-6,pserv-524288gb-7,pserv-524288gb-8,pserv-524288gb-9,pserv-524288gb-10,pserv-524288gb-11,pserv-524288gb-12,pserv-524288gb-13,pserv-524288gb-14,pserv-524288gb-15,pserv-524288gb-16,pserv-524288gb-17,pserv-524288gb-18,pserv-524288gb-19,pserv-524288gb-20,pserv-524288gb-21,pserv-524288gb-22,pserv-524288gb-23,pserv-524288gb-24,zer0,CSEC,nectar-net,max-hardware,phantasy,omega-net,silver-helix,neo-net,netlink,johnson-ortho,crush-fitness,comptek,avmnite-02h,the-hub,I.I.I.I,catalyst,summit-uni,syscore,zb-institute,rothman-uni,lexo-corp,alpha-ent,millenium-fitness,rho-construction,aevum-police,aerocorp,snap-fitness,galactic-cyber,global-pharm,omnia,deltaone,unitalife,zeus-med,univ-energy,solaris,defcomm,icarus,infocomm,zb-def,nova-med,taiyang-digital,microdyne,applied-energetics,titan-labs,run4theh111z,stormtech,vitalife,fulcrumtech,helios,kuai-gong,omnitek,4sigma,.,blade,nwo,clarkinc,powerhouse-fitness,b-and-a,ecorp,fulcrumassets,megacorp,The-Cave,pserv-524288gb-0,pserv-524288gb-1,pserv-524288gb-2,pserv-524288gb-3,pserv-524288gb-4,pserv-524288gb-5,pserv-524288gb-6,pserv-524288gb-7,pserv-524288gb-8,pserv-524288gb-9,pserv-524288gb-10,pserv-524288gb-11,pserv-524288gb-12,pserv-524288gb-13,pserv-524288gb-14,pserv-524288gb-15,pserv-524288gb-16,pserv-524288gb-17,pserv-524288gb-18,pserv-524288gb-19,pserv-524288gb-20,pserv-524288gb-21,pserv-524288gb-22,pserv-524288gb-23,pserv-524288gb-24\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"rooted.txt\",\"text\":\"powerhouse-fitness,taiyang-digital,solaris,titan-labs,applied-energetics,zb-institute,galactic-cyber,vitalife,lexo-corp,helios,infocomm,alpha-ent,syscore,microdyne,rho-construction,catalyst,snap-fitness,summit-uni,netlink,millenium-fitness,comptek,aevum-police,rothman-uni,the-hub,johnson-ortho,omega-net,crush-fitness,silver-helix,phantasy,iron-gym,max-hardware,zer0,neo-net,harakiri-sushi,hong-fang-tea,nectar-net,joesguns,sigma-cosmetics,foodnstuff,n00dles\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servers.txt\",\"text\":\"{\\\"home\\\":{\\\"n00dles - $1.75m - 1\\\":{\\\"zer0 - $187.50m - 75\\\":{},\\\"CSEC - $0.00 - 51\\\":{\\\"phantasy - $600.00m - 100\\\":{\\\"netlink - $6.88b - 424\\\":{\\\"I.I.I.I - $0.00 - 340\\\":{}},\\\"johnson-ortho - $1.78b - 271\\\":{\\\"catalyst - $12.72b - 415\\\":{\\\"lexo-corp - $18.39b - 651\\\":{\\\"aerocorp - $26.23b - 868\\\":{}},\\\"alpha-ent - $15.30b - 513\\\":{\\\"snap-fitness - $11.25b - 688\\\":{}}}},\\\"crush-fitness - $1.45b - 239\\\":{\\\"summit-uni - $7.21b - 459\\\":{\\\"millenium-fitness - $6.25b - 520\\\":{\\\"galactic-cyber - $20.24b - 862\\\":{\\\"omnia - $23.70b - 929\\\":{\\\"zeus-med - $34.47b - 842\\\":{}},\\\"deltaone - $38.34b - 893\\\":{\\\"univ-energy - $28.33b - 841\\\":{\\\"infocomm - $16.43b - 908\\\":{},\\\"zb-def - $24.41b - 790\\\":{\\\"microdyne - $14.63b - 836\\\":{\\\"stormtech - $28.26b - 969\\\":{\\\"kuai-gong - $698.05b - 1178\\\":{\\\"blade - $937.51b - 960\\\":{\\\"ecorp - $1.30t - 1271\\\":{}},\\\"nwo - $694.05b - 980\\\":{\\\"fulcrumassets - $25.00m - 1205\\\":{}}}},\\\"vitalife - $19.04b - 839\\\":{\\\"omnitek - $542.96b - 970\\\":{\\\"clarkinc - $504.16b - 967\\\":{\\\"megacorp - $1.41t - 1274\\\":{}},\\\"powerhouse-fitness - $22.50b - 1052\\\":{}},\\\"4sigma - $415.83b - 1018\\\":{},\\\". - $0.00 - 543\\\":{\\\"b-and-a - $423.15b - 987\\\":{\\\"The-Cave - $0.00 - 925\\\":{}}}}},\\\"applied-energetics - $21.16b - 807\\\":{}}},\\\"solaris - $21.70b - 754\\\":{\\\"nova-med - $28.00b - 810\\\":{}}}}}}}},\\\"omega-net - $1.53b - 193\\\":{\\\"comptek - $5.74b - 351\\\":{\\\"syscore - $14.64b - 604\\\":{\\\"rho-construction - $13.75b - 516\\\":{\\\"global-pharm - $39.11b - 834\\\":{\\\"unitalife - $26.24b - 822\\\":{\\\"defcomm - $23.18b - 954\\\":{},\\\"icarus - $24.46b - 882\\\":{\\\"taiyang-digital - $21.72b - 865\\\":{\\\"titan-labs - $21.49b - 833\\\":{},\\\"run4theh111z - $0.00 - 527\\\":{\\\"fulcrumtech - $39.17b - 1014\\\":{},\\\"helios - $16.90b - 897\\\":{}}}}}}}}},\\\"avmnite-02h - $0.00 - 208\\\":{\\\"zb-institute - $21.07b - 731\\\":{\\\"aevum-police - $5.45b - 413\\\":{}}}}}},\\\"foodnstuff - $50.00m - 1\\\":{},\\\"sigma-cosmetics - $57.50m - 5\\\":{\\\"nectar-net - $68.75m - 20\\\":{\\\"silver-helix - $1.13b - 150\\\":{\\\"the-hub - $3.93b - 308\\\":{\\\"rothman-uni - $4.60b - 391\\\":{}}}}},\\\"joesguns - $62.50m - 10\\\":{},\\\"hong-fang-tea - $75.00m - 30\\\":{},\\\"harakiri-sushi - $100.00m - 40\\\":{\\\"max-hardware - $250.00m - 80\\\":{\\\"neo-net - $125.00m - 50\\\":{}}},\\\"iron-gym - $500.00m - 100\\\":{},\\\"darkweb - $0.00 - 1\\\":{}}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"money_rooted.txt\",\"text\":\"937508343450 blade,694049872525 nwo,542962591125 omnitek,504163658650 clarkinc,423151475750 b-and-a,415832204300 4sigma,39165555625 fulcrumtech,39107690325 global-pharm,38341390450 deltaone,34469139575 zeus-med,28332854825 univ-energy,28258368325 stormtech,27995501675 nova-med,26240038650 unitalife,26231457650 aerocorp,24461785700 icarus,24409164650 zb-def,23698604025 omnia,23175480750 defcomm,22500000000 powerhouse-fitness,21723596650 taiyang-digital,21699180900 solaris,21486687425 titan-labs,21164039000 applied-energetics,21067335750 zb-institute,20235973000 galactic-cyber,19043954500 vitalife,18386862725 lexo-corp,16904642200 helios,16425422600 infocomm,15304911825 alpha-ent,14643199675 syscore,14626392125 microdyne,13749037900 rho-construction,12720934475 catalyst,11250000000 snap-fitness,7207180250 summit-uni,6875000000 netlink,6250000000 millenium-fitness,5739817775 comptek,5447000300 aevum-police,4596414825 rothman-uni,3928264975 the-hub,1782466550 johnson-ortho,1527286350 omega-net,1449843425 crush-fitness,1125000000 silver-helix,600000000 phantasy,500000000 iron-gym,250000000 max-hardware,187500000 zer0,125000000 neo-net,100000000 harakiri-sushi,75000000 hong-fang-tea,68750000 nectar-net,62500000 joesguns,57500000 sigma-cosmetics,50000000 foodnstuff,1750000 n00dles\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-672964-BitRunners.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[23,18],[30,25],[39,44]],\"reward\":{\"name\":\"BitRunners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"57.9.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":52077627279,\"moneyMax\":1301940681975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1271,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"87.6.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":56240986212,\"moneyMax\":1406024655300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1274,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"48.3.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":24.007999999999996,\"minDifficulty\":24,\"moneyAvailable\":421082149215,\"moneyMax\":423151475750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":987,\"serverGrowth\":79}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-734290.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[6,2],[1,2,1],[1,4,2,5],[1,5,3,5,5]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-527053.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[190,109,187,75,36,28,65,151,156,114,162,137,60,158,147],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"1.7.0.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":29.007999999999996,\"minDifficulty\":29,\"moneyAvailable\":932521384921,\"moneyMax\":937508343450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":960,\"serverGrowth\":55}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"71.5.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":33.01599999999999,\"minDifficulty\":33,\"moneyAvailable\":687812046065,\"moneyMax\":694049872525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":980,\"serverGrowth\":89}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-686761.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-9,-9,2,5,7,-10,-3,9,-1,5,-3,-1,-3,-6,-7,-2,9,3,-3,-6,-2,3],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"62.4.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":15,\"minDifficulty\":15,\"moneyAvailable\":504163658650,\"moneyMax\":504163658650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":967,\"serverGrowth\":68}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-124478.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[10,[158,66,91,19,91,155,71,2,69,139,107,158,106,103,40,137,36,191,82,150,91,112,46,116,77,35,95,27,189,151,104,21,77,148,155,181,195,145,20,169,29,160,161,59,195,95,66,120,187,134]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"46.0.2.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":33.01199999999999,\"minDifficulty\":33,\"moneyAvailable\":539078210903,\"moneyMax\":542962591125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":970,\"serverGrowth\":97}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-60864-CyberSec.cct\",\"type\":\"Total Ways to Sum\",\"data\":57,\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"34.6.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":24.074000000000005,\"minDifficulty\":24,\"moneyAvailable\":415832204300,\"moneyMax\":415832204300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1018,\"serverGrowth\":83}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"5.4.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"blade\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":27921954546,\"moneyMax\":698048863650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1178,\"serverGrowth\":99}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"13.8.9.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":30.050000000000004,\"minDifficulty\":30,\"moneyAvailable\":39165555625,\"moneyMax\":39165555625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1014,\"serverGrowth\":92}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"33.1.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1205,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"96.9.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":28.055999999999997,\"minDifficulty\":28,\"moneyAvailable\":28258368325,\"moneyMax\":28258368325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":969,\"serverGrowth\":88}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"66.8.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":31,\"minDifficulty\":31,\"moneyAvailable\":23175480750,\"moneyMax\":23175480750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":954,\"serverGrowth\":64}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-252972.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,1,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,1,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,1,0],[0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,0,0],[0,0,1,0,0,1,0,1,1,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"97.2.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":25,\"minDifficulty\":25,\"moneyAvailable\":16425422600,\"moneyMax\":16425422600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":908,\"serverGrowth\":64}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-709682.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[13,4],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"92.6.3.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":31.007999999999996,\"minDifficulty\":31,\"moneyAvailable\":16759364715,\"moneyMax\":16904642200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":897,\"serverGrowth\":76}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"49.2.1.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"omnitek\",\"4sigma\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":27.005999999999997,\"minDifficulty\":27,\"moneyAvailable\":18891180763,\"moneyMax\":19043954500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":839,\"serverGrowth\":68}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"98.0.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":31.037999999999993,\"minDifficulty\":31,\"moneyAvailable\":24461785700,\"moneyMax\":24461785700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":882,\"serverGrowth\":95}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"69.8.1.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":28332854825,\"moneyMax\":28332854825,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":841,\"serverGrowth\":87}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"33.2.8.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":345}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":346}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":347}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"titan-labs\",\"moduleSequenceNumber\":348}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///13bbdb47-cbab-4a47-aa5c-c5c3ca7ca3c6\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///13bbdb47-cbab-4a47-aa5c-c5c3ca7ca3c6\"}],\"ramUsage\":6.1,\"server\":\"titan-labs\",\"moduleSequenceNumber\":349}}],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":24.051999999999996,\"minDifficulty\":24,\"moneyAvailable\":21486687425,\"moneyMax\":21486687425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":833,\"serverGrowth\":69}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-592032.cct\",\"type\":\"Total Ways to Sum\",\"data\":51,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"66.3.2.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":24.059999999999995,\"minDifficulty\":24,\"moneyAvailable\":14626392125,\"moneyMax\":14626392125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":836,\"serverGrowth\":85}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-906973.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[6,38,27],[5,33,15],[49,15,42],[11,39,36],[33,24,27],[27,21,33],[38,36,31],[28,39,40],[23,6,37],[25,10,43],[14,48,13],[33,39,27],[47,31,10]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-509471.cct\",\"type\":\"Total Ways to Sum\",\"data\":27,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"28.2.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":24.015999999999995,\"minDifficulty\":24,\"moneyAvailable\":21274678878,\"moneyMax\":21723596650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":865,\"serverGrowth\":80}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"52.1.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":19,\"minDifficulty\":19,\"moneyAvailable\":20235973000,\"moneyMax\":20235973000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":862,\"serverGrowth\":85}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"27.3.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":29.005999999999997,\"minDifficulty\":29,\"moneyAvailable\":26074760962,\"moneyMax\":26231457650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":868,\"serverGrowth\":63}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"95.2.0.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":29.021999999999995,\"minDifficulty\":29,\"moneyAvailable\":23698604025,\"moneyMax\":23698604025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":929,\"serverGrowth\":66}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"59.9.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":350}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":351}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":352}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"zb-def\",\"moduleSequenceNumber\":353}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"zb-def\",\"moduleSequenceNumber\":354}}],\"serversOnNetwork\":[\"univ-energy\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":19.011999999999993,\"minDifficulty\":19,\"moneyAvailable\":23984234605,\"moneyMax\":24409164650,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":790,\"serverGrowth\":67}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-512599.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":294088663,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"45.2.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":355}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":356}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":357}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":358}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":359}}],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":26.011999999999997,\"minDifficulty\":26,\"moneyAvailable\":20792637877,\"moneyMax\":21164039000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":807,\"serverGrowth\":72}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-26855-NiteSec.cct\",\"type\":\"Total Ways to Sum\",\"data\":85,\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"40.8.1.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":360}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":361}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":362}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"solaris\",\"moduleSequenceNumber\":363}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///2d7d9e0a-ff70-4d33-ba55-c37aeb393833\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///2d7d9e0a-ff70-4d33-ba55-c37aeb393833\"}],\"ramUsage\":6.1,\"server\":\"solaris\",\"moduleSequenceNumber\":364}}],\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":25.011999999999997,\"minDifficulty\":25,\"moneyAvailable\":21265391002,\"moneyMax\":21699180900,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":754,\"serverGrowth\":75}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-17692.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":953606239,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"32.2.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":28.005999999999997,\"minDifficulty\":28,\"moneyAvailable\":38130057368,\"moneyMax\":38341390450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":893,\"serverGrowth\":60}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"87.1.3.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":365}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":366}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":367}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"global-pharm\",\"moduleSequenceNumber\":368}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"global-pharm\",\"moduleSequenceNumber\":369}}],\"serversOnNetwork\":[\"rho-construction\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":25.005999999999997,\"minDifficulty\":25,\"moneyAvailable\":38830726873,\"moneyMax\":39107690325,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":834,\"serverGrowth\":86}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"51.9.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":370}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":371}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":372}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"nova-med\",\"moduleSequenceNumber\":373}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"nova-med\",\"moduleSequenceNumber\":374}}],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":22.048,\"minDifficulty\":22,\"moneyAvailable\":27995501675,\"moneyMax\":27995501675,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":810,\"serverGrowth\":84}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"47.3.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":25.009999999999994,\"minDifficulty\":25,\"moneyAvailable\":34073649297,\"moneyMax\":34469139575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":842,\"serverGrowth\":73}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"8.6.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":375}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":376}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":377}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///8eb70454-ff82-4a9d-a42f-18018795746c\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///8eb70454-ff82-4a9d-a42f-18018795746c\"}],\"ramUsage\":5.6,\"server\":\"unitalife\",\"moduleSequenceNumber\":378}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///0f115380-1128-4437-9e78-f1d1033f6e09\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///0f115380-1128-4437-9e78-f1d1033f6e09\"}],\"ramUsage\":6.1,\"server\":\"unitalife\",\"moduleSequenceNumber\":379}}],\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":24.005999999999997,\"minDifficulty\":24,\"moneyAvailable\":26044052186,\"moneyMax\":26240038650,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":822,\"serverGrowth\":72}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-732592-BitRunners.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")a()a)())(aaa(a))(\",\"reward\":{\"name\":\"BitRunners\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-722354.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[7,11],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"78.0.1.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":380}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":381}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":382}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///b7f92d68-7354-47d1-9a08-917e52598537\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///b7f92d68-7354-47d1-9a08-917e52598537\"}],\"ramUsage\":5.6,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":383}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///1a81881a-df23-44a0-96df-b243c4c2ff19\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///1a81881a-df23-44a0-96df-b243c4c2ff19\"}],\"ramUsage\":6.1,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":384}}],\"serversOnNetwork\":[\"catalyst\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":24.009999999999998,\"minDifficulty\":24,\"moneyAvailable\":18008729641,\"moneyMax\":18386862725,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":651,\"serverGrowth\":60}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"52.5.6.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":385}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":386}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":387}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///f2402602-63a2-401c-acb6-51704560e310\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///f2402602-63a2-401c-acb6-51704560e310\"}],\"ramUsage\":5.6,\"server\":\"rho-construction\",\"moduleSequenceNumber\":388}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///24343ea5-7b92-439f-8cbd-83b47bae6d54\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///24343ea5-7b92-439f-8cbd-83b47bae6d54\"}],\"ramUsage\":6.1,\"server\":\"rho-construction\",\"moduleSequenceNumber\":389}}],\"serversOnNetwork\":[\"syscore\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":14.114000000000003,\"minDifficulty\":14,\"moneyAvailable\":13749037900,\"moneyMax\":13749037900,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":516,\"serverGrowth\":47}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"96.8.6.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":390}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":391}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":392}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///6899090a-2ce0-449f-8596-997581f4fc25\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///6899090a-2ce0-449f-8596-997581f4fc25\"}],\"ramUsage\":5.6,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":393}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///74793d46-5206-4b73-b314-48799c63f317\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///74793d46-5206-4b73-b314-48799c63f317\"}],\"ramUsage\":6.1,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":394}}],\"serversOnNetwork\":[\"catalyst\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":20.013999999999996,\"minDifficulty\":20,\"moneyAvailable\":14734521414,\"moneyMax\":15304911825,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":513,\"serverGrowth\":51}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"80.5.2.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":395}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":396}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":397}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///3d1c24f7-1764-4578-a8a9-794101f81325\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///3d1c24f7-1764-4578-a8a9-794101f81325\"}],\"ramUsage\":5.6,\"server\":\"aevum-police\",\"moduleSequenceNumber\":398}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///5b1f102e-febc-4697-9376-9f6198576446\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///5b1f102e-febc-4697-9376-9f6198576446\"}],\"ramUsage\":6.1,\"server\":\"aevum-police\",\"moduleSequenceNumber\":399}}],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":26.177999999999997,\"minDifficulty\":26,\"moneyAvailable\":5447000300,\"moneyMax\":5447000300,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":413,\"serverGrowth\":43}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"36.7.2.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":400}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":401}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":402}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///29190e1d-9eba-4752-9723-05df2e20cae4\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///29190e1d-9eba-4752-9723-05df2e20cae4\"}],\"ramUsage\":5.6,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":403}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f316cc53-f11f-4c4d-ab07-02784d8d8822\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f316cc53-f11f-4c4d-ab07-02784d8d8822\"}],\"ramUsage\":6.1,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":404}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":17.131999999999994,\"minDifficulty\":17,\"moneyAvailable\":4596414825,\"moneyMax\":4596414825,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":391,\"serverGrowth\":45}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"74.1.6.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":405}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":406}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":407}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"zb-institute\",\"moduleSequenceNumber\":408}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///a5b69f3b-093b-4557-b779-2c6a115464dd\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///a5b69f3b-093b-4557-b779-2c6a115464dd\"}],\"ramUsage\":6.1,\"server\":\"zb-institute\",\"moduleSequenceNumber\":409}}],\"serversOnNetwork\":[\"avmnite-02h\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":21067335750,\"moneyMax\":21067335750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":731,\"serverGrowth\":81}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-411892.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[10,7],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-54393.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"7613\",-60],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"43.3.3.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":410}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":411}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":412}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///b6f0f67a-012d-457e-9f1c-3fc71e22485b\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///b6f0f67a-012d-457e-9f1c-3fc71e22485b\"}],\"ramUsage\":5.6,\"server\":\"summit-uni\",\"moduleSequenceNumber\":413}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f54ff161-b03e-464b-9848-dcfc93290420\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f54ff161-b03e-464b-9848-dcfc93290420\"}],\"ramUsage\":6.1,\"server\":\"summit-uni\",\"moduleSequenceNumber\":414}}],\"serversOnNetwork\":[\"crush-fitness\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":21.117999999999995,\"minDifficulty\":21,\"moneyAvailable\":7207180250,\"moneyMax\":7207180250,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":459,\"serverGrowth\":55}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"30.7.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":415}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":416}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":417}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"syscore\",\"moduleSequenceNumber\":418}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"syscore\",\"moduleSequenceNumber\":419}}],\"serversOnNetwork\":[\"comptek\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":22.085999999999995,\"minDifficulty\":22,\"moneyAvailable\":14643199675,\"moneyMax\":14643199675,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":604,\"serverGrowth\":70}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"74.4.4.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":420}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":421}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":422}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///431703a5-8d6c-4b40-987f-3893a326b422\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///431703a5-8d6c-4b40-987f-3893a326b422\"}],\"ramUsage\":5.6,\"server\":\"catalyst\",\"moduleSequenceNumber\":423}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///4a2b5f19-1717-48cd-b4a8-2eac3e91df24\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///4a2b5f19-1717-48cd-b4a8-2eac3e91df24\"}],\"ramUsage\":6.1,\"server\":\"catalyst\",\"moduleSequenceNumber\":424}}],\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":22.013999999999996,\"minDifficulty\":22,\"moneyAvailable\":12196135999,\"moneyMax\":12720934475,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":415,\"serverGrowth\":32}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-112015-NiteSec.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"24267242250\",\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"97.5.2.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":425}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":426}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":427}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///21123f7b-1f79-4a6f-bc7d-33b3817a8f01\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///21123f7b-1f79-4a6f-bc7d-33b3817a8f01\"}],\"ramUsage\":5.6,\"server\":\"the-hub\",\"moduleSequenceNumber\":428}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///0d2c276e-1300-4ab3-8c44-513e9a55d801\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///0d2c276e-1300-4ab3-8c44-513e9a55d801\"}],\"ramUsage\":6.1,\"server\":\"the-hub\",\"moduleSequenceNumber\":429}}],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":15.116000000000003,\"minDifficulty\":15,\"moneyAvailable\":3928264975,\"moneyMax\":3928264975,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":308,\"serverGrowth\":53}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-794125.cct\",\"type\":\"Array Jumping Game\",\"data\":[7,8,0,5,5,4,0,4,5,2,9,0,8,3,1,0],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"55.0.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":430}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":431}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":432}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"comptek\",\"moduleSequenceNumber\":433}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"comptek\",\"moduleSequenceNumber\":434}}],\"serversOnNetwork\":[\"omega-net\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":21.135999999999992,\"minDifficulty\":21,\"moneyAvailable\":5739817775,\"moneyMax\":5739817775,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":351,\"serverGrowth\":54}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"24.4.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":435}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":436}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":437}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///9beaf9a2-10f9-42e9-a93b-e04dc15663bc\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///9beaf9a2-10f9-42e9-a93b-e04dc15663bc\"}],\"ramUsage\":5.6,\"server\":\"netlink\",\"moduleSequenceNumber\":438}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///04530953-1b54-41ad-b81d-9f43eb7362fd\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///04530953-1b54-41ad-b81d-9f43eb7362fd\"}],\"ramUsage\":6.1,\"server\":\"netlink\",\"moduleSequenceNumber\":439}}],\"serversOnNetwork\":[\"phantasy\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":24.013999999999996,\"minDifficulty\":24,\"moneyAvailable\":6601539446,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":424,\"serverGrowth\":64}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-136799-TheBlackHand.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[141,19,57,41,3,85,183,55,164,198,191,22,45,23,199,23,36,54,104,28,37,200,98,81,197,1,84,187,6],\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"81.8.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":440}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":441}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":442}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":443}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":444}}],\"serversOnNetwork\":[\"phantasy\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":19,\"minDifficulty\":19,\"moneyAvailable\":1782466550,\"moneyMax\":1782466550,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":271,\"serverGrowth\":44}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-47321-BitRunners.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[135,126,61,183,106,151,173,174,182,96,119,150,182,1,84,11,162],\"reward\":{\"name\":\"BitRunners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"80.2.3.6\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":445}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":446}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":447}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"n00dles\",\"moduleSequenceNumber\":448}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"n00dles\",\"moduleSequenceNumber\":449}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.002,\"minDifficulty\":1,\"moneyAvailable\":1729893,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-821422.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"1567802498\",85],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"88.4.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":450}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":451}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":452}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///2e8410b5-c863-4c12-a558-bb061d4eefc3\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///2e8410b5-c863-4c12-a558-bb061d4eefc3\"}],\"ramUsage\":5.6,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":453}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f8d07b0d-1831-47b6-8a07-ecbf01928216\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f8d07b0d-1831-47b6-8a07-ecbf01928216\"}],\"ramUsage\":6.1,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":454}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":50000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"38.3.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":455}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":456}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":457}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///57a7a38b-0403-4191-b975-1c258cfd6877\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///57a7a38b-0403-4191-b975-1c258cfd6877\"}],\"ramUsage\":5.6,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":458}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///40e9a48c-7912-41b5-8fde-165423658322\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///40e9a48c-7912-41b5-8fde-165423658322\"}],\"ramUsage\":6.1,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":459}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":57500000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-610136-CyberSec.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[2,4],[22,25],[6,16],[6,15],[11,13],[10,18],[25,30],[14,24],[23,31],[10,13],[17,24],[1,2],[6,14],[8,13]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-664974.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":767722238,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"62.2.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":460}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":461}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":462}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///fa8cd3ff-8f8d-4caa-8e12-32dab9856171\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///fa8cd3ff-8f8d-4caa-8e12-32dab9856171\"}],\"ramUsage\":5.6,\"server\":\"joesguns\",\"moduleSequenceNumber\":463}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///842ba49f-aa91-404d-b139-b9d85101c028\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///842ba49f-aa91-404d-b139-b9d85101c028\"}],\"ramUsage\":6.1,\"server\":\"joesguns\",\"moduleSequenceNumber\":464}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":62500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"45.8.6.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":465}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":466}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":467}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///7193d9d8-55ed-4e13-9467-402f3ab2fca2\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///7193d9d8-55ed-4e13-9467-402f3ab2fca2\"}],\"ramUsage\":5.6,\"server\":\"zer0\",\"moduleSequenceNumber\":468}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///00ffb5c7-c7f6-42ea-9eba-a4d746dc93cc\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///00ffb5c7-c7f6-42ea-9eba-a4d746dc93cc\"}],\"ramUsage\":6.1,\"server\":\"zer0\",\"moduleSequenceNumber\":469}}],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8.006000000000002,\"minDifficulty\":8,\"moneyAvailable\":181912966,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-8313.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[21,6,6,18,50,20,37,17,31,47,16,15],[2,27,16,17,30,38,36,17,20,29,23,32]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"38.2.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":470}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":471}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":472}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///dece61d2-76af-480a-aafe-cf7aab9fa16c\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///dece61d2-76af-480a-aafe-cf7aab9fa16c\"}],\"ramUsage\":5.6,\"server\":\"nectar-net\",\"moduleSequenceNumber\":473}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///07980755-c4fb-4f81-8e26-d902948f6bd9\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///07980755-c4fb-4f81-8e26-d902948f6bd9\"}],\"ramUsage\":6.1,\"server\":\"nectar-net\",\"moduleSequenceNumber\":474}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":68750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"51.8.2.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":475}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":476}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":477}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///76b787cb-5cae-4435-b92e-a5792e612106\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///76b787cb-5cae-4435-b92e-a5792e612106\"}],\"ramUsage\":5.6,\"server\":\"neo-net\",\"moduleSequenceNumber\":478}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///1ab6d68a-fc03-40da-83e0-0e36701162fd\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///1ab6d68a-fc03-40da-83e0-0e36701162fd\"}],\"ramUsage\":6.1,\"server\":\"neo-net\",\"moduleSequenceNumber\":479}}],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8.002,\"minDifficulty\":8,\"moneyAvailable\":122450441,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-949107.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[6,[78,125,101]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"4.4.5.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":480}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":481}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":482}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///a683eea7-663a-4de0-a5bf-983cfdb0bf41\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///a683eea7-663a-4de0-a5bf-983cfdb0bf41\"}],\"ramUsage\":5.6,\"server\":\"silver-helix\",\"moduleSequenceNumber\":483}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///cb6ebd92-4153-4cce-bf68-69acfa8a6418\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///cb6ebd92-4153-4cce-bf68-69acfa8a6418\"}],\"ramUsage\":6.1,\"server\":\"silver-helix\",\"moduleSequenceNumber\":484}}],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.006000000000002,\"minDifficulty\":10,\"moneyAvailable\":1094315161,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"78.1.0.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":485}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":486}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":487}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///80a408d0-b022-4f26-803a-b905f88e517c\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///80a408d0-b022-4f26-803a-b905f88e517c\"}],\"ramUsage\":5.6,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":488}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///50c96300-7d3a-422b-a9cc-599bc3a92e91\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///50c96300-7d3a-422b-a9cc-599bc3a92e91\"}],\"ramUsage\":6.1,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":489}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":75000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-142458.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,1,0,0,0,0],[1,0,0,0,0,0,0],[0,1,0,0,0,0,1],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,1,1,0]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"55.6.6.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":490}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":491}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":492}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///ea43765b-ce7c-4511-a2c0-f388e00f9cd1\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///ea43765b-ce7c-4511-a2c0-f388e00f9cd1\"}],\"ramUsage\":5.6,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":493}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///77511731-a0c3-4bc9-aea7-8cea9250cae5\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///77511731-a0c3-4bc9-aea7-8cea9250cae5\"}],\"ramUsage\":6.1,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":494}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.06,\"minDifficulty\":5,\"moneyAvailable\":100000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"57.0.1.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":495}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":496}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":497}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///7b32a66f-4995-47ac-b717-2c563fe2ba62\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///7b32a66f-4995-47ac-b717-2c563fe2ba62\"}],\"ramUsage\":5.6,\"server\":\"phantasy\",\"moduleSequenceNumber\":498}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f7cc320a-3f06-4e07-82ba-1c3a8bb1c7ed\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f7cc320a-3f06-4e07-82ba-1c3a8bb1c7ed\"}],\"ramUsage\":6.1,\"server\":\"phantasy\",\"moduleSequenceNumber\":499}}],\"serversOnNetwork\":[\"CSEC\",\"netlink\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7.009999999999999,\"minDifficulty\":7,\"moneyAvailable\":570820062,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"96.2.5.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":500}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":501}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":502}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///c1864041-6b7e-4f0b-9bb5-b0f0b620624e\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///c1864041-6b7e-4f0b-9bb5-b0f0b620624e\"}],\"ramUsage\":5.6,\"server\":\"max-hardware\",\"moduleSequenceNumber\":503}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///cc9ce1cf-2315-4c78-8e2b-04dc4d76c78b\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///cc9ce1cf-2315-4c78-8e2b-04dc4d76c78b\"}],\"ramUsage\":6.1,\"server\":\"max-hardware\",\"moduleSequenceNumber\":504}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.009999999999999,\"minDifficulty\":5,\"moneyAvailable\":237369746,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"60.6.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":505}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":506}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":507}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///be02940b-5d8f-4244-8081-541d5a7781a2\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///be02940b-5d8f-4244-8081-541d5a7781a2\"}],\"ramUsage\":5.6,\"server\":\"omega-net\",\"moduleSequenceNumber\":508}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f12701f2-b8ca-4c07-bdf9-75dac8f0bf5c\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f12701f2-b8ca-4c07-bdf9-75dac8f0bf5c\"}],\"ramUsage\":6.1,\"server\":\"omega-net\",\"moduleSequenceNumber\":509}}],\"serversOnNetwork\":[\"CSEC\",\"comptek\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":33,\"hackDifficulty\":11.118000000000004,\"minDifficulty\":11,\"moneyAvailable\":1527286350,\"moneyMax\":1527286350,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":193,\"serverGrowth\":37}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"48.3.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":510}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":511}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":512}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":513}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":514}}],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":14.208000000000004,\"minDifficulty\":14,\"moneyAvailable\":1449843425,\"moneyMax\":1449843425,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":239,\"serverGrowth\":28}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-320600.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"2978134139\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"12.7.0.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":515}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":516}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":517}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///12b9539b-d454-4baa-ba15-3a4068fba104\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///12b9539b-d454-4baa-ba15-3a4068fba104\"}],\"ramUsage\":5.6,\"server\":\"iron-gym\",\"moduleSequenceNumber\":518}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///37dd54c0-3735-410c-9920-0b07f388132d\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///37dd54c0-3735-410c-9920-0b07f388132d\"}],\"ramUsage\":6.1,\"server\":\"iron-gym\",\"moduleSequenceNumber\":519}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.010000000000003,\"minDifficulty\":10,\"moneyAvailable\":476452757,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-36986.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[106,64,43,198,67,121,180,63,147,147,192,22,40,19,133,156,98,196,12],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-760841.cct\",\"type\":\"Array Jumping Game\",\"data\":[9,10,7,9,0,0,4,6,8,9],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"82.5.4.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":520}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":521}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":522}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"blob:file:///5049ba53-36c1-4cbe-a10e-e5d230c23d50\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///5049ba53-36c1-4cbe-a10e-e5d230c23d50\"}],\"ramUsage\":5.6,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":523}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///23488852-197c-4941-9b09-9ff6bd843eb4\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///23488852-197c-4941-9b09-9ff6bd843eb4\"}],\"ramUsage\":6.1,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":524}}],\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":18.013999999999996,\"minDifficulty\":18,\"moneyAvailable\":6013643853,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":520,\"serverGrowth\":36}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-98017.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[20,20,9,25,42,15,43,25,38,24],[13,47,21,43,23,27,30,30,18,13],[12,20,34,41,9,2,40,9,1,27]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"69.5.2.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":21.017999999999997,\"minDifficulty\":21,\"moneyAvailable\":22235996970,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1052,\"serverGrowth\":50}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-152376-BitRunners.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[179,200,91,85,107,114,185,152,185,136,147,141,88,30,107,43,162,124,69,11,143,155,3,135,184,22,73,5,20,73,89,90,2,14,108,96,180],\"reward\":{\"name\":\"BitRunners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"8.1.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":525}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":526}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":527}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":528}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.1,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":529}}],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":20.013999999999996,\"minDifficulty\":20,\"moneyAvailable\":10932292337,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":688,\"serverGrowth\":57}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-189030.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"))a)((a(a))a))(())\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"60.2.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":527,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-500681.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[80,149,39,150,37,188,101,101,85,157,84,161,70,190,160,73,199,123,13,152,24,46,147,60,17,120,166,157,167]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-778333.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[158,5,35,66,179,80,17]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"28.2.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":340,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"12.0.7.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":208,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"79.8.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":543,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"37.2.4.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"n00dles\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":51,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"32.9.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"31.3.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"94.6.0.6\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-0\",\"httpPortOpen\":false,\"ip\":\"86.6.4.3\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1865.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",\"pserv-524288gb-0\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":926104.5304846262,\"onlineMoneyMade\":2085036221,\"onlineRunningTime\":98860.20999983927,\"pid\":70,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\",\"pserv-524288gb-0\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":801131.6339219775,\"onlineMoneyMade\":3003378638,\"onlineRunningTime\":98860.20999983927,\"pid\":71,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",\"pserv-524288gb-0\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1007070.8782380654,\"onlineMoneyMade\":5128612835,\"onlineRunningTime\":98860.20999983927,\"pid\":72,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\",\"pserv-524288gb-0\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":964014.6185520431,\"onlineMoneyMade\":3471540821,\"onlineRunningTime\":98860.20999983927,\"pid\":73,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",\"pserv-524288gb-0\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":992222.0378666787,\"onlineMoneyMade\":3281554977,\"onlineRunningTime\":98860.20999983927,\"pid\":74,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",\"pserv-524288gb-0\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1022702.5719577412,\"onlineMoneyMade\":4743148132,\"onlineRunningTime\":98860.20999983927,\"pid\":75,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",\"pserv-524288gb-0\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":619555.2113448954,\"onlineMoneyMade\":4324063830,\"onlineRunningTime\":98860.20999983927,\"pid\":76,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\",\"pserv-524288gb-0\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1095056.2842193774,\"onlineMoneyMade\":2571133413,\"onlineRunningTime\":98860.20999983927,\"pid\":77,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":458.60999999998523,\"pid\":504036,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":358.209999999991,\"pid\":505327,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":358.209999999991,\"pid\":505328,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":120}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":338.20999999999196,\"pid\":505676,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":338.20999999999196,\"pid\":505677,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":145}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":208.0099999999961,\"pid\":507474,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":208.0099999999961,\"pid\":507475,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":168}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":158.40999999999926,\"pid\":508194,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":158.40999999999926,\"pid\":508195,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":159}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":128.6100000000012,\"pid\":508591,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":128.6100000000012,\"pid\":508592,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":134}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":108.61000000000102,\"pid\":508872,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":108.61000000000102,\"pid\":508873,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":129}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":108.61000000000102,\"pid\":508874,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-0\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.21000000000042,\"pid\":509467,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":8}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.21000000000042,\"pid\":509468,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"threads\":90}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.21000000000042,\"pid\":509469,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-0\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"moduleSequenceNumber\":530}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-0\",\"moduleSequenceNumber\":531}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-0\",\"moduleSequenceNumber\":532}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-0\",\"moduleSequenceNumber\":533}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///67f25ff4-990e-4075-83f3-361814fd1c1f\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///67f25ff4-990e-4075-83f3-361814fd1c1f\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-0\",\"moduleSequenceNumber\":731}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-1\",\"httpPortOpen\":false,\"ip\":\"9.6.6.1\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1865.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",\"pserv-524288gb-1\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":926204.2563803331,\"onlineMoneyMade\":2108126735,\"onlineRunningTime\":98860.20999983927,\"pid\":78,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\",\"pserv-524288gb-1\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":801476.1572737212,\"onlineMoneyMade\":3324115615,\"onlineRunningTime\":98860.20999983927,\"pid\":79,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",\"pserv-524288gb-1\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1007361.7598365706,\"onlineMoneyMade\":5459250915,\"onlineRunningTime\":98860.20999983927,\"pid\":80,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\",\"pserv-524288gb-1\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":964359.1419037872,\"onlineMoneyMade\":3803743944,\"onlineRunningTime\":98860.20999983927,\"pid\":81,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",\"pserv-524288gb-1\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":992524.2558813394,\"onlineMoneyMade\":3572590752,\"onlineRunningTime\":98860.20999983927,\"pid\":82,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",\"pserv-524288gb-1\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1022641.372593732,\"onlineMoneyMade\":4659983502,\"onlineRunningTime\":98860.20999983927,\"pid\":83,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",\"pserv-524288gb-1\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":619463.0430599588,\"onlineMoneyMade\":4201566101,\"onlineRunningTime\":98860.20999983927,\"pid\":84,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\",\"pserv-524288gb-1\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1095248.9514443295,\"onlineMoneyMade\":2728520754,\"onlineRunningTime\":98860.20999983927,\"pid\":85,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":458.40999999998525,\"pid\":504039,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":358.209999999991,\"pid\":505330,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":358.209999999991,\"pid\":505331,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":120}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":338.20999999999196,\"pid\":505679,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":338.20999999999196,\"pid\":505680,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":145}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":207.8099999999961,\"pid\":507477,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":207.8099999999961,\"pid\":507478,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":168}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":158.40999999999926,\"pid\":508197,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":158.40999999999926,\"pid\":508198,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":159}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":128.6100000000012,\"pid\":508594,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":128.6100000000012,\"pid\":508595,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":134}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":108.61000000000102,\"pid\":508875,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":108.61000000000102,\"pid\":508876,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":129}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":108.61000000000102,\"pid\":508877,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.21000000000042,\"pid\":509470,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":8}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.21000000000042,\"pid\":509471,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"threads\":90}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.21000000000042,\"pid\":509472,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-1\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"moduleSequenceNumber\":535}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-1\",\"moduleSequenceNumber\":536}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-1\",\"moduleSequenceNumber\":537}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-1\",\"moduleSequenceNumber\":538}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///2c1d2393-a0f6-4779-8de8-96c650693a97\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///2c1d2393-a0f6-4779-8de8-96c650693a97\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-1\",\"moduleSequenceNumber\":739}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-2\",\"httpPortOpen\":false,\"ip\":\"87.3.9.5\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1865.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",\"pserv-524288gb-2\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":925605.90100609,\"onlineMoneyMade\":1804328465,\"onlineRunningTime\":98860.20999983927,\"pid\":86,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\",\"pserv-524288gb-2\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":800901.9516874808,\"onlineMoneyMade\":2792915326,\"onlineRunningTime\":98860.20999983927,\"pid\":87,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",\"pserv-524288gb-2\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1006896.3492789624,\"onlineMoneyMade\":4890196459,\"onlineRunningTime\":98860.20999983927,\"pid\":88,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\",\"pserv-524288gb-2\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":964359.1419037876,\"onlineMoneyMade\":3811868071,\"onlineRunningTime\":98860.20999983927,\"pid\":89,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",\"pserv-524288gb-2\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":992463.8122784074,\"onlineMoneyMade\":3496004094,\"onlineRunningTime\":98860.20999983927,\"pid\":90,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",\"pserv-524288gb-2\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1022947.369413778,\"onlineMoneyMade\":5011585260,\"onlineRunningTime\":98860.20999983927,\"pid\":91,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",\"pserv-524288gb-2\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":619463.0430599587,\"onlineMoneyMade\":4185777750,\"onlineRunningTime\":98860.20999983927,\"pid\":92,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\",\"pserv-524288gb-2\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1095248.9514443295,\"onlineMoneyMade\":2715666287,\"onlineRunningTime\":98860.20999983927,\"pid\":93,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":458.40999999998525,\"pid\":504042,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":358.209999999991,\"pid\":505333,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":358.209999999991,\"pid\":505334,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":120}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":338.20999999999196,\"pid\":505682,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":338.20999999999196,\"pid\":505683,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":145}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":207.8099999999961,\"pid\":507480,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":207.8099999999961,\"pid\":507481,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":168}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":158.40999999999926,\"pid\":508200,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":158.40999999999926,\"pid\":508201,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":159}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":128.6100000000012,\"pid\":508597,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":128.6100000000012,\"pid\":508598,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":134}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.61000000000101,\"pid\":508878,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.61000000000101,\"pid\":508879,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":129}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.61000000000101,\"pid\":508880,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.01000000000042,\"pid\":509473,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":8}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.01000000000042,\"pid\":509474,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"threads\":90}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.01000000000042,\"pid\":509475,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-2\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"moduleSequenceNumber\":540}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-2\",\"moduleSequenceNumber\":541}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-2\",\"moduleSequenceNumber\":542}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-2\",\"moduleSequenceNumber\":543}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///cf69df81-8e99-4bd7-bcd2-87c75f2c4210\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///cf69df81-8e99-4bd7-bcd2-87c75f2c4210\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-2\",\"moduleSequenceNumber\":747}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-3\",\"httpPortOpen\":false,\"ip\":\"23.5.8.2\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1865.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",\"pserv-524288gb-3\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":926403.7081717475,\"onlineMoneyMade\":2176333560,\"onlineRunningTime\":98860.20999983927,\"pid\":94,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\",\"pserv-524288gb-3\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":801820.6806254653,\"onlineMoneyMade\":3606882074,\"onlineRunningTime\":98860.20999983927,\"pid\":95,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",\"pserv-524288gb-3\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1006838.1729592611,\"onlineMoneyMade\":4821349279,\"onlineRunningTime\":98860.20999983927,\"pid\":96,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\",\"pserv-524288gb-3\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":963842.3568761714,\"onlineMoneyMade\":3298506328,\"onlineRunningTime\":98860.20999983927,\"pid\":97,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",\"pserv-524288gb-3\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":992645.1430872037,\"onlineMoneyMade\":3672359444,\"onlineRunningTime\":98860.20999983927,\"pid\":98,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",\"pserv-524288gb-3\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1022824.9706857596,\"onlineMoneyMade\":4851625566,\"onlineRunningTime\":98860.20999983927,\"pid\":99,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",\"pserv-524288gb-3\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":619509.1272024268,\"onlineMoneyMade\":4252415094,\"onlineRunningTime\":98860.20999983927,\"pid\":100,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\",\"pserv-524288gb-3\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1095056.2842193777,\"onlineMoneyMade\":2586093295,\"onlineRunningTime\":98860.20999983927,\"pid\":101,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":458.40999999998525,\"pid\":504045,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":358.209999999991,\"pid\":505336,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":358.209999999991,\"pid\":505337,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":120}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":338.20999999999196,\"pid\":505685,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":338.20999999999196,\"pid\":505686,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":145}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":207.8099999999961,\"pid\":507483,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":207.8099999999961,\"pid\":507484,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":168}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":158.40999999999926,\"pid\":508203,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":158.40999999999926,\"pid\":508204,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":159}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":128.6100000000012,\"pid\":508600,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":128.6100000000012,\"pid\":508601,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":134}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.61000000000101,\"pid\":508881,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.61000000000101,\"pid\":508882,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":129}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.61000000000101,\"pid\":508883,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-3\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.81000000000041,\"pid\":509476,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":8}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.81000000000041,\"pid\":509477,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"threads\":90}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.81000000000041,\"pid\":509478,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-3\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"moduleSequenceNumber\":545}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-3\",\"moduleSequenceNumber\":546}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-3\",\"moduleSequenceNumber\":547}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-3\",\"moduleSequenceNumber\":548}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///d9a1478a-dcd6-46f4-979c-6a049841c32d\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///d9a1478a-dcd6-46f4-979c-6a049841c32d\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-3\",\"moduleSequenceNumber\":755}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-4\",\"httpPortOpen\":false,\"ip\":\"79.7.2.8\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1865.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",\"pserv-524288gb-4\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":925954.9416410654,\"onlineMoneyMade\":1978443045,\"onlineRunningTime\":98860.20999983927,\"pid\":102,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\",\"pserv-524288gb-4\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":801418.7367150967,\"onlineMoneyMade\":3232826940,\"onlineRunningTime\":98860.20999983927,\"pid\":103,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",\"pserv-524288gb-4\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1006663.6440001582,\"onlineMoneyMade\":4607888460,\"onlineRunningTime\":98860.20999983927,\"pid\":104,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\",\"pserv-524288gb-4\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":964186.880227915,\"onlineMoneyMade\":3630494461,\"onlineRunningTime\":98860.20999983927,\"pid\":105,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",\"pserv-524288gb-4\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":992342.9250725429,\"onlineMoneyMade\":3380440591,\"onlineRunningTime\":98860.20999983927,\"pid\":106,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",\"pserv-524288gb-4\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1022702.5719577412,\"onlineMoneyMade\":4719483513,\"onlineRunningTime\":98860.20999983927,\"pid\":107,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",\"pserv-524288gb-4\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":619232.6223476166,\"onlineMoneyMade\":3914243040,\"onlineRunningTime\":98860.20999983927,\"pid\":108,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\",\"pserv-524288gb-4\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1095377.3962609642,\"onlineMoneyMade\":2808216137,\"onlineRunningTime\":98860.20999983927,\"pid\":109,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":458.40999999998525,\"pid\":504048,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":358.209999999991,\"pid\":505339,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":358.209999999991,\"pid\":505340,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":120}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":338.20999999999196,\"pid\":505688,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":338.20999999999196,\"pid\":505689,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":145}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":207.8099999999961,\"pid\":507486,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":207.8099999999961,\"pid\":507487,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":168}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":158.40999999999926,\"pid\":508206,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":158.40999999999926,\"pid\":508207,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":159}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":127.61000000000125,\"pid\":508603,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":127.61000000000125,\"pid\":508604,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":134}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.410000000001,\"pid\":508884,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.410000000001,\"pid\":508885,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":129}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.410000000001,\"pid\":508886,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-4\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.81000000000041,\"pid\":509479,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":8}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.81000000000041,\"pid\":509480,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"threads\":90}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.81000000000041,\"pid\":509481,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-4\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"moduleSequenceNumber\":550}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-4\",\"moduleSequenceNumber\":551}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-4\",\"moduleSequenceNumber\":552}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-4\",\"moduleSequenceNumber\":553}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f9afa812-e85c-49e0-a985-80516d20bfcd\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f9afa812-e85c-49e0-a985-80516d20bfcd\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-4\",\"moduleSequenceNumber\":763}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-5\",\"httpPortOpen\":false,\"ip\":\"3.0.1.0\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1833.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",\"pserv-524288gb-5\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1392952.941565064,\"onlineMoneyMade\":7040556004,\"onlineRunningTime\":98860.20999983927,\"pid\":110,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\",\"pserv-524288gb-5\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1004369.9537491702,\"onlineMoneyMade\":1448185080,\"onlineRunningTime\":98860.20999983927,\"pid\":111,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\",\"pserv-524288gb-5\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1005879.4068897312,\"onlineMoneyMade\":1809255447,\"onlineRunningTime\":98860.20999983927,\"pid\":112,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",\"pserv-524288gb-5\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1742214.6879463773,\"onlineMoneyMade\":12683029100,\"onlineRunningTime\":98860.20999983927,\"pid\":113,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\",\"pserv-524288gb-5\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1195928.5694176804,\"onlineMoneyMade\":7203253795,\"onlineRunningTime\":98860.20999983927,\"pid\":114,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\",\"pserv-524288gb-5\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":795542.6995492423,\"onlineMoneyMade\":2458041264,\"onlineRunningTime\":98860.20999983927,\"pid\":115,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",\"pserv-524288gb-5\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1352983.80201554,\"onlineMoneyMade\":17275816825,\"onlineRunningTime\":98860.20999983927,\"pid\":116,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-524288gb-5\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3637856.0460152295,\"onlineMoneyMade\":13152558678,\"onlineRunningTime\":98860.20999983927,\"pid\":117,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":458.40999999998525,\"pid\":504051,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":298.0099999999941,\"pid\":506231,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":218.00999999999567,\"pid\":507357,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":218.00999999999567,\"pid\":507358,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":160}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":187.80999999999747,\"pid\":507747,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":187.80999999999747,\"pid\":507748,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":163}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":168.2099999999986,\"pid\":507992,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.61000000000118,\"pid\":508729,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.61000000000118,\"pid\":508730,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":157}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.61000000000118,\"pid\":508731,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-5\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.410000000001,\"pid\":508887,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.410000000001,\"pid\":508888,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":157}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.410000000001,\"pid\":508890,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":23}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.410000000001,\"pid\":508891,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"threads\":275}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"moduleSequenceNumber\":555}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-5\",\"moduleSequenceNumber\":556}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-5\",\"moduleSequenceNumber\":557}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-5\",\"moduleSequenceNumber\":558}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f0a1af51-5fbc-44ee-adff-7904a098f058\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///f0a1af51-5fbc-44ee-adff-7904a098f058\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-5\",\"moduleSequenceNumber\":771}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-6\",\"httpPortOpen\":false,\"ip\":\"44.0.2.0\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1833.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",\"pserv-524288gb-6\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1392782.9471724238,\"onlineMoneyMade\":6788972486,\"onlineRunningTime\":98860.20999983927,\"pid\":118,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\",\"pserv-524288gb-6\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1004441.7337682579,\"onlineMoneyMade\":1473126919,\"onlineRunningTime\":98860.20999983927,\"pid\":119,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\",\"pserv-524288gb-6\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1005939.0947315863,\"onlineMoneyMade\":1843758251,\"onlineRunningTime\":98860.20999983927,\"pid\":120,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",\"pserv-524288gb-6\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1742263.0393720767,\"onlineMoneyMade\":12693608833,\"onlineRunningTime\":98860.20999983927,\"pid\":121,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\",\"pserv-524288gb-6\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1195717.0254490331,\"onlineMoneyMade\":6932939400,\"onlineRunningTime\":98860.20999983927,\"pid\":122,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\",\"pserv-524288gb-6\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":795714.9612251142,\"onlineMoneyMade\":2567490656,\"onlineRunningTime\":98860.20999983927,\"pid\":123,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",\"pserv-524288gb-6\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1352983.80201554,\"onlineMoneyMade\":17177475743,\"onlineRunningTime\":98860.20999983927,\"pid\":124,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-524288gb-6\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3637856.0460152295,\"onlineMoneyMade\":13074633475,\"onlineRunningTime\":98860.20999983927,\"pid\":125,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":458.40999999998525,\"pid\":504054,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":298.0099999999941,\"pid\":506234,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":217.80999999999568,\"pid\":507360,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":217.80999999999568,\"pid\":507361,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":160}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":187.60999999999746,\"pid\":507750,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":187.60999999999746,\"pid\":507751,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":163}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":168.2099999999986,\"pid\":507995,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.41000000000118,\"pid\":508732,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.41000000000118,\"pid\":508733,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":157}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.41000000000118,\"pid\":508734,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.410000000001,\"pid\":508893,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.410000000001,\"pid\":508894,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":157}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.410000000001,\"pid\":508896,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":23}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.410000000001,\"pid\":508897,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"threads\":275}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"moduleSequenceNumber\":560}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-6\",\"moduleSequenceNumber\":561}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-6\",\"moduleSequenceNumber\":562}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-6\",\"moduleSequenceNumber\":563}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///caf35027-5b57-4be5-b2c9-668a5238b559\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///caf35027-5b57-4be5-b2c9-668a5238b559\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-6\",\"moduleSequenceNumber\":779}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-7\",\"httpPortOpen\":false,\"ip\":\"72.4.7.4\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1833.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",\"pserv-524288gb-7\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1392839.6119699704,\"onlineMoneyMade\":6840481482,\"onlineRunningTime\":98860.20999983927,\"pid\":126,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\",\"pserv-524288gb-7\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1003939.2736346435,\"onlineMoneyMade\":1248922499,\"onlineRunningTime\":98860.20999983927,\"pid\":127,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\",\"pserv-524288gb-7\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1005580.9676804557,\"onlineMoneyMade\":1633370591,\"onlineRunningTime\":98860.20999983927,\"pid\":128,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",\"pserv-524288gb-7\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1742263.0393720767,\"onlineMoneyMade\":12626017211,\"onlineRunningTime\":98860.20999983927,\"pid\":129,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\",\"pserv-524288gb-7\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1195928.5694176801,\"onlineMoneyMade\":7190235693,\"onlineRunningTime\":98860.20999983927,\"pid\":130,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\",\"pserv-524288gb-7\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":795485.2789906181,\"onlineMoneyMade\":2409205257,\"onlineRunningTime\":98860.20999983927,\"pid\":131,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",\"pserv-524288gb-7\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1352983.80201554,\"onlineMoneyMade\":17079696812,\"onlineRunningTime\":98860.20999983927,\"pid\":132,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-524288gb-7\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3637856.0460152295,\"onlineMoneyMade\":13040601724,\"onlineRunningTime\":98860.20999983927,\"pid\":133,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":458.40999999998525,\"pid\":504057,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":298.0099999999941,\"pid\":506237,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":217.80999999999568,\"pid\":507363,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":217.80999999999568,\"pid\":507364,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":160}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":187.60999999999746,\"pid\":507753,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":187.60999999999746,\"pid\":507754,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":163}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":168.2099999999986,\"pid\":507998,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.41000000000118,\"pid\":508735,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.41000000000118,\"pid\":508736,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":157}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.41000000000118,\"pid\":508737,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-7\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.410000000001,\"pid\":508899,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.410000000001,\"pid\":508900,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":157}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.410000000001,\"pid\":508902,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":23}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.410000000001,\"pid\":508903,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"threads\":275}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"moduleSequenceNumber\":565}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-7\",\"moduleSequenceNumber\":566}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-7\",\"moduleSequenceNumber\":567}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-7\",\"moduleSequenceNumber\":568}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///bc005efd-21cf-4bf8-a908-0994cd61fcb3\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///bc005efd-21cf-4bf8-a908-0994cd61fcb3\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-7\",\"moduleSequenceNumber\":787}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-8\",\"httpPortOpen\":false,\"ip\":\"3.4.3.4\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1833.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",\"pserv-524288gb-8\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1392669.61757733,\"onlineMoneyMade\":6596193328,\"onlineRunningTime\":98860.20999983927,\"pid\":134,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\",\"pserv-524288gb-8\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1004082.8336728193,\"onlineMoneyMade\":1320762028,\"onlineRunningTime\":98860.20999983927,\"pid\":135,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\",\"pserv-524288gb-8\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1005760.031206021,\"onlineMoneyMade\":1729520139,\"onlineRunningTime\":98860.20999983927,\"pid\":136,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",\"pserv-524288gb-8\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1742214.6879463773,\"onlineMoneyMade\":12683724476,\"onlineRunningTime\":98860.20999983927,\"pid\":137,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\",\"pserv-524288gb-8\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1195981.455409842,\"onlineMoneyMade\":7244512692,\"onlineRunningTime\":98860.20999983927,\"pid\":138,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\",\"pserv-524288gb-8\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":795427.8584319943,\"onlineMoneyMade\":2385236124,\"onlineRunningTime\":98860.20999983927,\"pid\":139,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",\"pserv-524288gb-8\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1352983.80201554,\"onlineMoneyMade\":17007811376,\"onlineRunningTime\":98860.20999983927,\"pid\":140,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-524288gb-8\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3637856.0460152295,\"onlineMoneyMade\":12963206068,\"onlineRunningTime\":98860.20999983927,\"pid\":141,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":458.20999999998526,\"pid\":504060,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":297.8099999999941,\"pid\":506240,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":217.80999999999568,\"pid\":507366,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":217.80999999999568,\"pid\":507367,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":160}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":187.60999999999746,\"pid\":507756,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":187.60999999999746,\"pid\":507757,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":163}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":168.2099999999986,\"pid\":508001,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.41000000000118,\"pid\":508738,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.41000000000118,\"pid\":508739,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":157}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.41000000000118,\"pid\":508740,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-8\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.210000000001,\"pid\":508905,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.210000000001,\"pid\":508906,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":157}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.210000000001,\"pid\":508908,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":23}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.210000000001,\"pid\":508909,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"threads\":275}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"moduleSequenceNumber\":570}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-8\",\"moduleSequenceNumber\":571}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-8\",\"moduleSequenceNumber\":572}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-8\",\"moduleSequenceNumber\":573}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///dbbb7b93-00ad-4b1b-9cb0-baafa0457171\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///dbbb7b93-00ad-4b1b-9cb0-baafa0457171\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-8\",\"moduleSequenceNumber\":795}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-9\",\"httpPortOpen\":false,\"ip\":\"60.8.6.0\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1833.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",\"pserv-524288gb-9\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1392669.61757733,\"onlineMoneyMade\":6574916670,\"onlineRunningTime\":98860.20999983927,\"pid\":142,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\",\"pserv-524288gb-9\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1004369.9537491703,\"onlineMoneyMade\":1453948108,\"onlineRunningTime\":98860.20999983927,\"pid\":143,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\",\"pserv-524288gb-9\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1005580.9676804557,\"onlineMoneyMade\":1632238501,\"onlineRunningTime\":98860.20999983927,\"pid\":144,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",\"pserv-524288gb-9\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1742263.0393720767,\"onlineMoneyMade\":12529855865,\"onlineRunningTime\":98860.20999983927,\"pid\":145,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\",\"pserv-524288gb-9\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1196351.6573549744,\"onlineMoneyMade\":7651107629,\"onlineRunningTime\":98860.20999983927,\"pid\":146,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\",\"pserv-524288gb-9\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":795370.4378733701,\"onlineMoneyMade\":2355687814,\"onlineRunningTime\":98860.20999983927,\"pid\":147,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",\"pserv-524288gb-9\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1352983.80201554,\"onlineMoneyMade\":16910999754,\"onlineRunningTime\":98860.20999983927,\"pid\":148,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",\"pserv-524288gb-9\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3637856.0460152295,\"onlineMoneyMade\":12886271757,\"onlineRunningTime\":98860.20999983927,\"pid\":149,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":458.20999999998526,\"pid\":504063,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":297.8099999999941,\"pid\":506243,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":217.80999999999568,\"pid\":507369,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":217.80999999999568,\"pid\":507370,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":160}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":187.60999999999746,\"pid\":507759,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":187.60999999999746,\"pid\":507760,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":163}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":168.2099999999986,\"pid\":508004,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.41000000000118,\"pid\":508741,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.41000000000118,\"pid\":508742,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":157}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.41000000000118,\"pid\":508743,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-9\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.210000000001,\"pid\":508911,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.210000000001,\"pid\":508912,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":157}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.210000000001,\"pid\":508914,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":23}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.210000000001,\"pid\":508915,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"threads\":275}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"moduleSequenceNumber\":575}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-9\",\"moduleSequenceNumber\":576}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-9\",\"moduleSequenceNumber\":577}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-9\",\"moduleSequenceNumber\":578}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///9209d7a8-8cc0-4cb1-a629-724298b8e6b1\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///9209d7a8-8cc0-4cb1-a629-724298b8e6b1\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-9\",\"moduleSequenceNumber\":803}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-10\",\"httpPortOpen\":false,\"ip\":\"44.2.3.8\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1102.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\",\"pserv-524288gb-10\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1153307.718396528,\"onlineMoneyMade\":4494073183,\"onlineRunningTime\":98860.20999983927,\"pid\":150,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-524288gb-10\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1853505.4976134358,\"onlineMoneyMade\":6736300698,\"onlineRunningTime\":98860.20999983927,\"pid\":151,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-524288gb-10\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1956667.1856830362,\"onlineMoneyMade\":6278086970,\"onlineRunningTime\":98860.20999983927,\"pid\":152,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\",\"pserv-524288gb-10\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2191135.0742577473,\"onlineMoneyMade\":5765813833,\"onlineRunningTime\":98860.20999983927,\"pid\":153,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-524288gb-10\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2415025.969421384,\"onlineMoneyMade\":8016786920,\"onlineRunningTime\":98860.20999983927,\"pid\":154,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-524288gb-10\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3239649.5331909964,\"onlineMoneyMade\":4571298570,\"onlineRunningTime\":98860.20999983927,\"pid\":155,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-524288gb-10\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2108777.604351656,\"onlineMoneyMade\":7006112422,\"onlineRunningTime\":98860.20999983927,\"pid\":156,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-524288gb-10\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2005473.6576921225,\"onlineMoneyMade\":9675799655,\"onlineRunningTime\":98860.20999983927,\"pid\":157,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-10\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":257.6099999999951,\"pid\":506757,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":20}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":227.60999999999555,\"pid\":507129,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":197.6099999999968,\"pid\":507606,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":197.6099999999968,\"pid\":507607,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":141}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":158.40999999999926,\"pid\":508209,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":147.60999999999996,\"pid\":508323,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.41000000000118,\"pid\":508744,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.41000000000118,\"pid\":508745,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":150}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.210000000001,\"pid\":508917,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.210000000001,\"pid\":508918,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":200}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.210000000001,\"pid\":508920,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"threads\":10}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"moduleSequenceNumber\":580}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-10\",\"moduleSequenceNumber\":581}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-10\",\"moduleSequenceNumber\":582}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-10\",\"moduleSequenceNumber\":583}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///9bc10e11-ce86-4216-b0c9-d8b2cb3aa506\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///9bc10e11-ce86-4216-b0c9-d8b2cb3aa506\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-10\",\"moduleSequenceNumber\":811}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-11\",\"httpPortOpen\":false,\"ip\":\"62.9.0.4\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1102.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\",\"pserv-524288gb-11\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1153635.5977213462,\"onlineMoneyMade\":4771824673,\"onlineRunningTime\":98860.20999983927,\"pid\":158,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-524288gb-11\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1853505.4976134358,\"onlineMoneyMade\":6699439301,\"onlineRunningTime\":98860.20999983927,\"pid\":159,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-524288gb-11\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1956667.1856830362,\"onlineMoneyMade\":6202210666,\"onlineRunningTime\":98860.20999983927,\"pid\":160,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\",\"pserv-524288gb-11\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2191135.0742577473,\"onlineMoneyMade\":5742991865,\"onlineRunningTime\":98860.20999983927,\"pid\":161,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-524288gb-11\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2415025.969421384,\"onlineMoneyMade\":8012967300,\"onlineRunningTime\":98860.20999983927,\"pid\":162,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-524288gb-11\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3239649.5331909964,\"onlineMoneyMade\":4561237423,\"onlineRunningTime\":98860.20999983927,\"pid\":163,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-524288gb-11\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2108777.604351656,\"onlineMoneyMade\":7045461298,\"onlineRunningTime\":98860.20999983927,\"pid\":164,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-524288gb-11\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2005473.6576921225,\"onlineMoneyMade\":9609009219,\"onlineRunningTime\":98860.20999983927,\"pid\":165,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-11\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":257.6099999999951,\"pid\":506760,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":20}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":227.60999999999555,\"pid\":507135,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":197.6099999999968,\"pid\":507609,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":197.6099999999968,\"pid\":507610,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":141}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":158.40999999999926,\"pid\":508212,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":147.41,\"pid\":508326,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.41000000000118,\"pid\":508747,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.41000000000118,\"pid\":508748,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":150}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.210000000001,\"pid\":508923,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.210000000001,\"pid\":508924,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":200}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.210000000001,\"pid\":508926,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"threads\":10}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"moduleSequenceNumber\":585}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-11\",\"moduleSequenceNumber\":586}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-11\",\"moduleSequenceNumber\":587}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-11\",\"moduleSequenceNumber\":588}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///90ca54dd-ea74-4f7b-949e-38b11fd5221e\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///90ca54dd-ea74-4f7b-949e-38b11fd5221e\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-11\",\"moduleSequenceNumber\":819}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-12\",\"httpPortOpen\":false,\"ip\":\"63.5.3.0\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1102.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\",\"pserv-524288gb-12\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1153729.2775284369,\"onlineMoneyMade\":4840104676,\"onlineRunningTime\":98860.20999983927,\"pid\":166,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-524288gb-12\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1853505.4976134358,\"onlineMoneyMade\":6661439354,\"onlineRunningTime\":98860.20999983927,\"pid\":167,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-524288gb-12\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1956667.1856830362,\"onlineMoneyMade\":6166740873,\"onlineRunningTime\":98860.20999983927,\"pid\":168,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\",\"pserv-524288gb-12\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2191135.0742577473,\"onlineMoneyMade\":5711977550,\"onlineRunningTime\":98860.20999983927,\"pid\":169,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-524288gb-12\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2415025.969421384,\"onlineMoneyMade\":7949760053,\"onlineRunningTime\":98860.20999983927,\"pid\":170,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-524288gb-12\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3239404.7357349596,\"onlineMoneyMade\":4424704019,\"onlineRunningTime\":98860.20999983927,\"pid\":171,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-524288gb-12\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2108777.604351656,\"onlineMoneyMade\":6999626049,\"onlineRunningTime\":98860.20999983927,\"pid\":172,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-524288gb-12\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1019660.1578351983,\"onlineMoneyMade\":4818506484,\"onlineRunningTime\":98860.20999983927,\"pid\":173,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-12\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":257.6099999999951,\"pid\":506763,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":20}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":227.60999999999555,\"pid\":507141,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":197.4099999999968,\"pid\":507612,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":197.4099999999968,\"pid\":507613,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":141}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":158.40999999999926,\"pid\":508215,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":147.41,\"pid\":508329,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.41000000000118,\"pid\":508750,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.41000000000118,\"pid\":508751,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":150}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.210000000001,\"pid\":508929,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.210000000001,\"pid\":508930,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":200}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.210000000001,\"pid\":508932,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"threads\":10}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"moduleSequenceNumber\":590}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-12\",\"moduleSequenceNumber\":591}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-12\",\"moduleSequenceNumber\":592}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-12\",\"moduleSequenceNumber\":593}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///5a28d31c-3081-4312-beb2-1ad528215978\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///5a28d31c-3081-4312-beb2-1ad528215978\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-12\",\"moduleSequenceNumber\":827}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-13\",\"httpPortOpen\":false,\"ip\":\"32.9.9.6\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1102.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\",\"pserv-524288gb-13\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1153635.597721346,\"onlineMoneyMade\":4744131763,\"onlineRunningTime\":98860.20999983927,\"pid\":174,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-524288gb-13\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1853505.4976134358,\"onlineMoneyMade\":6623655945,\"onlineRunningTime\":98860.20999983927,\"pid\":175,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-524288gb-13\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1956667.1856830362,\"onlineMoneyMade\":6131256025,\"onlineRunningTime\":98860.20999983927,\"pid\":176,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\",\"pserv-524288gb-13\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2191135.0742577473,\"onlineMoneyMade\":5771137828,\"onlineRunningTime\":98860.20999983927,\"pid\":177,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-524288gb-13\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2415025.969421384,\"onlineMoneyMade\":7883832420,\"onlineRunningTime\":98860.20999983927,\"pid\":178,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-524288gb-13\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3239588.333826987,\"onlineMoneyMade\":4489811886,\"onlineRunningTime\":98860.20999983927,\"pid\":179,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-524288gb-13\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2108777.604351656,\"onlineMoneyMade\":6911854191,\"onlineRunningTime\":98860.20999983927,\"pid\":180,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-524288gb-13\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1019660.1578351983,\"onlineMoneyMade\":4783029362,\"onlineRunningTime\":98860.20999983927,\"pid\":181,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-13\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":257.40999999999514,\"pid\":506766,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":20}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":227.4099999999955,\"pid\":507147,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":197.4099999999968,\"pid\":507615,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":197.4099999999968,\"pid\":507616,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":141}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":158.40999999999926,\"pid\":508218,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":147.41,\"pid\":508332,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.41000000000118,\"pid\":508753,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.41000000000118,\"pid\":508754,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":150}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.210000000001,\"pid\":508935,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.210000000001,\"pid\":508936,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":200}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.210000000001,\"pid\":508938,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"threads\":10}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"moduleSequenceNumber\":595}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-13\",\"moduleSequenceNumber\":596}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-13\",\"moduleSequenceNumber\":597}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-13\",\"moduleSequenceNumber\":598}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///5c9c58e5-aed7-4f18-83f7-ff78c38d1c5e\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///5c9c58e5-aed7-4f18-83f7-ff78c38d1c5e\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-13\",\"moduleSequenceNumber\":835}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-14\",\"httpPortOpen\":false,\"ip\":\"26.4.3.3\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1102.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\",\"pserv-524288gb-14\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1153588.7578178002,\"onlineMoneyMade\":4676952500,\"onlineRunningTime\":98860.20999983927,\"pid\":182,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",\"pserv-524288gb-14\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1853505.4976134358,\"onlineMoneyMade\":6656197390,\"onlineRunningTime\":98860.20999983927,\"pid\":183,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",\"pserv-524288gb-14\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1956667.1856830362,\"onlineMoneyMade\":6096630348,\"onlineRunningTime\":98860.20999983927,\"pid\":184,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\",\"pserv-524288gb-14\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2191135.0742577473,\"onlineMoneyMade\":5739975719,\"onlineRunningTime\":98860.20999983927,\"pid\":185,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",\"pserv-524288gb-14\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2415025.969421384,\"onlineMoneyMade\":7831125575,\"onlineRunningTime\":98860.20999983927,\"pid\":186,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",\"pserv-524288gb-14\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3239527.1344629778,\"onlineMoneyMade\":4444540733,\"onlineRunningTime\":98860.20999983927,\"pid\":187,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",\"pserv-524288gb-14\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2108777.604351656,\"onlineMoneyMade\":6866925636,\"onlineRunningTime\":98860.20999983927,\"pid\":188,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",\"pserv-524288gb-14\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2005473.6576921225,\"onlineMoneyMade\":9510995742,\"onlineRunningTime\":98860.20999983927,\"pid\":189,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-14\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":257.40999999999514,\"pid\":506769,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":20}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":227.4099999999955,\"pid\":507153,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":187.4099999999975,\"pid\":507762,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":187.4099999999975,\"pid\":507763,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":141}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":157.40999999999931,\"pid\":508221,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":147.41,\"pid\":508335,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.41000000000118,\"pid\":508756,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.41000000000118,\"pid\":508757,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":150}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.210000000001,\"pid\":508941,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.210000000001,\"pid\":508942,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":200}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.210000000001,\"pid\":508944,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"threads\":10}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"moduleSequenceNumber\":600}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-14\",\"moduleSequenceNumber\":601}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-14\",\"moduleSequenceNumber\":602}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-14\",\"moduleSequenceNumber\":603}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///1899738a-0cbd-4285-b786-ad1802155a2f\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///1899738a-0cbd-4285-b786-ad1802155a2f\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-14\",\"moduleSequenceNumber\":843}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-15\",\"httpPortOpen\":false,\"ip\":\"1.3.9.5\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1466.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-524288gb-15\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3476868.1662412393,\"onlineMoneyMade\":3947407866,\"onlineRunningTime\":98860.20999983927,\"pid\":190,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-524288gb-15\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3204590.764334479,\"onlineMoneyMade\":8921658466,\"onlineRunningTime\":98860.20999983927,\"pid\":191,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-524288gb-15\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4475291.497694628,\"onlineMoneyMade\":5185226040,\"onlineRunningTime\":98860.20999983927,\"pid\":192,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-524288gb-15\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3819573.5886901035,\"onlineMoneyMade\":8047599051,\"onlineRunningTime\":98860.20999983927,\"pid\":193,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-524288gb-15\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1403526.6658153147,\"onlineMoneyMade\":3320766997,\"onlineRunningTime\":98860.20999983927,\"pid\":194,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-524288gb-15\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2475269.2442651913,\"onlineMoneyMade\":1541425032,\"onlineRunningTime\":98860.20999983927,\"pid\":195,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-524288gb-15\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1601168.2015500278,\"onlineMoneyMade\":1767165016,\"onlineRunningTime\":98860.20999983927,\"pid\":196,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-524288gb-15\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2415239.907706002,\"onlineMoneyMade\":1659725134,\"onlineRunningTime\":98860.20999983927,\"pid\":197,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":76.81000000000056,\"pid\":509311,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.81000000000013,\"pid\":509692,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.80999999999994,\"pid\":509958,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.80999999999994,\"pid\":509959,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":134}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.609999999999975,\"pid\":510079,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":8}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.609999999999975,\"pid\":510080,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":98}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.609999999999975,\"pid\":510082,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.609999999999975,\"pid\":510083,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":201}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.609999999999975,\"pid\":510085,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000004,\"pid\":510197,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000004,\"pid\":510198,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":173}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000004,\"pid\":510199,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-15\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.610000000000004,\"pid\":510200,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.610000000000004,\"pid\":510201,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"threads\":115}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"moduleSequenceNumber\":605}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-15\",\"moduleSequenceNumber\":606}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-15\",\"moduleSequenceNumber\":607}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-15\",\"moduleSequenceNumber\":608}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///71549de6-a212-4038-99b4-c6b552a938c2\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///71549de6-a212-4038-99b4-c6b552a938c2\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-15\",\"moduleSequenceNumber\":851}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-16\",\"httpPortOpen\":false,\"ip\":\"17.2.0.7\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1466.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-524288gb-16\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2897994.5169529244,\"onlineMoneyMade\":3246936391,\"onlineRunningTime\":98860.20999983927,\"pid\":198,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-524288gb-16\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3204590.764334479,\"onlineMoneyMade\":8844155726,\"onlineRunningTime\":98860.20999983927,\"pid\":199,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-524288gb-16\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4475291.497694628,\"onlineMoneyMade\":5143690732,\"onlineRunningTime\":98860.20999983927,\"pid\":200,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-524288gb-16\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3925379.319462051,\"onlineMoneyMade\":8201930220,\"onlineRunningTime\":98860.20999983927,\"pid\":201,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-524288gb-16\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1383892.3886598167,\"onlineMoneyMade\":3241374299,\"onlineRunningTime\":98860.20999983927,\"pid\":202,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-524288gb-16\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4012509.5412220703,\"onlineMoneyMade\":2562000475,\"onlineRunningTime\":98860.20999983927,\"pid\":203,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-524288gb-16\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1451717.6238382603,\"onlineMoneyMade\":1582412117,\"onlineRunningTime\":98860.20999983927,\"pid\":204,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-524288gb-16\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2320345.514862005,\"onlineMoneyMade\":1574744226,\"onlineRunningTime\":98860.20999983927,\"pid\":205,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":76.61000000000055,\"pid\":509325,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.61000000000013,\"pid\":509704,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.60999999999994,\"pid\":509964,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.60999999999994,\"pid\":509965,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":134}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.609999999999975,\"pid\":510087,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":8}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.609999999999975,\"pid\":510088,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":98}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.409999999999975,\"pid\":510090,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.409999999999975,\"pid\":510091,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":201}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.409999999999975,\"pid\":510093,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"pid\":510203,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"pid\":510204,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":173}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"pid\":510205,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-16\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"pid\":510206,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"pid\":510207,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"threads\":115}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"moduleSequenceNumber\":610}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-16\",\"moduleSequenceNumber\":611}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-16\",\"moduleSequenceNumber\":612}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-16\",\"moduleSequenceNumber\":613}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///d036f093-18e0-40d8-9f43-1ea94f4b70cc\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///d036f093-18e0-40d8-9f43-1ea94f4b70cc\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-16\",\"moduleSequenceNumber\":859}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-17\",\"httpPortOpen\":false,\"ip\":\"9.9.7.8\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1627.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-524288gb-17\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2864995.455300031,\"onlineMoneyMade\":3185011947,\"onlineRunningTime\":98860.20999983927,\"pid\":206,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-17\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-524288gb-17\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3204590.764334479,\"onlineMoneyMade\":8767327924,\"onlineRunningTime\":98860.20999983927,\"pid\":207,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-17\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-524288gb-17\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4475291.497694628,\"onlineMoneyMade\":5147107114,\"onlineRunningTime\":98860.20999983927,\"pid\":208,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-17\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-524288gb-17\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3848284.691512642,\"onlineMoneyMade\":7964683992,\"onlineRunningTime\":98860.20999983927,\"pid\":209,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-17\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-524288gb-17\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1383892.3886598167,\"onlineMoneyMade\":3209183252,\"onlineRunningTime\":98860.20999983927,\"pid\":210,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-17\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-524288gb-17\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6012649.910306322,\"onlineMoneyMade\":3889350645,\"onlineRunningTime\":98860.20999983927,\"pid\":211,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-17\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-524288gb-17\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1397371.959215799,\"onlineMoneyMade\":1506188328,\"onlineRunningTime\":98860.20999983927,\"pid\":212,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-17\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-524288gb-17\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3442050.2393055307,\"onlineMoneyMade\":2386866223,\"onlineRunningTime\":98860.20999983927,\"pid\":213,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-17\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":76.41000000000055,\"pid\":509339,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.410000000000124,\"pid\":509716,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.40999999999994,\"pid\":509970,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.40999999999994,\"pid\":509971,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":134}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":510095,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":8}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":510096,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":98}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":510098,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":510099,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":201}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.2100000000000035,\"pid\":510209,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.2100000000000035,\"pid\":510210,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":173}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.2100000000000035,\"pid\":510211,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-17\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":510212,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":510213,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":115}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":510215,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":510216,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"threads\":86}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"moduleSequenceNumber\":615}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-17\",\"moduleSequenceNumber\":616}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-17\",\"moduleSequenceNumber\":617}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-17\",\"moduleSequenceNumber\":618}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///bcffdb14-f2a9-4f10-9ace-fd4dcd8887e9\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///bcffdb14-f2a9-4f10-9ace-fd4dcd8887e9\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-17\",\"moduleSequenceNumber\":867}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-18\",\"httpPortOpen\":false,\"ip\":\"70.9.8.1\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1375.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-524288gb-18\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3387299.2846119544,\"onlineMoneyMade\":3762779996,\"onlineRunningTime\":98860.20999983927,\"pid\":214,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-524288gb-18\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3204590.764334479,\"onlineMoneyMade\":8691171199,\"onlineRunningTime\":98860.20999983927,\"pid\":215,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-524288gb-18\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4475291.497694628,\"onlineMoneyMade\":5105876310,\"onlineRunningTime\":98860.20999983927,\"pid\":216,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-524288gb-18\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3771156.833120151,\"onlineMoneyMade\":7721032557,\"onlineRunningTime\":98860.20999983927,\"pid\":217,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-524288gb-18\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1383892.3886598167,\"onlineMoneyMade\":3177312654,\"onlineRunningTime\":98860.20999983927,\"pid\":218,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-524288gb-18\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3230863.0590556385,\"onlineMoneyMade\":2001837459,\"onlineRunningTime\":98860.20999983927,\"pid\":219,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-524288gb-18\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1336233.0865155305,\"onlineMoneyMade\":1423891175,\"onlineRunningTime\":98860.20999983927,\"pid\":220,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-524288gb-18\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3610384.8856725837,\"onlineMoneyMade\":2489735453,\"onlineRunningTime\":98860.20999983927,\"pid\":221,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":76.01000000000055,\"pid\":509351,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.01000000000012,\"pid\":509731,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.009999999999977,\"pid\":510101,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.009999999999977,\"pid\":510102,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":8}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.009999999999977,\"pid\":510103,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":98}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.009999999999977,\"pid\":510105,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.009999999999977,\"pid\":510106,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":201}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":510218,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":510219,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":173}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":510220,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-18\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":510221,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":510222,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":115}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000003,\"pid\":510224,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000003,\"pid\":510225,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"threads\":86}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"moduleSequenceNumber\":620}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-18\",\"moduleSequenceNumber\":621}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-18\",\"moduleSequenceNumber\":622}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-18\",\"moduleSequenceNumber\":623}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///c897f494-ee01-4ba7-b11d-7a23280e8cc7\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///c897f494-ee01-4ba7-b11d-7a23280e8cc7\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-18\",\"moduleSequenceNumber\":875}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-19\",\"httpPortOpen\":false,\"ip\":\"58.6.5.7\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1375.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",\"pserv-524288gb-19\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2831512.8909122963,\"onlineMoneyMade\":3101152277,\"onlineRunningTime\":98860.20999983927,\"pid\":222,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",\"pserv-524288gb-19\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3204590.764334479,\"onlineMoneyMade\":8698627202,\"onlineRunningTime\":98860.20999983927,\"pid\":223,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",\"pserv-524288gb-19\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4475291.497694628,\"onlineMoneyMade\":5064976736,\"onlineRunningTime\":98860.20999983927,\"pid\":224,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",\"pserv-524288gb-19\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3766338.418873313,\"onlineMoneyMade\":7640459110,\"onlineRunningTime\":98860.20999983927,\"pid\":225,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",\"pserv-524288gb-19\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1376529.5347265059,\"onlineMoneyMade\":3128865076,\"onlineRunningTime\":98860.20999983927,\"pid\":226,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",\"pserv-524288gb-19\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4834730.394391138,\"onlineMoneyMade\":3066178566,\"onlineRunningTime\":98860.20999983927,\"pid\":227,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",\"pserv-524288gb-19\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1295473.8380486846,\"onlineMoneyMade\":1365134714,\"onlineRunningTime\":98860.20999983927,\"pid\":228,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",\"pserv-524288gb-19\",65530,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2715372.321911936,\"onlineMoneyMade\":1825472023,\"onlineRunningTime\":98860.20999983927,\"pid\":229,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":76.01000000000055,\"pid\":509360,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.810000000000116,\"pid\":509746,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.809999999999977,\"pid\":510108,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":510109,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":8}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":510110,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":98}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":510112,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":17}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":510113,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":201}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000003,\"pid\":510227,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000003,\"pid\":510228,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":173}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000003,\"pid\":510229,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-19\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":510230,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":10}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":510231,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":115}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":510233,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":510234,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"threads\":86}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"moduleSequenceNumber\":625}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-19\",\"moduleSequenceNumber\":626}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-19\",\"moduleSequenceNumber\":627}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-19\",\"moduleSequenceNumber\":628}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///0ab6b7ac-9335-4c7a-9f4c-a001fa8f0456\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///0ab6b7ac-9335-4c7a-9f4c-a001fa8f0456\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-19\",\"moduleSequenceNumber\":883}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-20\",\"httpPortOpen\":false,\"ip\":\"81.7.7.6\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":639.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-524288gb-20\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2110483.9996122145,\"onlineMoneyMade\":593270178,\"onlineRunningTime\":98860.20999983927,\"pid\":230,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-20\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-524288gb-20\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1291017.4935496016,\"onlineMoneyMade\":754994322,\"onlineRunningTime\":98860.20999983927,\"pid\":231,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-20\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-524288gb-20\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13750775.560657483,\"onlineMoneyMade\":3252448018,\"onlineRunningTime\":98860.20999983927,\"pid\":232,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-20\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-524288gb-20\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14170831.15431323,\"onlineMoneyMade\":2939788033,\"onlineRunningTime\":98860.20999983927,\"pid\":233,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-20\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-524288gb-20\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8447182.150149534,\"onlineMoneyMade\":1692271070,\"onlineRunningTime\":98860.20999983927,\"pid\":234,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-20\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-524288gb-20\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8697742.305187609,\"onlineMoneyMade\":1144470019,\"onlineRunningTime\":98860.20999983927,\"pid\":235,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-20\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-524288gb-20\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15830516.851777198,\"onlineMoneyMade\":914372117,\"onlineRunningTime\":98860.20999983927,\"pid\":236,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-20\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":510236,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-20\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":510237,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-20\",\"threads\":138}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"pid\":510239,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-20\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"pid\":510240,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-20\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":510241,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-20\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":510242,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-20\",\"threads\":172}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"hack.script\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":510243,\"ramUsage\":1.7,\"server\":\"pserv-524288gb-20\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-20\",\"moduleSequenceNumber\":630}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-20\",\"moduleSequenceNumber\":631}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-20\",\"moduleSequenceNumber\":632}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-20\",\"moduleSequenceNumber\":633}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///6c95b4f9-cd1d-4e5a-99f8-19cd3480d60d\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///6c95b4f9-cd1d-4e5a-99f8-19cd3480d60d\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-20\",\"moduleSequenceNumber\":890}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-21\",\"httpPortOpen\":false,\"ip\":\"57.4.0.5\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":341.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-524288gb-21\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2230525.6884802543,\"onlineMoneyMade\":636042760,\"onlineRunningTime\":98860.20999983927,\"pid\":237,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-21\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-524288gb-21\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4726659.834874437,\"onlineMoneyMade\":2946846492,\"onlineRunningTime\":98860.20999983927,\"pid\":238,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-21\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-524288gb-21\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12716432.641119331,\"onlineMoneyMade\":2975181562,\"onlineRunningTime\":98860.20999983927,\"pid\":239,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-21\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-524288gb-21\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12340837.801084146,\"onlineMoneyMade\":2531928191,\"onlineRunningTime\":98860.20999983927,\"pid\":240,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-21\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-524288gb-21\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5310241.696811513,\"onlineMoneyMade\":1050913279,\"onlineRunningTime\":98860.20999983927,\"pid\":241,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-21\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-524288gb-21\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7432952.8202354945,\"onlineMoneyMade\":967620477,\"onlineRunningTime\":98860.20999983927,\"pid\":242,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-21\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-524288gb-21\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14850501.153154602,\"onlineMoneyMade\":848709747,\"onlineRunningTime\":98860.20999983927,\"pid\":243,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-21\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.010000000000002,\"pid\":510132,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-21\",\"threads\":12}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.010000000000002,\"pid\":510133,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-21\",\"threads\":138}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.010000000000002,\"pid\":510135,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-21\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,0,14]},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":253.61310157148745,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"pid\":510138,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-21\",\"threads\":14}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-21\",\"moduleSequenceNumber\":635}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-21\",\"moduleSequenceNumber\":636}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-21\",\"moduleSequenceNumber\":637}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-21\",\"moduleSequenceNumber\":638}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///51dec361-2386-44bc-8c28-6d7809d12c1a\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///51dec361-2386-44bc-8c28-6d7809d12c1a\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-21\",\"moduleSequenceNumber\":897}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-22\",\"httpPortOpen\":false,\"ip\":\"35.4.9.5\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":250.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-524288gb-22\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2260860.3191101286,\"onlineMoneyMade\":638700545,\"onlineRunningTime\":98860.20999983927,\"pid\":244,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-22\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-524288gb-22\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4916905.891496133,\"onlineMoneyMade\":3039059480,\"onlineRunningTime\":98860.20999983927,\"pid\":245,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-22\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-524288gb-22\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8328817.292601859,\"onlineMoneyMade\":1925761374,\"onlineRunningTime\":98860.20999983927,\"pid\":246,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-22\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-524288gb-22\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7817452.279616777,\"onlineMoneyMade\":1583745727,\"onlineRunningTime\":98860.20999983927,\"pid\":247,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-22\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-524288gb-22\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5172076.902119663,\"onlineMoneyMade\":1012277296,\"onlineRunningTime\":98860.20999983927,\"pid\":248,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-22\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-524288gb-22\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7277273.345273171,\"onlineMoneyMade\":936782317,\"onlineRunningTime\":98860.20999983927,\"pid\":249,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-22\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-524288gb-22\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12220976.091092609,\"onlineMoneyMade\":690153679,\"onlineRunningTime\":98860.20999983927,\"pid\":250,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-22\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.210000000000004,\"pid\":510153,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-22\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.210000000000004,\"pid\":510154,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-22\",\"threads\":86}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.210000000000004,\"pid\":510156,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-22\",\"threads\":14}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.210000000000004,\"pid\":510159,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-22\",\"threads\":12}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-22\",\"moduleSequenceNumber\":640}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-22\",\"moduleSequenceNumber\":641}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-22\",\"moduleSequenceNumber\":642}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-22\",\"moduleSequenceNumber\":643}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///2dcaf2e8-7b00-4809-b413-0e76c957fe15\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///2dcaf2e8-7b00-4809-b413-0e76c957fe15\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-22\",\"moduleSequenceNumber\":904}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-23\",\"httpPortOpen\":false,\"ip\":\"82.4.4.2\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":208.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-524288gb-23\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2052295.6375118173,\"onlineMoneyMade\":571888262,\"onlineRunningTime\":98860.20999983927,\"pid\":251,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-23\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-524288gb-23\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4922630.301503032,\"onlineMoneyMade\":3014224937,\"onlineRunningTime\":98860.20999983927,\"pid\":252,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-23\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-524288gb-23\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6546931.640960293,\"onlineMoneyMade\":1496088346,\"onlineRunningTime\":98860.20999983927,\"pid\":253,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-23\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-524288gb-23\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6643864.300630947,\"onlineMoneyMade\":1330418862,\"onlineRunningTime\":98860.20999983927,\"pid\":254,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-23\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-524288gb-23\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2308096.606959088,\"onlineMoneyMade\":438710508,\"onlineRunningTime\":98860.20999983927,\"pid\":255,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-23\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-524288gb-23\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1726793.336310227,\"onlineMoneyMade\":214659881,\"onlineRunningTime\":98860.20999983927,\"pid\":256,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-23\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-524288gb-23\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3022535.640853612,\"onlineMoneyMade\":166619528,\"onlineRunningTime\":98860.20999983927,\"pid\":257,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-23\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.810000000000005,\"pid\":510171,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-23\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.810000000000005,\"pid\":510172,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-23\",\"threads\":86}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.810000000000005,\"pid\":510174,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-23\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.810000000000005,\"pid\":510175,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-23\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-23\",\"moduleSequenceNumber\":645}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-23\",\"moduleSequenceNumber\":646}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-23\",\"moduleSequenceNumber\":647}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-23\",\"moduleSequenceNumber\":648}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///d4e230bd-5cac-45f4-8708-a530da3c5b8f\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///d4e230bd-5cac-45f4-8708-a530da3c5b8f\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-23\",\"moduleSequenceNumber\":911}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-524288gb-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-524288gb-24\",\"httpPortOpen\":false,\"ip\":\"47.7.4.0\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":208.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",\"pserv-524288gb-24\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1972794.0962699656,\"onlineMoneyMade\":545126899,\"onlineRunningTime\":98860.20999983927,\"pid\":258,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-24\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",\"pserv-524288gb-24\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4911996.66645857,\"onlineMoneyMade\":2979149971,\"onlineRunningTime\":98860.20999983927,\"pid\":259,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-24\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",\"pserv-524288gb-24\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4652659.154879636,\"onlineMoneyMade\":1047673042,\"onlineRunningTime\":98860.20999983927,\"pid\":260,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-24\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",\"pserv-524288gb-24\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4670341.602960353,\"onlineMoneyMade\":920657908,\"onlineRunningTime\":98860.20999983927,\"pid\":261,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-24\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",\"pserv-524288gb-24\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":704247.3526209024,\"onlineMoneyMade\":122447186,\"onlineRunningTime\":98860.20999983927,\"pid\":262,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-24\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",\"pserv-524288gb-24\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":666315.9989273391,\"onlineMoneyMade\":77749097,\"onlineRunningTime\":98860.20999983927,\"pid\":263,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-24\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",\"pserv-524288gb-24\",74892,40],\"dataMap\":{},\"filename\":\"daemon_fml.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":975281.8918239836,\"onlineMoneyMade\":51153014,\"onlineRunningTime\":98860.20999983927,\"pid\":264,\"ramUsage\":6.1,\"server\":\"pserv-524288gb-24\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.410000000000005,\"pid\":510185,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-24\",\"threads\":7}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"grow.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.410000000000005,\"pid\":510186,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-24\",\"threads\":86}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.410000000000005,\"pid\":510188,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-24\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.210000000000004,\"pid\":510189,\"ramUsage\":1.75,\"server\":\"pserv-524288gb-24\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0]);\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-24\",\"moduleSequenceNumber\":650}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0]);\",\"filename\":\"grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-524288gb-24\",\"moduleSequenceNumber\":651}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0]);\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-524288gb-24\",\"moduleSequenceNumber\":652}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n\\n    let [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n    let IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n    let maxRam = ns.getServerMaxRam(HOST);\\n    let maxMoney = ns.getServerMaxMoney(TARGET);\\n    let minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n    let weakenRam = ns.getScriptRam('weaken.script');\\n    let growRam = ns.getScriptRam('grow.script');\\n    let hackRam = ns.getScriptRam('hack.script');\\n\\n    function __ramCheck__(host, amt) {\\n        let used = ns.getServerUsedRam(host);\\n        let free = maxRam - used;\\n\\n        ns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n        return free > amt;\\n    }\\n\\n    function __nodeStatus__(target) {\\n        //invalid target\\n        if (maxMoney === 0) {\\n            return -1;\\n        }\\n        //needs weakening\\n        if (minSecurity !== ns.getServerSecurityLevel(target)) {\\n            return 0;\\n        }\\n        //needs growth\\n        if (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n            return 1;\\n        }\\n        //ready to hack\\n        return 2;\\n    }\\n\\n    function __getOptimalWeakenThreads__() {\\n        let securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n        let weakenT = Math.ceil(securityTillMin / 0.05);\\n        let maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n        if (IS_PSERV) {\\n            weakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n        }\\n\\n        return Math.min(weakenT, maxT);\\n    }\\n\\n    function __calcWeakenThreads__() {\\n        let weakenT = __getOptimalWeakenThreads__();\\n        while (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n            weakenT -= IS_PSERV ? 10 : 1;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        return weakenT;\\n    }\\n\\n    function __calcWeakenGrowThreads__() {\\n        let weakened = 0;\\n        let weakenT = 1;\\n        let growT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n\\n        while (weakenTR + growTR < DAEMON_RAM) {\\n            growT++;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n            growT -= IS_PSERV ? 10 : 1;\\n            weakened = growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        return [weakenT, growT];\\n    }\\n\\n    function __calcWeakenGrowHackThreads__() {\\n        let weakenT = 1;\\n        let growT = 0;\\n        let hackT = 0;\\n\\n        let weakenTR = weakenT * weakenRam;\\n        let growTR = growT * growRam;\\n        let hackTR = hackT * hackRam;\\n        let hackMoneyPct = 0;\\n        let weakened = 0;\\n\\n        while (weakenTR + growTR + hackTR < DAEMON_RAM) {\\n            hackT++;\\n\\n            hackMoneyPct = ns.hackAnalyze(TARGET) * hackT;\\n            growT = Math.ceil(ns.growthAnalyze(TARGET, 1) * hackMoneyPct);\\n\\n            weakened = hackT * 0.002 + growT * 0.004;\\n            weakenT = Math.ceil(weakened / 0.05);\\n\\n            weakenTR = weakenT * weakenRam;\\n            growTR = growT * growRam;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        while (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n            hackT -= IS_PSERV ? 10 : 1;\\n            hackTR = hackT * hackRam;\\n        }\\n\\n        if (weakenT < 1) {\\n            weakenT = 1;\\n        }\\n\\n        if (growT < 1) {\\n            growT = 1;\\n        }\\n\\n        if (hackT < 1) {\\n            hackT = 1;\\n        }\\n\\n        return [weakenT, growT, hackT];\\n    }\\n\\n    while (true) {\\n        while (ns.isRunning('weaken.script', HOST, TARGET)) {\\n            await ns.sleep(10000);\\n        }\\n\\n        let weakenT, growT, hackT;\\n        let status = __nodeStatus__(TARGET);\\n        ns.print('status - ' + status);\\n        switch (status) {\\n            case 0:\\n                weakenT = __calcWeakenThreads__();\\n                break;\\n\\n            case 1:\\n                [weakenT, growT] = __calcWeakenGrowThreads__();\\n                break;\\n\\n            case 2:\\n                [weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n                break;\\n\\n            default:\\n                //something went wrong\\n                return;\\n        }\\n\\n        // ns.print(\\\"hackT: \\\" + hackT)\\n        // ns.print(\\\"growT: \\\" + growT)\\n        // ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n        if (weakenT >= 1) {\\n            ns.exec('weaken.script', HOST, weakenT, TARGET);\\n        }\\n\\n        if (growT >= 1) {\\n            ns.exec('grow.script', HOST, growT, TARGET);\\n        }\\n\\n        if (hackT >= 1) {\\n            ns.exec('hack.script', HOST, hackT, TARGET);\\n        }\\n\\n        await ns.sleep(10000);\\n    }\\n}\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.6,\"server\":\"pserv-524288gb-24\",\"moduleSequenceNumber\":653}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getScriptRam');\\n\\n\\tlet [TARGET, HOST, DAEMON_RAM, limit] = ns.args;\\n\\tlet IS_PSERV = HOST.split('-')[0] === 'pserv';\\n\\n\\tlet FML = ns.formulas;\\n\\n\\tlet maxRam = ns.getServerMaxRam(HOST);\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET);\\n\\tlet minSecurity = ns.getServerMinSecurityLevel(TARGET);\\n\\n\\tlet weakenRam = ns.getScriptRam('weaken.script');\\n\\tlet growRam = ns.getScriptRam('grow.script');\\n\\tlet hackRam = ns.getScriptRam('hack.script');\\n\\n\\tfunction __ramCheck__(host, amt) {\\n\\t\\tlet used = ns.getServerUsedRam(host);\\n\\t\\tlet free = maxRam - used;\\n\\n\\t\\tns.print(`'Free RAM: ${free} - Amt: ${amt}`);\\n\\t\\treturn free > amt;\\n\\t}\\n\\n\\tfunction __nodeStatus__(target) {\\n\\t\\t//invalid target\\n\\t\\tif (maxMoney === 0) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t\\t//needs weakening\\n\\t\\tif (minSecurity !== ns.getServerSecurityLevel(target)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t//needs growth\\n\\t\\tif (maxMoney !== ns.getServerMoneyAvailable(target)) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\t//ready to hack\\n\\t\\treturn 2;\\n\\t}\\n\\n\\tfunction __getOptimalWeakenThreads__() {\\n\\t\\tlet securityTillMin = ns.getServerSecurityLevel(TARGET) - minSecurity;\\n\\t\\tlet weakenT = Math.ceil(securityTillMin / 0.05);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / weakenRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tweakenT = Math.ceil(weakenT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(weakenT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalGrowThreads__(hackT) {\\n\\t\\tlet currMoney, moneyTillMax, hackPct;\\n\\n\\t\\tif (hackT) {\\n\\t\\t\\thackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100 * hackT;\\n\\t\\t\\tmoneyTillMax = hackPct + maxMoney;\\n\\t\\t} else {\\n\\t\\t\\tcurrMoney = ns.getServerMoneyAvailable(TARGET);\\n\\t\\t\\tmoneyTillMax = maxMoney - currMoney;\\n\\t\\t}\\n\\n\\t\\tlet growPct = FML.hacking.growPercent(ns.getServer(TARGET), 1, ns.getPlayer(), ns.getServer(HOST).cpuCores) - 1;\\n\\t\\tlet pctNeeded = moneyTillMax / maxMoney;\\n\\n\\t\\tlet growT = Math.ceil(pctNeeded / growPct);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / growRam);\\n\\n\\t\\tns.print(growT);\\n\\t\\tns.print(maxT);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\tgrowT = Math.ceil(growT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(growT, maxT);\\n\\t}\\n\\n\\tfunction __getOptimalHackThreads__() {\\n\\t\\tlet moneyThreshold = maxMoney * 0.6;\\n\\t\\tlet hackPct = FML.hacking.hackPercent(ns.getServer(TARGET), ns.getPlayer()) * 100;\\n\\t\\tlet hackMoneyPerT = ns.getServerMoneyAvailable(TARGET) * hackPct;\\n\\n\\t\\tlet hackT = Math.ceil(moneyThreshold / hackMoneyPerT);\\n\\t\\tlet maxT = Math.floor((maxRam - ns.getServerUsedRam(HOST)) / hackRam);\\n\\n\\t\\tif (IS_PSERV) {\\n\\t\\t\\thackT = Math.ceil(hackT / (limit ? 5 : 25));\\n\\t\\t}\\n\\n\\t\\treturn Math.min(hackT, maxT);\\n\\t}\\n\\n\\tfunction __calcWeakenThreads__() {\\n\\t\\tlet weakenT = __getOptimalWeakenThreads__();\\n\\t\\twhile (!__ramCheck__(HOST, weakenT * weakenRam) && weakenT > 1) {\\n\\t\\t\\tweakenT -= IS_PSERV ? 10 : 1;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\treturn weakenT;\\n\\t}\\n\\n\\tfunction __calcWeakenGrowThreads__() {\\n\\t\\tlet weakened = 0;\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\n\\t\\tgrowT = __getOptimalGrowThreads__();\\n\\t\\tweakened = growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR) && growT > 1) {\\n\\t\\t\\tgrowT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tweakened = growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT];\\n\\t}\\n\\n\\tfunction __calcWeakenGrowHackThreads__() {\\n\\t\\tlet weakenT = 1;\\n\\t\\tlet growT = 0;\\n\\t\\tlet hackT = 0;\\n\\n\\t\\tlet weakenTR = weakenT * weakenRam;\\n\\t\\tlet growTR = growT * growRam;\\n\\t\\tlet hackTR = hackT * hackRam;\\n\\t\\tlet weakened = 0;\\n\\n\\t\\thackT = __getOptimalHackThreads__();\\n\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\tgrowTR = growT * growRam;\\n\\t\\thackTR = hackT * hackRam;\\n\\n\\t\\twhile (!__ramCheck__(HOST, weakenTR + growTR + hackTR) && hackT > 1) {\\n\\t\\t\\thackT -= IS_PSERV ? 10 : 1;\\n\\t\\t\\tgrowT = __getOptimalGrowThreads__(hackT);\\n\\n\\t\\t\\tweakened = hackT * 0.002 + growT * 0.004;\\n\\t\\t\\tweakenT = Math.ceil(weakened / 0.05);\\n\\n\\t\\t\\tweakenTR = weakenT * weakenRam;\\n\\t\\t\\tgrowTR = growT * growRam;\\n\\t\\t\\thackTR = hackT * hackRam;\\n\\t\\t}\\n\\n\\t\\tif (weakenT < 1) {\\n\\t\\t\\tweakenT = 1;\\n\\t\\t}\\n\\n\\t\\tif (growT < 1) {\\n\\t\\t\\tgrowT = 1;\\n\\t\\t}\\n\\n\\t\\tif (hackT < 1) {\\n\\t\\t\\thackT = 1;\\n\\t\\t}\\n\\n\\t\\treturn [weakenT, growT, hackT];\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\twhile (ns.isRunning('weaken.script', HOST, TARGET)) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t}\\n\\n\\t\\tlet weakenT, growT, hackT;\\n\\t\\tlet status = __nodeStatus__(TARGET);\\n\\t\\tns.print('status - ' + status);\\n\\t\\tswitch (status) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\tweakenT = __calcWeakenThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\t[weakenT, growT] = __calcWeakenGrowThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\t[weakenT, growT, hackT] = __calcWeakenGrowHackThreads__();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\t//something went wrong\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// ns.print(\\\"hackT: \\\" + hackT)\\n\\t\\t// ns.print(\\\"growT: \\\" + growT)\\n\\t\\t// ns.print(\\\"weakenT: \\\" + weakenT)\\n\\n\\t\\tif (weakenT >= 1) {\\n\\t\\t\\tns.exec('weaken.script', HOST, weakenT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (growT >= 1) {\\n\\t\\t\\tns.exec('grow.script', HOST, growT, TARGET);\\n\\t\\t}\\n\\n\\t\\tif (hackT >= 1) {\\n\\t\\t\\tns.exec('hack.script', HOST, hackT, TARGET);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///5aeb46c5-af03-4d40-b486-37cce5fa8cb1\",\"module\":{},\"dependencies\":[{\"filename\":\"daemon_fml.js\",\"url\":\"blob:file:///5aeb46c5-af03-4d40-b486-37cce5fa8cb1\"}],\"ramUsage\":6.1,\"server\":\"pserv-524288gb-24\",\"moduleSequenceNumber\":918}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":21,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":30,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":7,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":8,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":1234434.4611655667}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":118.4131,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":437643.1251072121}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":130.2131,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":461428.2302420186}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":26.5847,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":89.8264,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":118.478,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":6.2122,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":111.675,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":424210.8823019284}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{\"c\":\"clear\",\"ch\":\"connect home\"}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":10260.80457485698,\"lastPrice\":10290.434308112055,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":false,\"otlkMag\":6.440857214191866,\"otlkMagForecast\":35.24061915057722,\"cap\":361421867,\"spreadPerc\":0.3,\"shareTxForMovement\":57023,\"shareTxUntilMovement\":57023,\"totalShares\":108400000,\"maxShares\":21700000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":27349.859433328773,\"lastPrice\":27414.620691337568,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.41,\"b\":true,\"otlkMag\":7.53716713435273,\"otlkMagForecast\":68.11097081452533,\"cap\":502495213,\"spreadPerc\":0.2,\"shareTxForMovement\":79237,\"shareTxUntilMovement\":6739,\"totalShares\":71500000,\"maxShares\":14300000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":3742.782465766855,\"lastPrice\":3757.9135116216667,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":8.43554187212962,\"otlkMagForecast\":65.3475950414956,\"cap\":97671643,\"spreadPerc\":0.5,\"shareTxForMovement\":30401,\"shareTxUntilMovement\":22103,\"totalShares\":113100000,\"maxShares\":22600000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":35388.664364994904,\"lastPrice\":35236.03971697207,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":7.5691599582907285,\"otlkMagForecast\":42.792671108404015,\"cap\":245369595,\"spreadPerc\":0.4,\"shareTxForMovement\":32739,\"shareTxUntilMovement\":25763,\"totalShares\":131700000,\"maxShares\":26300000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":51714.21911084459,\"lastPrice\":51532.67221838142,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":5.607991279434889,\"otlkMagForecast\":61.73737962295273,\"cap\":424022303,\"spreadPerc\":0.1,\"shareTxForMovement\":36005,\"shareTxUntilMovement\":1075,\"totalShares\":50700000,\"maxShares\":10100000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":10084.255702177363,\"lastPrice\":10147.154728993397,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.08,\"b\":false,\"otlkMag\":10.048649622706543,\"otlkMagForecast\":33.75327117618338,\"cap\":455358837,\"spreadPerc\":0.3,\"shareTxForMovement\":45550,\"shareTxUntilMovement\":28310,\"totalShares\":31300000,\"maxShares\":6300000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":16646.651731677295,\"lastPrice\":16725.48636776789,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.82,\"b\":false,\"otlkMag\":5.5152270889946555,\"otlkMagForecast\":38.044004208102706,\"cap\":398283088,\"spreadPerc\":0.2,\"shareTxForMovement\":55659,\"shareTxUntilMovement\":27509,\"totalShares\":77400000,\"maxShares\":15500000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":4070.08150580684,\"lastPrice\":4040.6778659373545,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.26,\"b\":false,\"otlkMag\":6.822393779895218,\"otlkMagForecast\":35.74873724345651,\"cap\":252263777,\"spreadPerc\":0.3,\"shareTxForMovement\":81175,\"shareTxUntilMovement\":20085,\"totalShares\":61600000,\"maxShares\":12300000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":89461.10937925884,\"lastPrice\":89013.85645303522,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.87,\"b\":true,\"otlkMag\":7.062575079556163,\"otlkMagForecast\":58.56004342667412,\"cap\":367983633,\"spreadPerc\":0.8,\"shareTxForMovement\":96045,\"shareTxUntilMovement\":90605,\"totalShares\":57100000,\"maxShares\":11400000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":20141.111401897764,\"lastPrice\":20062.322248162203,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":false,\"otlkMag\":5.389136410424554,\"otlkMagForecast\":37.696841369636616,\"cap\":118423015,\"spreadPerc\":1,\"shareTxForMovement\":59970,\"shareTxUntilMovement\":55930,\"totalShares\":64800000,\"maxShares\":13000000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":9077.572576339937,\"lastPrice\":9110.600905221816,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":false,\"otlkMag\":6.237655588619507,\"otlkMagForecast\":43.366632727099805,\"cap\":252064047,\"spreadPerc\":0.4,\"shareTxForMovement\":95400,\"shareTxUntilMovement\":95400,\"totalShares\":63900000,\"maxShares\":12800000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":10140.656266584783,\"lastPrice\":10097.502173281848,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":5.374332498544993,\"otlkMagForecast\":56.87630313159143,\"cap\":202718021,\"spreadPerc\":0.3,\"shareTxForMovement\":48680,\"shareTxUntilMovement\":48680,\"totalShares\":104800000,\"maxShares\":21000000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":14877.241969595367,\"lastPrice\":14933.949754491478,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":false,\"otlkMag\":6.537344743826707,\"otlkMagForecast\":44.16769361352327,\"cap\":349678855,\"spreadPerc\":0.9,\"shareTxForMovement\":79299,\"shareTxUntilMovement\":20873,\"totalShares\":41000000,\"maxShares\":8200000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":21069.412129692984,\"lastPrice\":21132.687119383823,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.52,\"b\":false,\"otlkMag\":7.670467256117041,\"otlkMagForecast\":37.66673094672452,\"cap\":167536218,\"spreadPerc\":0.5,\"shareTxForMovement\":64694,\"shareTxUntilMovement\":62366,\"totalShares\":34300000,\"maxShares\":6900000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":21855.360347185946,\"lastPrice\":21779.888804086306,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":5.29628397329522,\"otlkMagForecast\":53.51845439060426,\"cap\":222065407,\"spreadPerc\":1,\"shareTxForMovement\":89738,\"shareTxUntilMovement\":89738,\"totalShares\":43500000,\"maxShares\":8700000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":16374.038238367855,\"lastPrice\":16443.07095772108,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":5.260052807390727,\"otlkMagForecast\":55.28781139765514,\"cap\":215057667,\"spreadPerc\":0.8,\"shareTxForMovement\":81639,\"shareTxUntilMovement\":81639,\"totalShares\":68600000,\"maxShares\":13700000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":5246.533301495795,\"lastPrice\":5270.773643446072,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":7.85513070171125,\"otlkMagForecast\":58.032941342538585,\"cap\":326363814,\"spreadPerc\":1,\"shareTxForMovement\":112215,\"shareTxUntilMovement\":42440,\"totalShares\":30000000,\"maxShares\":6000000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":73884.64709438702,\"lastPrice\":74153.47297300522,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":5.100613657191842,\"otlkMagForecast\":52.95478841429062,\"cap\":157206029,\"spreadPerc\":0.8,\"shareTxForMovement\":119820,\"shareTxUntilMovement\":119820,\"totalShares\":39900000,\"maxShares\":8000000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":39644.535470744275,\"lastPrice\":39818.54508604528,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":false,\"otlkMag\":5.5280733289751725,\"otlkMagForecast\":46.906488149602644,\"cap\":118881583,\"spreadPerc\":0.5,\"shareTxForMovement\":50898,\"shareTxUntilMovement\":50898,\"totalShares\":33500000,\"maxShares\":6700000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":1054.5780211123765,\"lastPrice\":1039.3908897901633,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.53,\"b\":true,\"otlkMag\":7.351124045596609,\"otlkMagForecast\":61.315894750296245,\"cap\":117303840,\"spreadPerc\":1.1,\"shareTxForMovement\":31320,\"shareTxUntilMovement\":31150,\"totalShares\":53100000,\"maxShares\":10600000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":20068.344270695918,\"lastPrice\":19929.07705984048,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.21,\"b\":true,\"otlkMag\":6.896105393345355,\"otlkMagForecast\":56.28882039007606,\"cap\":107832536,\"spreadPerc\":1.2,\"shareTxForMovement\":42216,\"shareTxUntilMovement\":42216,\"totalShares\":41400000,\"maxShares\":8300000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":4313.861931883515,\"lastPrice\":4300.202647943453,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":true,\"otlkMag\":5.459672274905211,\"otlkMagForecast\":54.19412434301455,\"cap\":84361535,\"spreadPerc\":0.4,\"shareTxForMovement\":123986,\"shareTxUntilMovement\":123986,\"totalShares\":44100000,\"maxShares\":8800000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":365.86695080146393,\"lastPrice\":362.1233811412967,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.79,\"b\":true,\"otlkMag\":6.6255287693851255,\"otlkMagForecast\":57.86520594461987,\"cap\":77774754,\"spreadPerc\":1.5,\"shareTxForMovement\":85534,\"shareTxUntilMovement\":9916,\"totalShares\":57600000,\"maxShares\":11500000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":21737.970420526864,\"lastPrice\":21938.840521226823,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.6,\"b\":true,\"otlkMag\":5.239570046543851,\"otlkMagForecast\":56.27819696556295,\"cap\":148999474,\"spreadPerc\":0.5,\"shareTxForMovement\":43527,\"shareTxUntilMovement\":7046,\"totalShares\":33300000,\"maxShares\":6700000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":583.7192135622674,\"lastPrice\":580.3674040145003,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1,\"b\":true,\"otlkMag\":7.577204382190493,\"otlkMagForecast\":61.421265791033235,\"cap\":23132305,\"spreadPerc\":1.1,\"shareTxForMovement\":67386,\"shareTxUntilMovement\":67386,\"totalShares\":79300000,\"maxShares\":15900000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":102712.17265983202,\"lastPrice\":104462.1009533659,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.95,\"b\":false,\"otlkMag\":8.159376354996265,\"otlkMagForecast\":33.18723786450556,\"cap\":37988828,\"spreadPerc\":2,\"shareTxForMovement\":22247,\"shareTxUntilMovement\":5667,\"totalShares\":19500000,\"maxShares\":3900000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":4089.48491915687,\"lastPrice\":4066.469445855578,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.98,\"b\":false,\"otlkMag\":5.3476621852427995,\"otlkMagForecast\":47.488963078441905,\"cap\":39204927,\"spreadPerc\":1.2,\"shareTxForMovement\":85612,\"shareTxUntilMovement\":85612,\"totalShares\":15800000,\"maxShares\":3200000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":1442.5430626455056,\"lastPrice\":1449.041361947045,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":6.2942332265656145,\"otlkMagForecast\":56.2326112143297,\"cap\":48187713,\"spreadPerc\":0.6,\"shareTxForMovement\":146219,\"shareTxUntilMovement\":92430,\"totalShares\":14000000,\"maxShares\":2800000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":4221.048155901502,\"lastPrice\":4255.177242369382,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.4,\"b\":false,\"otlkMag\":5.523218092785509,\"otlkMagForecast\":46.87231955474253,\"cap\":63646998,\"spreadPerc\":0.7,\"shareTxForMovement\":48105,\"shareTxUntilMovement\":48105,\"totalShares\":9200000,\"maxShares\":1800000}},\"Joes Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joes Guns\",\"symbol\":\"JGN\",\"price\":4396.815981895951,\"lastPrice\":4328.569021222953,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.73,\"b\":true,\"otlkMag\":7.107745213204517,\"otlkMagForecast\":58.36719373002581,\"cap\":5554978,\"spreadPerc\":1.1,\"shareTxForMovement\":45660,\"shareTxUntilMovement\":36050,\"totalShares\":54300000,\"maxShares\":10900000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":560.8628401442224,\"lastPrice\":565.1385371262465,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.32,\"b\":false,\"otlkMag\":5.992406676253696,\"otlkMagForecast\":37.70745741564762,\"cap\":8685116,\"spreadPerc\":0.9,\"shareTxForMovement\":45552,\"shareTxUntilMovement\":16772,\"totalShares\":96700000,\"maxShares\":19300000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":37957.0547367905,\"lastPrice\":38123.657584176166,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":false,\"otlkMag\":5.315125129388924,\"otlkMagForecast\":46.204525090086996,\"cap\":517518626,\"spreadPerc\":0.5,\"shareTxForMovement\":157673,\"shareTxUntilMovement\":49221,\"totalShares\":13300000,\"maxShares\":2700000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":20004.058522706488,\"lastPrice\":20068.755272690305,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":false,\"otlkMag\":8.055157278241419,\"otlkMagForecast\":38.87781416416596,\"cap\":37224091,\"spreadPerc\":0.3,\"shareTxForMovement\":144679,\"shareTxUntilMovement\":79973,\"totalShares\":21800000,\"maxShares\":4400000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":598888,\"lastUpdate\":1640469936383,\"ticksUntilCycle\":73}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":200,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"}}","VersionSave":"7","AllGangsSave":"","LastExportBonus":"1640312026417","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}